# ---------------------------------------------------------------------------------------
# Plot the training loss and IoU scores for different loss functions.

# ---------------------------------------------------------------------------------------
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

mpl.rcParams.update({
    'font.size': 18,
    'lines.linewidth': 3}
)

# Default.
# ./results/contour_dataset_sensitivity_analysis/num_iterations/n_iters_5
bce_results = np.array([
    [1, 0.5135, 0.1630, 0.4190, 0.1972, 0.0001],
    [2, 0.3729, 0.1993, 0.3161, 0.1980, 0.0001],
    [3, 0.2542, 0.2008, 0.2199, 0.1988, 0.0001],
    [4, 0.2136, 0.2087, 0.2047, 0.2069, 0.0001],
    [5, 0.2020, 0.2182, 0.1978, 0.2061, 0.0001],
    [6, 0.1984, 0.2236, 0.1993, 0.2161, 0.0001],
    [7, 0.1946, 0.2266, 0.1937, 0.2074, 0.0001],
    [8, 0.1899, 0.2389, 0.1894, 0.2476, 0.0001],
    [9, 0.1867, 0.2547, 0.1858, 0.2708, 0.0001],
    [10, 0.1841, 0.2754, 0.1860, 0.2356, 0.0001],
    [11, 0.1819, 0.3002, 0.1806, 0.2934, 0.0001],
    [12, 0.1796, 0.3257, 0.1800, 0.3585, 0.0001],
    [13, 0.1777, 0.3523, 0.1762, 0.3491, 0.0001],
    [14, 0.1759, 0.3746, 0.1757, 0.4070, 0.0001],
    [15, 0.1741, 0.4009, 0.1732, 0.4213, 0.0001],
    [16, 0.1726, 0.4232, 0.1746, 0.4188, 0.0001],
    [17, 0.1715, 0.4369, 0.1747, 0.4761, 0.0001],
    [18, 0.1701, 0.4585, 0.1708, 0.4192, 0.0001],
    [19, 0.1692, 0.4711, 0.1686, 0.4808, 0.0001],
    [20, 0.1681, 0.4847, 0.1680, 0.4913, 0.0001],
    [21, 0.1671, 0.4971, 0.1717, 0.4982, 0.0001],
    [22, 0.1663, 0.5093, 0.1719, 0.4028, 0.0001],
    [23, 0.1655, 0.5218, 0.1669, 0.4944, 0.0001],
    [24, 0.1646, 0.5352, 0.1650, 0.5490, 0.0001],
    [25, 0.1641, 0.5427, 0.1654, 0.5239, 0.0001],
    [26, 0.1635, 0.5536, 0.1659, 0.5678, 0.0001],
    [27, 0.1628, 0.5627, 0.1747, 0.5094, 0.0001],
    [28, 0.1623, 0.5718, 0.1654, 0.5149, 0.0001],
    [29, 0.1618, 0.5816, 0.1642, 0.5593, 0.0001],
    [30, 0.1615, 0.5869, 0.1646, 0.5460, 0.0001],
    [31, 0.1609, 0.5960, 0.1639, 0.5977, 0.0001],
    [32, 0.1607, 0.6000, 0.1650, 0.5362, 0.0001],
    [33, 0.1601, 0.6116, 0.1609, 0.5986, 0.0001],
    [34, 0.1599, 0.6145, 0.1607, 0.6157, 0.0001],
    [35, 0.1595, 0.6225, 0.1615, 0.6089, 0.0001],
    [36, 0.1591, 0.6292, 0.1599, 0.6162, 0.0001],
    [37, 0.1589, 0.6344, 0.1609, 0.6156, 0.0001],
    [38, 0.1586, 0.6391, 0.1604, 0.6081, 0.0001],
    [39, 0.1584, 0.6432, 0.1600, 0.6409, 0.0001],
    [40, 0.1581, 0.6504, 0.1591, 0.6402, 0.0001],
    [41, 0.1579, 0.6543, 0.1593, 0.6379, 0.0001],
    [42, 0.1576, 0.6598, 0.1624, 0.6067, 0.0001],
    [43, 0.1573, 0.6652, 0.1595, 0.6524, 0.0001],
    [44, 0.1571, 0.6690, 0.1587, 0.6594, 0.0001],
    [45, 0.1569, 0.6738, 0.1602, 0.6228, 0.0001],
    [46, 0.1567, 0.6786, 0.1587, 0.6518, 0.0001],
    [47, 0.1566, 0.6808, 0.1595, 0.6306, 0.0001],
    [48, 0.1564, 0.6854, 0.1599, 0.6360, 0.0001],
    [49, 0.1562, 0.6883, 0.1573, 0.6872, 0.0001],
    [50, 0.1560, 0.6928, 0.1582, 0.6734, 0.0001],
    [51, 0.1560, 0.6956, 0.1575, 0.6813, 0.0001],
    [52, 0.1558, 0.6985, 0.1575, 0.6821, 0.0001],
    [53, 0.1555, 0.7044, 0.1591, 0.6622, 0.0001],
    [54, 0.1554, 0.7088, 0.1617, 0.6237, 0.0001],
    [55, 0.1553, 0.7100, 0.1573, 0.6744, 0.0001],
    [56, 0.1551, 0.7139, 0.1576, 0.6935, 0.0001],
    [57, 0.1550, 0.7177, 0.1572, 0.6934, 0.0001],
    [58, 0.1549, 0.7207, 0.1570, 0.6856, 0.0001],
    [59, 0.1548, 0.7225, 0.1573, 0.6874, 0.0001],
    [60, 0.1547, 0.7246, 0.1570, 0.6881, 0.0001],
    [61, 0.1546, 0.7287, 0.1589, 0.6581, 0.0001],
    [62, 0.1544, 0.7322, 0.1575, 0.6893, 0.0001],
    [63, 0.1543, 0.7327, 0.1582, 0.6820, 0.0001],
    [64, 0.1543, 0.7333, 0.1596, 0.6566, 0.0001],
    [65, 0.1541, 0.7396, 0.1577, 0.6861, 0.0001],
    [66, 0.1541, 0.7398, 0.1571, 0.6953, 0.0001],
    [67, 0.1541, 0.7404, 0.1577, 0.6839, 0.0001],
    [68, 0.1539, 0.7439, 0.1571, 0.7009, 0.0001],
    [69, 0.1537, 0.7485, 0.1567, 0.7005, 0.0001],
    [70, 0.1537, 0.7514, 0.1562, 0.7083, 0.0001],
    [71, 0.1536, 0.7509, 0.1587, 0.6718, 0.0001],
    [72, 0.1536, 0.7524, 0.1570, 0.7042, 0.0001],
    [73, 0.1535, 0.7552, 0.1565, 0.7229, 0.0001],
    [74, 0.1535, 0.7544, 0.1561, 0.7204, 0.0001],
    [75, 0.1534, 0.7589, 0.1561, 0.7199, 0.0001],
    [76, 0.1533, 0.7599, 0.1582, 0.6937, 0.0001],
    [77, 0.1532, 0.7637, 0.1559, 0.7213, 0.0001],
    [78, 0.1531, 0.7651, 0.1566, 0.7136, 0.0001],
    [79, 0.1531, 0.7655, 0.1568, 0.7115, 0.0001],
    [80, 0.1530, 0.7696, 0.1561, 0.7186, 0.0001],
    [81, 0.1510, 0.7945, 0.1543, 0.7432, 5e-05],
    [82, 0.1508, 0.7953, 0.1543, 0.7290, 5e-05],
    [83, 0.1507, 0.7972, 0.1551, 0.7231, 5e-05],
    [84, 0.1507, 0.7979, 0.1545, 0.7378, 5e-05],
    [85, 0.1506, 0.8003, 0.1550, 0.7247, 5e-05],
    [86, 0.1507, 0.7991, 0.1548, 0.7303, 5e-05],
    [87, 0.1506, 0.8019, 0.1548, 0.7391, 5e-05],
    [88, 0.1505, 0.8024, 0.1544, 0.7393, 5e-05],
    [89, 0.1504, 0.8047, 0.1545, 0.7421, 5e-05],
    [90, 0.1505, 0.8042, 0.1547, 0.7411, 5e-05],
    [91, 0.1504, 0.8062, 0.1545, 0.7454, 5e-05],
    [92, 0.1504, 0.8064, 0.1541, 0.7484, 5e-05],
    [93, 0.1503, 0.8095, 0.1541, 0.7450, 5e-05],
    [94, 0.1503, 0.8098, 0.1549, 0.7328, 5e-05],
    [95, 0.1503, 0.8104, 0.1552, 0.7220, 5e-05],
    [96, 0.1503, 0.8106, 0.1546, 0.7442, 5e-05],
    [97, 0.1503, 0.8119, 0.1550, 0.7331, 5e-05],
    [98, 0.1502, 0.8137, 0.1546, 0.7458, 5e-05],
    [99, 0.1501, 0.8151, 0.1549, 0.7509, 5e-05],
    [100, 0.1502, 0.8142, 0.1549, 0.7361, 5e-05],
])


def main(results, label, color='black'):

    plt.figure("IoU", figsize=(6, 6))

    plt.plot(
        results[:, 0], results[:, 2], label='train ' + label, color=color)
    plt.plot(
        results[:, 0], results[:, 4], label='val ' + label, color=color, linestyle='--')

    plt.xlabel("Epoch")
    plt.ylabel("IoU")
    plt.ylim([0, 1])
    plt.legend()
    plt.tight_layout()

    plt.figure("Loss", figsize=(6, 6))

    plt.plot(
        results[:, 0], results[:, 1], label='train ' + label, color=color)
    plt.plot(
        results[:, 0], results[:, 3], label='val ' + label, color=color, linestyle='--')

    plt.xlabel("Epoch")
    plt.ylabel("Loss")
    plt.legend()
    plt.tight_layout()


if __name__ == "__main__":
    plt.ion()

    main(bce_results, 'BCE', color='b')
    # main(class_balanced_cce_results, 'Class_balanced BCE', color='r')

    # main(model_recurrent_BN_results, 'model_recurrent_BN_layers')

    # ----------------------------------------------------------------------
    import pdb
    pdb.set_trace()