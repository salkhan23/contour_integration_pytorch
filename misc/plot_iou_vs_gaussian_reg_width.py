# ---------------------------------------------------------------------------------------
# Plot results of Model trained with Gaussian Regularization - different Gaussian widths
#
# Model is baseline: n_iters=5, lateral kernel sizes = 15x15, loss weight = 0.0001
#
# Results_dir: /results/gaussian_reg_loss_weight_explore
# ---------------------------------------------------------------------------------------
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

mpl.rcParams.update({
    'font.size': 18,
    'lines.linewidth': 3}
)

gaussian_width_results = {
    0: np.array([
        [0, 0.5454, 0.1658, 0.4949, 0.1972, 3e-05],
        [1, 0.4588, 0.2006, 0.4211, 0.1972, 3e-05],
        [2, 0.4004, 0.2006, 0.3753, 0.1972, 3e-05],
        [3, 0.3500, 0.2006, 0.3231, 0.1972, 3e-05],
        [4, 0.3076, 0.2006, 0.2935, 0.1972, 3e-05],
        [5, 0.2727, 0.2006, 0.2512, 0.1972, 3e-05],
        [6, 0.2446, 0.2007, 0.2339, 0.1972, 3e-05],
        [7, 0.2228, 0.2549, 0.2149, 0.3170, 3e-05],
        [8, 0.2055, 0.3688, 0.2013, 0.4152, 3e-05],
        [9, 0.1916, 0.4397, 0.1918, 0.4784, 3e-05],
        [10, 0.1810, 0.4937, 0.1767, 0.5028, 3e-05],
        [11, 0.1730, 0.5361, 0.1706, 0.4867, 3e-05],
        [12, 0.1670, 0.5732, 0.1679, 0.5720, 3e-05],
        [13, 0.1625, 0.6001, 0.1615, 0.5922, 3e-05],
        [14, 0.1592, 0.6250, 0.1590, 0.6149, 3e-05],
        [15, 0.1567, 0.6490, 0.1578, 0.6417, 3e-05],
        [16, 0.1547, 0.6687, 0.1564, 0.6397, 3e-05],
        [17, 0.1532, 0.6836, 0.1550, 0.6477, 3e-05],
        [18, 0.1519, 0.7017, 0.1544, 0.6583, 3e-05],
        [19, 0.1508, 0.7185, 0.1538, 0.6684, 3e-05],
        [20, 0.1498, 0.7333, 0.1537, 0.6684, 3e-05],
        [21, 0.1489, 0.7493, 0.1547, 0.6571, 3e-05],
        [22, 0.1481, 0.7643, 0.1536, 0.6745, 3e-05],
        [23, 0.1473, 0.7798, 0.1535, 0.6818, 3e-05],
        [24, 0.1465, 0.7957, 0.1551, 0.6630, 3e-05],
        [25, 0.1457, 0.8132, 0.1535, 0.6918, 3e-05],
        [26, 0.1451, 0.8268, 0.1537, 0.6937, 3e-05],
        [27, 0.1444, 0.8441, 0.1545, 0.6834, 3e-05],
        [28, 0.1437, 0.8600, 0.1551, 0.6895, 3e-05],
        [29, 0.1430, 0.8748, 0.1550, 0.6725, 3e-05],
        [30, 0.1424, 0.8914, 0.1571, 0.6574, 3e-05],
        [31, 0.1407, 0.9448, 0.1553, 0.7061, 3e-06],
        [32, 0.1405, 0.9528, 0.1555, 0.7070, 3e-06],
        [33, 0.1403, 0.9567, 0.1557, 0.7038, 3e-06],
        [34, 0.1402, 0.9597, 0.1558, 0.7077, 3e-06],
        [35, 0.1401, 0.9628, 0.1560, 0.7036, 3e-06],
        [36, 0.1401, 0.9653, 0.1562, 0.7038, 3e-06],
        [37, 0.1400, 0.9669, 0.1560, 0.7046, 3e-06],
        [38, 0.1399, 0.9688, 0.1563, 0.7067, 3e-06],
        [39, 0.1398, 0.9708, 0.1569, 0.7046, 3e-06],
        [40, 0.1398, 0.9716, 0.1569, 0.7043, 3e-06],
        [41, 0.1397, 0.9743, 0.1569, 0.7078, 3e-06],
        [42, 0.1396, 0.9757, 0.1571, 0.7070, 3e-06],
        [43, 0.1396, 0.9771, 0.1576, 0.7042, 3e-06],
        [44, 0.1395, 0.9781, 0.1572, 0.7043, 3e-06],
        [45, 0.1394, 0.9788, 0.1575, 0.7052, 3e-06],
        [46, 0.1394, 0.9803, 0.1575, 0.7037, 3e-06],
        [47, 0.1393, 0.9814, 0.1579, 0.7046, 3e-06],
        [48, 0.1393, 0.9829, 0.1582, 0.7002, 3e-06],
        [49, 0.1392, 0.9833, 0.1584, 0.7036, 3e-06],
    ]),

    2: np.array([
        [0, 0.6690, 0.1237, 0.5232, 0.1967, 3e-05],
        [1, 0.4852, 0.2004, 0.4604, 0.1972, 3e-05],
        [2, 0.4186, 0.2006, 0.3995, 0.1972, 3e-05],
        [3, 0.3653, 0.2006, 0.3464, 0.1972, 3e-05],
        [4, 0.3222, 0.2006, 0.3050, 0.1972, 3e-05],
        [5, 0.2881, 0.2006, 0.2775, 0.1972, 3e-05],
        [6, 0.2621, 0.2006, 0.2575, 0.1972, 3e-05],
        [7, 0.2430, 0.2006, 0.2335, 0.1972, 3e-05],
        [8, 0.2294, 0.2006, 0.2219, 0.1972, 3e-05],
        [9, 0.2201, 0.2006, 0.2165, 0.1972, 3e-05],
        [10, 0.2139, 0.2006, 0.2161, 0.1972, 3e-05],
        [11, 0.2099, 0.2007, 0.2080, 0.1972, 3e-05],
        [12, 0.2068, 0.2029, 0.2089, 0.1976, 3e-05],
        [13, 0.2043, 0.2085, 0.2039, 0.2135, 3e-05],
        [14, 0.2027, 0.2139, 0.2015, 0.2168, 3e-05],
        [15, 0.2012, 0.2220, 0.1998, 0.2252, 3e-05],
        [16, 0.1993, 0.2324, 0.2094, 0.2286, 3e-05],
        [17, 0.1974, 0.2454, 0.1988, 0.2667, 3e-05],
        [18, 0.1981, 0.2454, 0.1989, 0.2463, 3e-05],
        [19, 0.1958, 0.2643, 0.1975, 0.2369, 3e-05],
        [20, 0.1949, 0.2709, 0.1940, 0.2744, 3e-05],
        [21, 0.1930, 0.2876, 0.1931, 0.2793, 3e-05],
        [22, 0.1916, 0.2961, 0.1942, 0.2560, 3e-05],
        [23, 0.1903, 0.3035, 0.1908, 0.2820, 3e-05],
        [24, 0.1893, 0.3119, 0.1897, 0.3125, 3e-05],
        [25, 0.1884, 0.3178, 0.1893, 0.3273, 3e-05],
        [26, 0.1874, 0.3255, 0.1876, 0.3213, 3e-05],
        [27, 0.1867, 0.3302, 0.1861, 0.3553, 3e-05],
        [28, 0.1858, 0.3401, 0.1903, 0.2761, 3e-05],
        [29, 0.1851, 0.3444, 0.1858, 0.3257, 3e-05],
        [30, 0.1846, 0.3532, 0.1849, 0.3606, 3e-05],
        [31, 0.1803, 0.3762, 0.1813, 0.3659, 3e-06],
        [32, 0.1799, 0.3806, 0.1819, 0.3479, 3e-06],
        [33, 0.1797, 0.3808, 0.1811, 0.3787, 3e-06],
        [34, 0.1795, 0.3836, 0.1812, 0.3573, 3e-06],
        [35, 0.1794, 0.3835, 0.1807, 0.3825, 3e-06],
        [36, 0.1792, 0.3869, 0.1813, 0.3531, 3e-06],
        [37, 0.1791, 0.3882, 0.1803, 0.3740, 3e-06],
        [38, 0.1789, 0.3890, 0.1807, 0.3881, 3e-06],
        [39, 0.1788, 0.3914, 0.1804, 0.3727, 3e-06],
        [40, 0.1787, 0.3925, 0.1807, 0.3900, 3e-06],
        [41, 0.1786, 0.3947, 0.1802, 0.3830, 3e-06],
        [42, 0.1784, 0.3968, 0.1807, 0.3694, 3e-06],
        [43, 0.1783, 0.3974, 0.1803, 0.3744, 3e-06],
        [44, 0.1782, 0.3993, 0.1797, 0.3853, 3e-06],
        [45, 0.1781, 0.3998, 0.1841, 0.3309, 3e-06],
        [46, 0.1780, 0.4011, 0.1797, 0.3938, 3e-06],
        [47, 0.1779, 0.4029, 0.1809, 0.3598, 3e-06],
        [48, 0.1778, 0.4036, 0.1795, 0.3917, 3e-06],
        [49, 0.1777, 0.4046, 0.1793, 0.4050, 3e-06],
    ]),

    4: np.array([
        [0, 0.5642, 0.1643, 0.4261, 0.1992, 3e-05],
        [1, 0.3862, 0.1996, 0.3537, 0.1992, 3e-05],
        [2, 0.3187, 0.1996, 0.2972, 0.1992, 3e-05],
        [3, 0.2738, 0.1996, 0.2639, 0.1992, 3e-05],
        [4, 0.2449, 0.1996, 0.2394, 0.1992, 3e-05],
        [5, 0.2270, 0.1996, 0.2148, 0.1992, 3e-05],
        [6, 0.2162, 0.1996, 0.2117, 0.1992, 3e-05],
        [7, 0.2073, 0.1999, 0.2069, 0.2009, 3e-05],
        [8, 0.1996, 0.2150, 0.1948, 0.2306, 3e-05],
        [9, 0.1950, 0.2554, 0.1945, 0.2276, 3e-05],
        [10, 0.1925, 0.2810, 0.1906, 0.2964, 3e-05],
        [11, 0.1908, 0.2992, 0.1919, 0.3435, 3e-05],
        [12, 0.1893, 0.3124, 0.1880, 0.3298, 3e-05],
        [13, 0.1878, 0.3243, 0.1867, 0.3439, 3e-05],
        [14, 0.1863, 0.3412, 0.1862, 0.3826, 3e-05],
        [15, 0.1849, 0.3592, 0.1862, 0.3192, 3e-05],
        [16, 0.1837, 0.3764, 0.1832, 0.4009, 3e-05],
        [17, 0.1822, 0.3967, 0.1812, 0.3983, 3e-05],
        [18, 0.1809, 0.4123, 0.1804, 0.4346, 3e-05],
        [19, 0.1797, 0.4295, 0.1813, 0.4607, 3e-05],
        [20, 0.1782, 0.4472, 0.1845, 0.4692, 3e-05],
        [21, 0.1774, 0.4588, 0.1775, 0.4566, 3e-05],
        [22, 0.1761, 0.4736, 0.1765, 0.4662, 3e-05],
        [23, 0.1753, 0.4857, 0.1752, 0.4858, 3e-05],
        [24, 0.1743, 0.4981, 0.1750, 0.5082, 3e-05],
        [25, 0.1736, 0.5077, 0.1734, 0.5163, 3e-05],
        [26, 0.1728, 0.5176, 0.1733, 0.5274, 3e-05],
        [27, 0.1721, 0.5285, 0.1736, 0.5196, 3e-05],
        [28, 0.1716, 0.5371, 0.1730, 0.5087, 3e-05],
        [29, 0.1708, 0.5457, 0.1710, 0.5516, 3e-05],
        [30, 0.1701, 0.5565, 0.1732, 0.5177, 3e-05],
        [31, 0.1660, 0.5923, 0.1670, 0.5775, 3e-06],
        [32, 0.1654, 0.5962, 0.1667, 0.5797, 3e-06],
        [33, 0.1652, 0.5981, 0.1667, 0.5880, 3e-06],
        [34, 0.1651, 0.5993, 0.1666, 0.5792, 3e-06],
        [35, 0.1649, 0.6023, 0.1664, 0.5831, 3e-06],
        [36, 0.1648, 0.6033, 0.1669, 0.5744, 3e-06],
        [37, 0.1647, 0.6042, 0.1664, 0.5870, 3e-06],
        [38, 0.1646, 0.6047, 0.1662, 0.5835, 3e-06],
        [39, 0.1645, 0.6068, 0.1661, 0.5878, 3e-06],
        [40, 0.1644, 0.6075, 0.1661, 0.5876, 3e-06],
        [41, 0.1643, 0.6090, 0.1661, 0.5918, 3e-06],
        [42, 0.1642, 0.6094, 0.1659, 0.5932, 3e-06],
        [43, 0.1642, 0.6106, 0.1658, 0.5882, 3e-06],
        [44, 0.1641, 0.6128, 0.1659, 0.5929, 3e-06],
        [45, 0.1640, 0.6144, 0.1656, 0.5965, 3e-06],
        [46, 0.1639, 0.6134, 0.1658, 0.5879, 3e-06],
        [47, 0.1638, 0.6166, 0.1656, 0.5932, 3e-06],
        [48, 0.1637, 0.6175, 0.1656, 0.5958, 3e-06],
        [49, 0.1637, 0.6193, 0.1657, 0.5934, 3e-06],
    ]),

    6: np.array([
        [0, 0.4975, 0.1762, 0.3894, 0.2027, 3e-05],
        [1, 0.3421, 0.1994, 0.3099, 0.2027, 3e-05],
        [2, 0.2836, 0.1994, 0.2689, 0.2027, 3e-05],
        [3, 0.2486, 0.1994, 0.2397, 0.2027, 3e-05],
        [4, 0.2279, 0.1994, 0.2239, 0.2027, 3e-05],
        [5, 0.2149, 0.1994, 0.2058, 0.2027, 3e-05],
        [6, 0.2042, 0.1995, 0.1982, 0.2027, 3e-05],
        [7, 0.1961, 0.2131, 0.1931, 0.2301, 3e-05],
        [8, 0.1916, 0.2681, 0.1912, 0.3214, 3e-05],
        [9, 0.1887, 0.3049, 0.1941, 0.3546, 3e-05],
        [10, 0.1864, 0.3345, 0.1890, 0.3775, 3e-05],
        [11, 0.1843, 0.3614, 0.1861, 0.3945, 3e-05],
        [12, 0.1823, 0.3866, 0.1828, 0.3436, 3e-05],
        [13, 0.1802, 0.4094, 0.1791, 0.4150, 3e-05],
        [14, 0.1784, 0.4351, 0.1781, 0.4137, 3e-05],
        [15, 0.1766, 0.4588, 0.1777, 0.4305, 3e-05],
        [16, 0.1755, 0.4751, 0.1747, 0.4899, 3e-05],
        [17, 0.1740, 0.4966, 0.1740, 0.5218, 3e-05],
        [18, 0.1727, 0.5137, 0.1743, 0.4938, 3e-05],
        [19, 0.1717, 0.5296, 0.1727, 0.5375, 3e-05],
        [20, 0.1707, 0.5434, 0.1704, 0.5666, 3e-05],
        [21, 0.1696, 0.5586, 0.1716, 0.5283, 3e-05],
        [22, 0.1689, 0.5685, 0.1723, 0.5223, 3e-05],
        [23, 0.1682, 0.5808, 0.1755, 0.5210, 3e-05],
        [24, 0.1675, 0.5912, 0.1723, 0.5611, 3e-05],
        [25, 0.1669, 0.5998, 0.1674, 0.5880, 3e-05],
        [26, 0.1664, 0.6068, 0.1674, 0.5987, 3e-05],
        [27, 0.1658, 0.6153, 0.1670, 0.6079, 3e-05],
        [28, 0.1653, 0.6208, 0.1678, 0.5935, 3e-05],
        [29, 0.1649, 0.6267, 0.1701, 0.5583, 3e-05],
        [30, 0.1644, 0.6363, 0.1663, 0.6016, 3e-05],
        [31, 0.1606, 0.6724, 0.1622, 0.6495, 3e-06],
        [32, 0.1601, 0.6744, 0.1621, 0.6485, 3e-06],
        [33, 0.1599, 0.6755, 0.1620, 0.6489, 3e-06],
        [34, 0.1598, 0.6788, 0.1621, 0.6462, 3e-06],
        [35, 0.1597, 0.6787, 0.1620, 0.6543, 3e-06],
        [36, 0.1596, 0.6808, 0.1617, 0.6494, 3e-06],
        [37, 0.1595, 0.6829, 0.1617, 0.6552, 3e-06],
        [38, 0.1594, 0.6811, 0.1618, 0.6505, 3e-06],
        [39, 0.1593, 0.6833, 0.1620, 0.6516, 3e-06],
        [40, 0.1593, 0.6833, 0.1616, 0.6488, 3e-06],
        [41, 0.1592, 0.6846, 0.1615, 0.6482, 3e-06],
        [42, 0.1591, 0.6853, 0.1614, 0.6564, 3e-06],
        [43, 0.1590, 0.6870, 0.1615, 0.6476, 3e-06],
        [44, 0.1590, 0.6882, 0.1614, 0.6629, 3e-06],
        [45, 0.1589, 0.6887, 0.1614, 0.6631, 3e-06],
        [46, 0.1588, 0.6906, 0.1613, 0.6610, 3e-06],
        [47, 0.1588, 0.6919, 0.1614, 0.6534, 3e-06],
        [48, 0.1587, 0.6921, 0.1621, 0.6521, 3e-06],
        [49, 0.1587, 0.6915, 0.1614, 0.6624, 3e-06],
        ]),

    8: np.array([
        [0, 0.5727, 0.1645, 0.4700, 0.1907, 3e-05],
        [1, 0.4312, 0.2019, 0.3928, 0.1907, 3e-05],
        [2, 0.3590, 0.2019, 0.3387, 0.1907, 3e-05],
        [3, 0.3064, 0.2019, 0.2925, 0.1907, 3e-05],
        [4, 0.2691, 0.2019, 0.2552, 0.1907, 3e-05],
        [5, 0.2430, 0.2019, 0.2299, 0.1907, 3e-05],
        [6, 0.2241, 0.2019, 0.2222, 0.1907, 3e-05],
        [7, 0.2100, 0.2029, 0.2139, 0.2058, 3e-05],
        [8, 0.2003, 0.2362, 0.1967, 0.2257, 3e-05],
        [9, 0.1943, 0.2680, 0.1920, 0.2651, 3e-05],
        [10, 0.1905, 0.2877, 0.1892, 0.3046, 3e-05],
        [11, 0.1876, 0.3041, 0.1862, 0.3060, 3e-05],
        [12, 0.1849, 0.3314, 0.1833, 0.3453, 3e-05],
        [13, 0.1821, 0.3677, 0.1816, 0.3985, 3e-05],
        [14, 0.1795, 0.4019, 0.1786, 0.4314, 3e-05],
        [15, 0.1776, 0.4278, 0.1768, 0.4496, 3e-05],
        [16, 0.1759, 0.4531, 0.1763, 0.4193, 3e-05],
        [17, 0.1744, 0.4758, 0.1756, 0.4747, 3e-05],
        [18, 0.1729, 0.4940, 0.1732, 0.4706, 3e-05],
        [19, 0.1716, 0.5154, 0.1735, 0.4948, 3e-05],
        [20, 0.1703, 0.5335, 0.1703, 0.5277, 3e-05],
        [21, 0.1692, 0.5484, 0.1687, 0.5488, 3e-05],
        [22, 0.1683, 0.5640, 0.1691, 0.5516, 3e-05],
        [23, 0.1677, 0.5727, 0.1681, 0.5696, 3e-05],
        [24, 0.1667, 0.5853, 0.1691, 0.5565, 3e-05],
        [25, 0.1660, 0.5964, 0.1676, 0.5397, 3e-05],
        [26, 0.1655, 0.6044, 0.1672, 0.5835, 3e-05],
        [27, 0.1648, 0.6142, 0.1656, 0.6043, 3e-05],
        [28, 0.1643, 0.6229, 0.1662, 0.5797, 3e-05],
        [29, 0.1637, 0.6305, 0.1660, 0.6019, 3e-05],
        [30, 0.1632, 0.6361, 0.1646, 0.6083, 3e-05],
        [31, 0.1599, 0.6798, 0.1618, 0.6359, 3e-06],
        [32, 0.1593, 0.6831, 0.1616, 0.6441, 3e-06],
        [33, 0.1592, 0.6826, 0.1616, 0.6375, 3e-06],
        [34, 0.1591, 0.6845, 0.1614, 0.6399, 3e-06],
        [35, 0.1589, 0.6870, 0.1613, 0.6447, 3e-06],
        [36, 0.1588, 0.6870, 0.1613, 0.6423, 3e-06],
        [37, 0.1587, 0.6898, 0.1612, 0.6410, 3e-06],
        [38, 0.1586, 0.6896, 0.1613, 0.6423, 3e-06],
        [39, 0.1585, 0.6921, 0.1614, 0.6392, 3e-06],
        [40, 0.1585, 0.6912, 0.1610, 0.6468, 3e-06],
        [41, 0.1584, 0.6926, 0.1610, 0.6443, 3e-06],
        [42, 0.1583, 0.6941, 0.1610, 0.6470, 3e-06],
        [43, 0.1583, 0.6950, 0.1608, 0.6465, 3e-06],
        [44, 0.1582, 0.6954, 0.1610, 0.6393, 3e-06],
        [45, 0.1581, 0.6965, 0.1609, 0.6446, 3e-06],
        [46, 0.1580, 0.6969, 0.1614, 0.6423, 3e-06],
        [47, 0.1580, 0.6985, 0.1608, 0.6440, 3e-06],
        [48, 0.1579, 0.7004, 0.1610, 0.6505, 3e-06],
        [49, 0.1579, 0.6989, 0.1605, 0.6506, 3e-06],
    ]),

    10: np.array([
        [0, 0.4731, 0.1712, 0.3819, 0.1947, 3e-05],
        [1, 0.3480, 0.1961, 0.3201, 0.1947, 3e-05],
        [2, 0.2899, 0.1961, 0.2690, 0.1947, 3e-05],
        [3, 0.2530, 0.1961, 0.2404, 0.1947, 3e-05],
        [4, 0.2274, 0.1962, 0.2153, 0.1948, 3e-05],
        [5, 0.2102, 0.2144, 0.2027, 0.2303, 3e-05],
        [6, 0.1991, 0.2651, 0.1937, 0.2432, 3e-05],
        [7, 0.1917, 0.3081, 0.1902, 0.3454, 3e-05],
        [8, 0.1863, 0.3491, 0.1851, 0.3889, 3e-05],
        [9, 0.1821, 0.3921, 0.1801, 0.3853, 3e-05],
        [10, 0.1789, 0.4266, 0.1801, 0.4718, 3e-05],
        [11, 0.1757, 0.4656, 0.1739, 0.4699, 3e-05],
        [12, 0.1734, 0.4973, 0.1719, 0.5107, 3e-05],
        [13, 0.1715, 0.5203, 0.1719, 0.5067, 3e-05],
        [14, 0.1696, 0.5459, 0.1699, 0.5395, 3e-05],
        [15, 0.1682, 0.5646, 0.1692, 0.5348, 3e-05],
        [16, 0.1670, 0.5833, 0.1671, 0.5821, 3e-05],
        [17, 0.1660, 0.5981, 0.1686, 0.5807, 3e-05],
        [18, 0.1650, 0.6105, 0.1658, 0.6040, 3e-05],
        [19, 0.1643, 0.6221, 0.1663, 0.5854, 3e-05],
        [20, 0.1634, 0.6360, 0.1640, 0.6403, 3e-05],
        [21, 0.1628, 0.6446, 0.1637, 0.6292, 3e-05],
        [22, 0.1622, 0.6540, 0.1654, 0.6128, 3e-05],
        [23, 0.1617, 0.6620, 0.1633, 0.6518, 3e-05],
        [24, 0.1611, 0.6701, 0.1647, 0.6358, 3e-05],
        [25, 0.1605, 0.6817, 0.1652, 0.6045, 3e-05],
        [26, 0.1603, 0.6825, 0.1618, 0.6631, 3e-05],
        [27, 0.1598, 0.6906, 0.1611, 0.6701, 3e-05],
        [28, 0.1595, 0.6971, 0.1610, 0.6792, 3e-05],
        [29, 0.1591, 0.7020, 0.1610, 0.6872, 3e-05],
        [30, 0.1587, 0.7087, 0.1631, 0.6493, 3e-05],
        [31, 0.1556, 0.7521, 0.1586, 0.7012, 3e-06],
        [32, 0.1551, 0.7577, 0.1584, 0.7015, 3e-06],
        [33, 0.1549, 0.7603, 0.1584, 0.6996, 3e-06],
        [34, 0.1547, 0.7604, 0.1583, 0.7030, 3e-06],
        [35, 0.1546, 0.7614, 0.1584, 0.6981, 3e-06],
        [36, 0.1545, 0.7622, 0.1582, 0.7037, 3e-06],
        [37, 0.1544, 0.7646, 0.1584, 0.6969, 3e-06],
        [38, 0.1543, 0.7653, 0.1586, 0.6978, 3e-06],
        [39, 0.1543, 0.7651, 0.1584, 0.7024, 3e-06],
        [40, 0.1542, 0.7673, 0.1583, 0.6997, 3e-06],
        [41, 0.1541, 0.7680, 0.1582, 0.6988, 3e-06],
        [42, 0.1541, 0.7693, 0.1581, 0.6998, 3e-06],
        [43, 0.1540, 0.7715, 0.1581, 0.7008, 3e-06],
        [44, 0.1539, 0.7715, 0.1580, 0.7051, 3e-06],
        [45, 0.1539, 0.7713, 0.1581, 0.7067, 3e-06],
        [46, 0.1538, 0.7742, 0.1581, 0.7007, 3e-06],
        [47, 0.1538, 0.7730, 0.1583, 0.7015, 3e-06],
        [48, 0.1537, 0.7769, 0.1579, 0.7046, 3e-06],
        [49, 0.1536, 0.7768, 0.1582, 0.7013, 3e-06],
    ]),

    12: np.array([
        [0, 0.4410, 0.1857, 0.3560, 0.2067, 3e-05],
        [1, 0.3282, 0.2033, 0.2976, 0.2067, 3e-05],
        [2, 0.2748, 0.2033, 0.2578, 0.2067, 3e-05],
        [3, 0.2409, 0.2033, 0.2217, 0.2067, 3e-05],
        [4, 0.2182, 0.2119, 0.2033, 0.2080, 3e-05],
        [5, 0.2031, 0.2607, 0.1934, 0.2459, 3e-05],
        [6, 0.1936, 0.3062, 0.1884, 0.3457, 3e-05],
        [7, 0.1872, 0.3443, 0.1846, 0.3538, 3e-05],
        [8, 0.1821, 0.3877, 0.1872, 0.4476, 3e-05],
        [9, 0.1780, 0.4298, 0.1785, 0.4880, 3e-05],
        [10, 0.1747, 0.4720, 0.1756, 0.5150, 3e-05],
        [11, 0.1718, 0.5119, 0.1705, 0.5179, 3e-05],
        [12, 0.1696, 0.5404, 0.1739, 0.4752, 3e-05],
        [13, 0.1680, 0.5626, 0.1671, 0.5848, 3e-05],
        [14, 0.1664, 0.5857, 0.1667, 0.5954, 3e-05],
        [15, 0.1652, 0.6052, 0.1669, 0.5597, 3e-05],
        [16, 0.1640, 0.6200, 0.1661, 0.6068, 3e-05],
        [17, 0.1632, 0.6333, 0.1641, 0.6191, 3e-05],
        [18, 0.1624, 0.6471, 0.1629, 0.6361, 3e-05],
        [19, 0.1615, 0.6585, 0.1643, 0.6158, 3e-05],
        [20, 0.1610, 0.6663, 0.1631, 0.6325, 3e-05],
        [21, 0.1603, 0.6777, 0.1635, 0.6246, 3e-05],
        [22, 0.1598, 0.6843, 0.1630, 0.6435, 3e-05],
        [23, 0.1593, 0.6928, 0.1633, 0.6220, 3e-05],
        [24, 0.1587, 0.7021, 0.1608, 0.6643, 3e-05],
        [25, 0.1584, 0.7095, 0.1617, 0.6536, 3e-05],
        [26, 0.1579, 0.7139, 0.1599, 0.6840, 3e-05],
        [27, 0.1576, 0.7196, 0.1602, 0.6757, 3e-05],
        [28, 0.1571, 0.7295, 0.1598, 0.6772, 3e-05],
        [29, 0.1569, 0.7335, 0.1594, 0.6874, 3e-05],
        [30, 0.1566, 0.7382, 0.1590, 0.6917, 3e-05],
        [31, 0.1536, 0.7871, 0.1571, 0.7154, 3e-06],
        [32, 0.1531, 0.7904, 0.1569, 0.7184, 3e-06],
        [33, 0.1529, 0.7928, 0.1570, 0.7168, 3e-06],
        [34, 0.1528, 0.7943, 0.1570, 0.7145, 3e-06],
        [35, 0.1527, 0.7955, 0.1570, 0.7107, 3e-06],
        [36, 0.1526, 0.7959, 0.1570, 0.7151, 3e-06],
        [37, 0.1525, 0.7970, 0.1568, 0.7183, 3e-06],
        [38, 0.1524, 0.7991, 0.1570, 0.7075, 3e-06],
        [39, 0.1524, 0.7999, 0.1569, 0.7164, 3e-06],
        [40, 0.1523, 0.8015, 0.1568, 0.7165, 3e-06],
        [41, 0.1522, 0.8028, 0.1571, 0.7092, 3e-06],
        [42, 0.1521, 0.8030, 0.1569, 0.7131, 3e-06],
        [43, 0.1521, 0.8044, 0.1571, 0.7153, 3e-06],
        [44, 0.1520, 0.8044, 0.1568, 0.7103, 3e-06],
        [45, 0.1519, 0.8067, 0.1571, 0.7127, 3e-06],
        [46, 0.1519, 0.8079, 0.1568, 0.7126, 3e-06],
        [47, 0.1518, 0.8090, 0.1568, 0.7130, 3e-06],
        [48, 0.1518, 0.8098, 0.1568, 0.7140, 3e-06],
        [49, 0.1517, 0.8109, 0.1568, 0.7136, 3e-06],
    ])
}


def main(results, label, color='r'):
    best_train_iou = []
    best_val_iou = []

    best_training_loss = []
    best_val_loss = []

    rf_size_arr = []

    for key, value in sorted(results.items()):
        validation_iou_arr = value[:, 4]
        train_iou_arr = value[:, 2]

        validation_loss_arr = value[:, 3]
        train_loss_arr = value[:, 1]

        rf_size_arr.append(key)
        best_train_iou.append(np.max(train_iou_arr))
        best_val_iou.append(np.max(validation_iou_arr))
        best_training_loss.append(np.min(train_loss_arr))
        best_val_loss.append(np.min(validation_loss_arr))

    # Plot best Iou vs rf size
    plt.figure("IoU", figsize=(6, 6))
    plt.plot(rf_size_arr, best_train_iou, label=label + ' train',
             marker='x', markersize=10, color=color, markeredgewidth=3)
    plt.plot(rf_size_arr, best_val_iou, label=label + ' val',
             marker='x', markersize=10, markeredgewidth=3, linestyle='--', color=color)
    plt.xlabel("Gaussian Mask Width")
    plt.ylabel("IoU")
    plt.ylim([0, 1])
    # plt.title("Iou vs Gaussian Regularization Width (loss weight = 0.0001)")
    plt.legend()
    # plt.grid(True)
    plt.tight_layout()

    # Plot lowest loss vs Tau
    plt.figure("Loss")
    plt.plot(rf_size_arr, best_training_loss, label=label + ' train',
             marker='x', markersize=10, color=color, markeredgewidth=3)
    plt.plot(rf_size_arr, best_val_loss, label=label + ' val',
             marker='x', markersize=10, markeredgewidth=3, linestyle='--', color=color)
    plt.xlabel("Gaussian Mask Width")
    plt.ylabel("Loss")
    plt.title("Loss vs  Gaussian Regularization Width (loss weight = 0.0001)")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()

    # Plot Individual Loss/Iou Curves
    num_keys = len(results.keys())
    single_dim = np.int(np.ceil(np.sqrt(num_keys)))

    fig1 = plt.figure()
    fig2 = plt.figure()

    x_label = 'sigma'

    for k_idx, key in enumerate(sorted(results.keys())):
        ax1 = fig1.add_subplot(single_dim, single_dim, k_idx + 1)
        ax2 = fig2.add_subplot(single_dim, single_dim, k_idx + 1)

        ax1.plot(
            results[key][:, 0],
            results[key][:, 2],
            label='train_iou')

        ax1.plot(
            results[key][:, 0],
            results[key][:, 4],
            label='val_iou')

        ax1.set_title(x_label + " {}".format(key))

        ax2.plot(
            results[key][:, 0],
            results[key][:, 1],
            label='train_loss')

        ax2.plot(
            results[key][:, 0],
            results[key][:, 3],
            label='val_iou_loss')

        # ax2.set_yscale('log')

        ax1.set_title(x_label + " = {}".format(key))
        ax1.grid()
        ax2.set_title(x_label + " ={}".format(key))
        ax2.grid()
        ax1.legend()
        ax2.legend()

    fig1.suptitle("{} - Iou Vs Sigma - Individual Curves".format(label))
    fig2.suptitle("{} - Loss Vs Sigma - Individual Curves".format(label))


if __name__ == "__main__":
    plt.ion()

    main(gaussian_width_results, 'model', color='b')

    # ----------------------------------------------------------------------
    import pdb
    pdb.set_trace()
