# ---------------------------------------------------------------------------------------
# Plot results for the puncture bubbles experiment - bubble transparency
# ---------------------------------------------------------------------------------------
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

import plot_puncture_bubble_size_results as plotting_fcns

mpl.rcParams.update({
    'font.size': 18,
    'lines.linewidth': 3}
)

# fwhm = 20
# n_bubbles = 100


results_transparency_0 = {
    'iou_vs_epoch': np.array([
        [1, 0.2760, 0.0911, 0.1815, 0.2229, 0.001],
        [2, 0.1693, 0.2501, 0.1624, 0.2793, 0.001],
        [3, 0.1590, 0.2933, 0.1586, 0.3251, 0.001],
        [4, 0.1585, 0.3088, 0.1545, 0.3400, 0.001],
        [5, 0.1527, 0.3217, 0.1541, 0.3421, 0.001],
        [6, 0.1527, 0.3277, 0.1529, 0.3601, 0.001],
        [7, 0.1500, 0.3354, 0.1502, 0.3655, 0.001],
        [8, 0.1503, 0.3397, 0.1494, 0.3640, 0.001],
        [9, 0.1472, 0.3459, 0.1457, 0.3631, 0.001],
        [10, 0.1464, 0.3492, 0.1447, 0.3762, 0.001],
        [11, 0.1456, 0.3530, 0.1513, 0.3363, 0.001],
        [12, 0.1448, 0.3564, 0.1441, 0.3835, 0.001],
        [13, 0.1440, 0.3589, 0.1427, 0.3786, 0.001],
        [14, 0.1434, 0.3615, 0.1431, 0.3823, 0.001],
        [15, 0.1428, 0.3632, 0.1415, 0.3845, 0.001],
        [16, 0.1424, 0.3646, 0.1404, 0.3845, 0.001],
        [17, 0.1421, 0.3662, 0.1400, 0.3804, 0.001],
        [18, 0.1418, 0.3672, 0.1402, 0.3874, 0.001],
        [19, 0.1413, 0.3684, 0.1398, 0.3799, 0.001],
        [20, 0.1415, 0.3696, 0.1394, 0.3877, 0.001],
        [21, 0.1408, 0.3708, 0.1385, 0.3811, 0.001],
        [22, 0.1416, 0.3711, 0.1388, 0.3877, 0.001],
        [23, 0.1404, 0.3726, 0.1383, 0.3834, 0.001],
        [24, 0.1401, 0.3734, 0.1379, 0.3835, 0.001],
        [25, 0.1398, 0.3745, 0.1379, 0.3779, 0.001],
        [26, 0.1399, 0.3751, 0.1377, 0.3806, 0.001],
        [27, 0.1394, 0.3760, 0.1376, 0.3849, 0.001],
        [28, 0.1396, 0.3768, 0.1373, 0.3827, 0.001],
        [29, 0.1392, 0.3774, 0.1375, 0.3819, 0.001],
        [30, 0.1389, 0.3781, 0.1373, 0.3826, 0.001],
        [31, 0.1387, 0.3790, 0.1381, 0.3823, 0.001],
        [32, 0.1285, 0.3917, 0.1290, 0.4110, 0.0001],
        [33, 0.1280, 0.3936, 0.1287, 0.4121, 0.0001],
        [34, 0.1278, 0.3946, 0.1283, 0.4125, 0.0001],
        [35, 0.1277, 0.3953, 0.1281, 0.4131, 0.0001],
        [36, 0.1275, 0.3960, 0.1279, 0.4136, 0.0001],
        [37, 0.1274, 0.3965, 0.1277, 0.4142, 0.0001],
        [38, 0.1272, 0.3970, 0.1276, 0.4147, 0.0001],
        [39, 0.1271, 0.3974, 0.1275, 0.4151, 0.0001],
        [40, 0.1270, 0.3978, 0.1274, 0.4153, 0.0001],
        [41, 0.1269, 0.3982, 0.1273, 0.4158, 0.0001],
        [42, 0.1268, 0.3986, 0.1272, 0.4163, 0.0001],
        [43, 0.1267, 0.3990, 0.1271, 0.4166, 0.0001],
        [44, 0.1267, 0.3993, 0.1271, 0.4171, 0.0001],
        [45, 0.1266, 0.3996, 0.1270, 0.4174, 0.0001],
        [46, 0.1265, 0.4000, 0.1269, 0.4176, 0.0001],
        [47, 0.1264, 0.4003, 0.1268, 0.4178, 0.0001],
        [48, 0.1264, 0.4006, 0.1268, 0.4181, 0.0001],
        [49, 0.1263, 0.4008, 0.1267, 0.4181, 0.0001],
        [50, 0.1262, 0.4011, 0.1266, 0.4184, 0.0001],
    ]),
    'gain_vs_c_len': {
        'c_len': np.array([1, 3, 5, 7, 9]),
        'mean_gain': np.array([1.0000, 1.0617, 1.0554, 1.0539, 1.0543]),
        'std_gain': np.array([0.1921, 0.1297, 0.1334, 0.1427, 0.1479])
    },
    'gain_vs_c_len_11x11': {
        'c_len': np.array([1, 3, 5, 7, 9]),
        'mean_gain': np.array([1.0000, 1.0016, 1.0054, 1.0072, 1.0064]),
        'std_gain': np.array([0.0707, 0.0570, 0.0601, 0.0609, 0.0547])
    },
    'gain_vs_spacing': {
        'spacing': np.array([1.00, 1.14, 1.29, 1.43, 1.57, 1.71, 1.86, 2.00]),
        'mean_gain': np.array([1.0534, 1.0708, 1.0946, 1.1015, 1.1067, 1.1431, 1.1575, 1.1894]),
        'std_gain': np.array([0.1750, 0.1537, 0.1824, 0.1691, 0.1321, 0.1497, 0.1424, 0.1459])
    },
    'no_optimal_stimuli_neurons': [
        1, 2, 6, 13, 14, 16, 18, 23, 25, 29,
        30, 32, 34, 35, 42, 43, 52, 57, 58, 62],
    'filtered_out_neurons': [12, 40]
}

if __name__ == "__main__":
    plt.ion()

    _, axis = plt.subplots()

    plotting_fcns.plot_iou_results(results_transparency_0, ax=axis, label='transparency_0', c='b')

    plt.legend()
    plt.title("IoU vs Epoch")
    plt.xlabel("Epoch")
    plt.ylabel("IoU")
    plt.grid()

    # Contour Length
    _, axis = plt.subplots()

    plotting_fcns.plot_gain_vs_contour_len(
        results_transparency_0, ax=axis, label='transparency_0', c='b')

    plt.legend()
    plt.title("Contour Gain vs Length")
    plt.xlabel("Contour Length")
    plt.ylabel("Gain")
    plt.grid()
    axis.set_ylim(bottom=0)

    # Contour Length 11x11
    _, axis = plt.subplots()

    plotting_fcns.plot_gain_vs_contour_len_11x11(
        results_transparency_0, ax=axis, label='transparency_0', c='b')

    plt.legend()
    plt.title("Contour Gain vs Length - Frag size 11x11")
    plt.xlabel("Contour Length")
    plt.ylabel("Gain")
    plt.grid()
    axis.set_ylim(bottom=0)

    # Fragment Spacing
    _, axis = plt.subplots()

    plotting_fcns.plot_gain_vs_fragment_spacing(
        results_transparency_0, ax=axis, label='transparency_0', c='b')

    plt.legend()
    plt.title("Contour Gain vs Fragment Spacing")
    plt.xlabel("Fragment Spacing (RCD)")
    plt.ylabel("Gain")
    plt.grid()
    axis.set_ylim(bottom=0)

    # -----------------------------------------------------------------------------------
    import pdb

    pdb.set_trace()
