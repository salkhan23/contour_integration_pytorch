# ---------------------------------------------------------------------------------------
# Plot the results of the number of iterations vs Iou
# Results need to be manually entered in n_iter_results dictionary
# ---------------------------------------------------------------------------------------

import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

mpl.rcParams.update({
    'font.size': 18,
    'lines.linewidth': 3}
)

n_iter_results = {
    1: np.array([
        [0, 0.9402, 0.0194, 0.9232, 0.0184, 3e-05],
        [1, 0.9067, 0.0236, 0.8904, 0.0578, 3e-05],
        [2, 0.8766, 0.1057, 0.8610, 0.1513, 3e-05],
        [3, 0.8491, 0.1764, 0.8355, 0.1927, 3e-05],
        [4, 0.8258, 0.1986, 0.8142, 0.1972, 3e-05],
        [5, 0.8068, 0.2003, 0.7966, 0.1972, 3e-05],
        [6, 0.7916, 0.2006, 0.7836, 0.1972, 3e-05],
        [7, 0.7797, 0.2006, 0.7739, 0.1972, 3e-05],
        [8, 0.7704, 0.2006, 0.7663, 0.1972, 3e-05],
        [9, 0.7638, 0.2006, 0.7607, 0.1972, 3e-05],
        [10, 0.7591, 0.2006, 0.7571, 0.1972, 3e-05],
        [11, 0.7558, 0.2006, 0.7544, 0.1972, 3e-05],
        [12, 0.7535, 0.2006, 0.7525, 0.1972, 3e-05],
        [13, 0.7520, 0.2006, 0.7514, 0.1972, 3e-05],
        [14, 0.7510, 0.2006, 0.7506, 0.1972, 3e-05],
        [15, 0.7503, 0.2006, 0.7501, 0.1972, 3e-05],
        [16, 0.7499, 0.2006, 0.7497, 0.1972, 3e-05],
        [17, 0.7496, 0.2006, 0.7495, 0.1972, 3e-05],
        [18, 0.7494, 0.2006, 0.7494, 0.1972, 3e-05],
        [19, 0.7493, 0.2006, 0.7493, 0.1972, 3e-05],
        [20, 0.7492, 0.2006, 0.7492, 0.1972, 3e-05],
        [21, 0.7492, 0.2006, 0.7492, 0.1972, 3e-05],
        [22, 0.7492, 0.2006, 0.7492, 0.1972, 3e-05],
        [23, 0.7492, 0.2006, 0.7492, 0.1972, 3e-05],
        [24, 0.7491, 0.2006, 0.7492, 0.1972, 3e-05],
        [25, 0.7491, 0.2006, 0.7492, 0.1972, 3e-05],
        [26, 0.7491, 0.2006, 0.7492, 0.1972, 3e-05],
        [27, 0.7491, 0.2006, 0.7491, 0.1972, 3e-05],
        [28, 0.7491, 0.2006, 0.7491, 0.1972, 3e-05],
        [29, 0.7491, 0.2006, 0.7491, 0.1972, 3e-05],
        [30, 0.7491, 0.2006, 0.7491, 0.1972, 3e-05],
        [31, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [32, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [33, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [34, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [35, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [36, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [37, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [38, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [39, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [40, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [41, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [42, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [43, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [44, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [45, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [46, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [47, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [48, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
        [49, 0.7491, 0.2006, 0.7491, 0.1972, 3e-06],
    ]),
    2: np.array([
        [0, 0.9040, 0.0288, 0.8828, 0.0530, 3e-05],
        [1, 0.8678, 0.1357, 0.8550, 0.1815, 3e-05],
        [2, 0.8436, 0.1865, 0.8330, 0.1954, 3e-05],
        [3, 0.8231, 0.1956, 0.8124, 0.1992, 3e-05],
        [4, 0.8053, 0.1996, 0.7964, 0.1992, 3e-05],
        [5, 0.7910, 0.1996, 0.7839, 0.1992, 3e-05],
        [6, 0.7790, 0.1996, 0.7745, 0.1992, 3e-05],
        [7, 0.7698, 0.1996, 0.7658, 0.1992, 3e-05],
        [8, 0.7632, 0.1996, 0.7601, 0.1992, 3e-05],
        [9, 0.7587, 0.1996, 0.7573, 0.1992, 3e-05],
        [10, 0.7556, 0.1996, 0.7540, 0.1992, 3e-05],
        [11, 0.7534, 0.1996, 0.7526, 0.1992, 3e-05],
        [12, 0.7520, 0.1996, 0.7514, 0.1992, 3e-05],
        [13, 0.7510, 0.1996, 0.7506, 0.1992, 3e-05],
        [14, 0.7503, 0.1996, 0.7500, 0.1992, 3e-05],
        [15, 0.7499, 0.1996, 0.7498, 0.1992, 3e-05],
        [16, 0.7496, 0.1996, 0.7496, 0.1992, 3e-05],
        [17, 0.7495, 0.1996, 0.7494, 0.1992, 3e-05],
        [18, 0.7493, 0.1996, 0.7493, 0.1992, 3e-05],
        [19, 0.7493, 0.2000, 0.7492, 0.1998, 3e-05],
        [20, 0.7492, 0.2077, 0.7492, 0.2093, 3e-05],
        [21, 0.7491, 0.2253, 0.7491, 0.2139, 3e-05],
        [22, 0.7490, 0.2481, 0.7491, 0.2372, 3e-05],
        [23, 0.7488, 0.2672, 0.7490, 0.2293, 3e-05],
        [24, 0.7487, 0.2847, 0.7490, 0.2537, 3e-05],
        [25, 0.7486, 0.3000, 0.7494, 0.3015, 3e-05],
        [26, 0.7485, 0.3146, 0.7490, 0.2577, 3e-05],
        [27, 0.7484, 0.3289, 0.7490, 0.2697, 3e-05],
        [28, 0.7483, 0.3432, 0.7492, 0.2945, 3e-05],
        [29, 0.7483, 0.3561, 0.7491, 0.2954, 3e-05],
        [30, 0.7482, 0.3679, 0.7491, 0.2962, 3e-05],
        [31, 0.7480, 0.3906, 0.7490, 0.2991, 3e-06],
        [32, 0.7480, 0.3957, 0.7490, 0.3072, 3e-06],
        [33, 0.7480, 0.3985, 0.7490, 0.2995, 3e-06],
        [34, 0.7479, 0.4022, 0.7490, 0.2967, 3e-06],
        [35, 0.7479, 0.4047, 0.7490, 0.3057, 3e-06],
        [36, 0.7479, 0.4078, 0.7490, 0.3058, 3e-06],
        [37, 0.7479, 0.4107, 0.7490, 0.3003, 3e-06],
        [38, 0.7479, 0.4136, 0.7490, 0.3029, 3e-06],
        [39, 0.7479, 0.4160, 0.7490, 0.3063, 3e-06],
        [40, 0.7478, 0.4191, 0.7490, 0.3024, 3e-06],
        [41, 0.7478, 0.4214, 0.7490, 0.3075, 3e-06],
        [42, 0.7478, 0.4240, 0.7490, 0.3073, 3e-06],
        [43, 0.7478, 0.4260, 0.7491, 0.3113, 3e-06],
        [44, 0.7478, 0.4288, 0.7490, 0.3108, 3e-06],
        [45, 0.7478, 0.4311, 0.7490, 0.3084, 3e-06],
        [46, 0.7477, 0.4335, 0.7490, 0.3070, 3e-06],
        [47, 0.7477, 0.4353, 0.7491, 0.3136, 3e-06],
        [48, 0.7477, 0.4377, 0.7490, 0.3125, 3e-06],
        [49, 0.7477, 0.4400, 0.7490, 0.3118, 3e-06],
    ]),
    3: np.array([
        [0, 0.9402, 0.1369, 0.9212, 0.2027, 3e-05],
        [1, 0.9128, 0.1983, 0.9029, 0.2022, 3e-05],
        [2, 0.8883, 0.1988, 0.8756, 0.2027, 3e-05],
        [3, 0.8641, 0.1994, 0.8513, 0.2027, 3e-05],
        [4, 0.8416, 0.1994, 0.8322, 0.2027, 3e-05],
        [5, 0.8216, 0.1994, 0.8121, 0.2027, 3e-05],
        [6, 0.8046, 0.1994, 0.7975, 0.2027, 3e-05],
        [7, 0.7908, 0.1994, 0.7839, 0.2027, 3e-05],
        [8, 0.7799, 0.1994, 0.7754, 0.2027, 3e-05],
        [9, 0.7715, 0.1994, 0.7677, 0.2027, 3e-05],
        [10, 0.7652, 0.1994, 0.7624, 0.2027, 3e-05],
        [11, 0.7605, 0.1994, 0.7586, 0.2027, 3e-05],
        [12, 0.7571, 0.1994, 0.7559, 0.2027, 3e-05],
        [13, 0.7547, 0.1994, 0.7535, 0.2027, 3e-05],
        [14, 0.7529, 0.1994, 0.7522, 0.2027, 3e-05],
        [15, 0.7517, 0.1994, 0.7511, 0.2027, 3e-05],
        [16, 0.7509, 0.2070, 0.7505, 0.2175, 3e-05],
        [17, 0.7502, 0.2378, 0.7499, 0.2430, 3e-05],
        [18, 0.7496, 0.2777, 0.7494, 0.2688, 3e-05],
        [19, 0.7491, 0.3181, 0.7493, 0.3342, 3e-05],
        [20, 0.7488, 0.3538, 0.7489, 0.3487, 3e-05],
        [21, 0.7484, 0.3925, 0.7487, 0.3792, 3e-05],
        [22, 0.7481, 0.4256, 0.7485, 0.3797, 3e-05],
        [23, 0.7479, 0.4594, 0.7484, 0.3757, 3e-05],
        [24, 0.7476, 0.4860, 0.7483, 0.4110, 3e-05],
        [25, 0.7474, 0.5130, 0.7483, 0.4254, 3e-05],
        [26, 0.7472, 0.5400, 0.7482, 0.4423, 3e-05],
        [27, 0.7471, 0.5599, 0.7482, 0.4443, 3e-05],
        [28, 0.7469, 0.5802, 0.7481, 0.4398, 3e-05],
        [29, 0.7468, 0.5969, 0.7482, 0.4642, 3e-05],
        [30, 0.7467, 0.6147, 0.7480, 0.4335, 3e-05],
        [31, 0.7465, 0.6438, 0.7480, 0.4718, 3e-06],
        [32, 0.7464, 0.6492, 0.7480, 0.4743, 3e-06],
        [33, 0.7464, 0.6545, 0.7480, 0.4736, 3e-06],
        [34, 0.7464, 0.6589, 0.7480, 0.4775, 3e-06],
        [35, 0.7464, 0.6626, 0.7481, 0.4825, 3e-06],
        [36, 0.7463, 0.6662, 0.7480, 0.4786, 3e-06],
        [37, 0.7463, 0.6699, 0.7481, 0.4867, 3e-06],
        [38, 0.7463, 0.6729, 0.7481, 0.4857, 3e-06],
        [39, 0.7463, 0.6759, 0.7480, 0.4842, 3e-06],
        [40, 0.7463, 0.6790, 0.7481, 0.4889, 3e-06],
        [41, 0.7462, 0.6815, 0.7481, 0.4898, 3e-06],
        [42, 0.7462, 0.6843, 0.7480, 0.4864, 3e-06],
        [43, 0.7462, 0.6868, 0.7481, 0.4870, 3e-06],
        [44, 0.7462, 0.6890, 0.7480, 0.4881, 3e-06],
        [45, 0.7462, 0.6911, 0.7480, 0.4883, 3e-06],
        [46, 0.7462, 0.6932, 0.7480, 0.4901, 3e-06],
        [47, 0.7461, 0.6954, 0.7481, 0.4899, 3e-06],
        [48, 0.7461, 0.6975, 0.7480, 0.4904, 3e-06],
        [49, 0.7461, 0.6993, 0.7480, 0.4903, 3e-06],
    ]),
    5: np.array([
        [0, 0.8301, 0.1942, 0.8061, 0.1907, 3e-05],
        [1, 0.7942, 0.2019, 0.7841, 0.1907, 3e-05],
        [2, 0.7762, 0.2019, 0.7702, 0.1907, 3e-05],
        [3, 0.7653, 0.2019, 0.7607, 0.1907, 3e-05],
        [4, 0.7587, 0.2019, 0.7566, 0.1907, 3e-05],
        [5, 0.7548, 0.2019, 0.7534, 0.1907, 3e-05],
        [6, 0.7525, 0.2019, 0.7516, 0.1907, 3e-05],
        [7, 0.7511, 0.2019, 0.7506, 0.1907, 3e-05],
        [8, 0.7503, 0.2019, 0.7500, 0.1907, 3e-05],
        [9, 0.7498, 0.2019, 0.7496, 0.1907, 3e-05],
        [10, 0.7495, 0.2019, 0.7494, 0.1907, 3e-05],
        [11, 0.7494, 0.2019, 0.7493, 0.1907, 3e-05],
        [12, 0.7493, 0.2019, 0.7492, 0.1907, 3e-05],
        [13, 0.7492, 0.2019, 0.7492, 0.1907, 3e-05],
        [14, 0.7492, 0.2019, 0.7492, 0.1907, 3e-05],
        [15, 0.7492, 0.2019, 0.7492, 0.1907, 3e-05],
        [16, 0.7491, 0.2019, 0.7491, 0.1907, 3e-05],
        [17, 0.7491, 0.2019, 0.7491, 0.1907, 3e-05],
        [18, 0.7491, 0.2019, 0.7491, 0.1907, 3e-05],
        [19, 0.7491, 0.2019, 0.7491, 0.1907, 3e-05],
        [20, 0.7491, 0.2019, 0.7491, 0.1907, 3e-05],
        [21, 0.7491, 0.2019, 0.7491, 0.1907, 3e-05],
        [22, 0.7491, 0.2019, 0.7491, 0.1907, 3e-05],
        [23, 0.7491, 0.2019, 0.7491, 0.1907, 3e-05],
        [24, 0.7491, 0.2019, 0.7491, 0.1907, 3e-05],
        [25, 0.7491, 0.2019, 0.7491, 0.1907, 3e-05],
        [26, 0.7491, 0.2019, 0.7491, 0.1907, 3e-05],
        [27, 0.7491, 0.2019, 0.7491, 0.1907, 3e-05],
        [28, 0.7491, 0.2019, 0.7491, 0.1907, 3e-05],
        [29, 0.7491, 0.2019, 0.7491, 0.1907, 3e-05],
        [30, 0.7491, 0.2019, 0.7491, 0.1907, 3e-05],
        [31, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [32, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [33, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [34, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [35, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [36, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [37, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [38, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [39, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [40, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [41, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [42, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [43, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [44, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [45, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [46, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [47, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [48, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        [49, 0.7491, 0.2019, 0.7491, 0.1907, 3e-06],
        ]),
    8: np.array([
        [0, 0.8182, 0.1930, 0.7994, 0.1947, 3e-05],
        [1, 0.7897, 0.1961, 0.7819, 0.1947, 3e-05],
        [2, 0.7742, 0.1961, 0.7682, 0.1947, 3e-05],
        [3, 0.7645, 0.1961, 0.7609, 0.1947, 3e-05],
        [4, 0.7585, 0.1961, 0.7564, 0.1947, 3e-05],
        [5, 0.7548, 0.1961, 0.7536, 0.1947, 3e-05],
        [6, 0.7525, 0.1961, 0.7517, 0.1947, 3e-05],
        [7, 0.7512, 0.1961, 0.7507, 0.1947, 3e-05],
        [8, 0.7503, 0.1961, 0.7501, 0.1947, 3e-05],
        [9, 0.7499, 0.1961, 0.7497, 0.1947, 3e-05],
        [10, 0.7496, 0.1961, 0.7495, 0.1947, 3e-05],
        [11, 0.7494, 0.1961, 0.7493, 0.1947, 3e-05],
        [12, 0.7493, 0.1961, 0.7492, 0.1947, 3e-05],
        [13, 0.7492, 0.1961, 0.7492, 0.1947, 3e-05],
        [14, 0.7492, 0.1961, 0.7492, 0.1947, 3e-05],
        [15, 0.7492, 0.1961, 0.7492, 0.1947, 3e-05],
        [16, 0.7491, 0.1961, 0.7492, 0.1947, 3e-05],
        [17, 0.7491, 0.1961, 0.7491, 0.1947, 3e-05],
        [18, 0.7491, 0.1961, 0.7491, 0.1947, 3e-05],
        [19, 0.7491, 0.1961, 0.7491, 0.1947, 3e-05],
        [20, 0.7491, 0.1961, 0.7491, 0.1947, 3e-05],
        [21, 0.7491, 0.1961, 0.7491, 0.1947, 3e-05],
        [22, 0.7491, 0.1961, 0.7491, 0.1947, 3e-05],
        [23, 0.7491, 0.1961, 0.7491, 0.1947, 3e-05],
        [24, 0.7491, 0.1961, 0.7491, 0.1947, 3e-05],
        [25, 0.7491, 0.1961, 0.7491, 0.1947, 3e-05],
        [26, 0.7491, 0.1961, 0.7491, 0.1947, 3e-05],
        [27, 0.7491, 0.1961, 0.7491, 0.1947, 3e-05],
        [28, 0.7491, 0.1961, 0.7491, 0.1947, 3e-05],
        [29, 0.7491, 0.1961, 0.7491, 0.1947, 3e-05],
        [30, 0.7491, 0.1961, 0.7491, 0.1947, 3e-05],
        [31, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [32, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [33, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [34, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [35, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [36, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [37, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [38, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [39, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [40, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [41, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [42, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [43, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [44, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [45, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [46, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [47, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [48, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
        [49, 0.7491, 0.1961, 0.7491, 0.1947, 3e-06],
    ]),
    10: np.array([
        [0, 0.8623, 0.1979, 0.8450, 0.2067, 3e-05],
        [1, 0.8316, 0.2033, 0.8193, 0.2067, 3e-05],
        [2, 0.8090, 0.2033, 0.7993, 0.2067, 3e-05],
        [3, 0.7914, 0.2033, 0.7846, 0.2067, 3e-05],
        [4, 0.7783, 0.2033, 0.7736, 0.2067, 3e-05],
        [5, 0.7690, 0.2033, 0.7650, 0.2067, 3e-05],
        [6, 0.7624, 0.2033, 0.7599, 0.2067, 3e-05],
        [7, 0.7579, 0.2033, 0.7562, 0.2067, 3e-05],
        [8, 0.7549, 0.2033, 0.7538, 0.2083, 3e-05],
        [9, 0.7528, 0.2417, 0.7523, 0.3004, 3e-05],
        [10, 0.7511, 0.3293, 0.7501, 0.3845, 3e-05],
        [11, 0.7499, 0.3868, 0.7494, 0.4333, 3e-05],
        [12, 0.7490, 0.4325, 0.7486, 0.4654, 3e-05],
        [13, 0.7484, 0.4704, 0.7483, 0.4918, 3e-05],
        [14, 0.7480, 0.4956, 0.7479, 0.4890, 3e-05],
        [15, 0.7477, 0.5191, 0.7477, 0.5148, 3e-05],
        [16, 0.7475, 0.5442, 0.7476, 0.5051, 3e-05],
        [17, 0.7473, 0.5612, 0.7474, 0.5548, 3e-05],
        [18, 0.7471, 0.5790, 0.7473, 0.5536, 3e-05],
        [19, 0.7470, 0.5893, 0.7472, 0.5711, 3e-05],
        [20, 0.7469, 0.6067, 0.7472, 0.5791, 3e-05],
        [21, 0.7468, 0.6227, 0.7471, 0.5822, 3e-05],
        [22, 0.7467, 0.6320, 0.7470, 0.5935, 3e-05],
        [23, 0.7466, 0.6439, 0.7471, 0.5754, 3e-05],
        [24, 0.7466, 0.6553, 0.7470, 0.6127, 3e-05],
        [25, 0.7465, 0.6642, 0.7470, 0.6108, 3e-05],
        [26, 0.7464, 0.6734, 0.7469, 0.6239, 3e-05],
        [27, 0.7464, 0.6849, 0.7469, 0.6278, 3e-05],
        [28, 0.7463, 0.6905, 0.7469, 0.6175, 3e-05],
        [29, 0.7462, 0.7006, 0.7469, 0.6201, 3e-05],
        [30, 0.7462, 0.7076, 0.7468, 0.6239, 3e-05],
        [31, 0.7460, 0.7403, 0.7467, 0.6540, 3e-06],
        [32, 0.7459, 0.7514, 0.7467, 0.6570, 3e-06],
        [33, 0.7459, 0.7585, 0.7467, 0.6611, 3e-06],
        [34, 0.7458, 0.7632, 0.7467, 0.6601, 3e-06],
        [35, 0.7458, 0.7678, 0.7467, 0.6615, 3e-06],
        [36, 0.7458, 0.7712, 0.7467, 0.6627, 3e-06],
        [37, 0.7458, 0.7750, 0.7467, 0.6636, 3e-06],
        [38, 0.7457, 0.7774, 0.7467, 0.6615, 3e-06],
        [39, 0.7457, 0.7815, 0.7467, 0.6653, 3e-06],
        [40, 0.7457, 0.7841, 0.7467, 0.6621, 3e-06],
        [41, 0.7457, 0.7866, 0.7467, 0.6637, 3e-06],
        [42, 0.7457, 0.7895, 0.7467, 0.6625, 3e-06],
        [43, 0.7456, 0.7920, 0.7467, 0.6656, 3e-06],
        [44, 0.7456, 0.7941, 0.7467, 0.6660, 3e-06],
        [45, 0.7456, 0.7957, 0.7467, 0.6653, 3e-06],
        [46, 0.7456, 0.7973, 0.7467, 0.6653, 3e-06],
        [47, 0.7456, 0.7989, 0.7467, 0.6661, 3e-06],
        [48, 0.7456, 0.8002, 0.7467, 0.6671, 3e-06],
        [49, 0.7456, 0.8019, 0.7467, 0.6693, 3e-06],
    ]),
    15: np.array([
        [0, 0.8849, 0.1929, 0.8701, 0.1987, 3e-05],
        [1, 0.8551, 0.1978, 0.8415, 0.1987, 3e-05],
        [2, 0.8296, 0.1978, 0.8214, 0.1987, 3e-05],
        [3, 0.8081, 0.1978, 0.7981, 0.1987, 3e-05],
        [4, 0.7911, 0.1978, 0.7842, 0.1987, 3e-05],
        [5, 0.7784, 0.1978, 0.7741, 0.1987, 3e-05],
        [6, 0.7692, 0.1978, 0.7653, 0.1987, 3e-05],
        [7, 0.7627, 0.1978, 0.7599, 0.1987, 3e-05],
        [8, 0.7581, 0.1978, 0.7560, 0.1987, 3e-05],
        [9, 0.7551, 0.1978, 0.7541, 0.1987, 3e-05],
        [10, 0.7530, 0.1999, 0.7524, 0.1987, 3e-05],
        [11, 0.7516, 0.2203, 0.7507, 0.2262, 3e-05],
        [12, 0.7504, 0.2779, 0.7504, 0.2879, 3e-05],
        [13, 0.7496, 0.3352, 0.7493, 0.3884, 3e-05],
        [14, 0.7488, 0.4081, 0.7485, 0.4184, 3e-05],
        [15, 0.7482, 0.4651, 0.7481, 0.5021, 3e-05],
        [16, 0.7478, 0.5036, 0.7477, 0.5208, 3e-05],
        [17, 0.7475, 0.5386, 0.7475, 0.5194, 3e-05],
        [18, 0.7472, 0.5620, 0.7473, 0.5613, 3e-05],
        [19, 0.7470, 0.5851, 0.7472, 0.5814, 3e-05],
        [20, 0.7469, 0.6068, 0.7471, 0.5744, 3e-05],
        [21, 0.7467, 0.6234, 0.7469, 0.6124, 3e-05],
        [22, 0.7466, 0.6387, 0.7469, 0.6048, 3e-05],
        [23, 0.7465, 0.6512, 0.7470, 0.6121, 3e-05],
        [24, 0.7464, 0.6680, 0.7468, 0.6335, 3e-05],
        [25, 0.7463, 0.6833, 0.7467, 0.6392, 3e-05],
        [26, 0.7462, 0.6953, 0.7467, 0.6473, 3e-05],
        [27, 0.7461, 0.7066, 0.7467, 0.6536, 3e-05],
        [28, 0.7461, 0.7169, 0.7466, 0.6516, 3e-05],
        [29, 0.7460, 0.7280, 0.7466, 0.6625, 3e-05],
        [30, 0.7460, 0.7363, 0.7467, 0.6705, 3e-05],
        [31, 0.7457, 0.7680, 0.7465, 0.6851, 3e-06],
        [32, 0.7457, 0.7795, 0.7465, 0.6861, 3e-06],
        [33, 0.7456, 0.7857, 0.7465, 0.6905, 3e-06],
        [34, 0.7456, 0.7899, 0.7465, 0.6915, 3e-06],
        [35, 0.7456, 0.7942, 0.7465, 0.6925, 3e-06],
        [36, 0.7455, 0.7985, 0.7465, 0.6872, 3e-06],
        [37, 0.7455, 0.8016, 0.7465, 0.6950, 3e-06],
        [38, 0.7455, 0.8044, 0.7465, 0.6935, 3e-06],
        [39, 0.7455, 0.8071, 0.7465, 0.6931, 3e-06],
        [40, 0.7455, 0.8095, 0.7465, 0.6953, 3e-06],
        [41, 0.7454, 0.8121, 0.7465, 0.6941, 3e-06],
        [42, 0.7454, 0.8137, 0.7465, 0.6947, 3e-06],
        [43, 0.7454, 0.8156, 0.7465, 0.6959, 3e-06],
        [44, 0.7454, 0.8178, 0.7465, 0.6968, 3e-06],
        [45, 0.7454, 0.8196, 0.7465, 0.6971, 3e-06],
        [46, 0.7454, 0.8208, 0.7465, 0.6978, 3e-06],
        [47, 0.7454, 0.8222, 0.7465, 0.6992, 3e-06],
        [48, 0.7454, 0.8242, 0.7465, 0.6992, 3e-06],
        [49, 0.7454, 0.8251, 0.7465, 0.6974, 3e-06],
    ]),
}

if __name__ == "__main__":

    plt.ion()

    best_train_iou = []
    best_val_iou = []

    best_training_loss = []
    best_val_loss = []

    n_iter_arr = []

    for key, value in sorted(n_iter_results.items()):

        validation_iou_arr = value[:, 4]
        train_iou_arr = value[:, 2]

        validation_loss_arr = value[:, 3]
        train_loss_arr = value[:, 1]

        n_iter_arr.append(key)
        best_train_iou.append(np.max(train_iou_arr))
        best_val_iou.append(np.max(validation_iou_arr))
        best_training_loss.append(np.min(train_loss_arr))
        best_val_loss.append(np.min(validation_loss_arr))

    # Plot best Iou vs num iterations
    plt.figure()
    plt.plot(n_iter_arr, best_train_iou, label='train_iou', marker='x', markersize=10)
    plt.plot(n_iter_arr, best_val_iou, label='val_iou', marker='x', markersize=10)
    plt.xlabel("Number of iterations")
    plt.ylabel("IoU")
    plt.title("IoU vs Number of iterations")
    plt.legend()

    # Plot lowest loss vs num iterations
    plt.figure()
    plt.plot(n_iter_arr, best_training_loss, label='train_loss', marker='x', markersize=10)
    plt.plot(n_iter_arr, best_val_loss, label='val_loss', marker='x', markersize=10)
    plt.xlabel("number of iterations =")
    plt.ylabel("Loss")
    plt.title("Loss vs Number of iterations")
    plt.legend()

    # Plot Individual Loss/Iou Curves
    num_keys = len(n_iter_results.keys())
    single_dim = np.ceil(np.sqrt(num_keys))

    fig1 = plt.figure()
    fig2 = plt.figure()

    for k_idx, key in enumerate(sorted(n_iter_results.keys())):
        ax1 = fig1.add_subplot(single_dim, single_dim, k_idx + 1)
        ax2 = fig2.add_subplot(single_dim, single_dim, k_idx + 1)

        ax1.plot(
            n_iter_results[key][:, 0],
            n_iter_results[key][:, 2],
            label='train_iou')

        ax1.plot(
            n_iter_results[key][:, 0],
            n_iter_results[key][:, 4],
            label='val_iou')

        ax1.set_title("rf_size={}".format(key))

        ax2.plot(
            n_iter_results[key][:, 0],
            n_iter_results[key][:, 1],
            label='train_loss')

        ax2.plot(
            n_iter_results[key][:, 0],
            n_iter_results[key][:, 3],
            label='val_iou_loss')

        # ax2.set_yscale('log')

        ax1.set_title("rf_size={}".format(key))
        ax2.set_title("rf_size={}".format(key))

    ax1.legend()
    ax2.legend()
    fig1.suptitle("Iou Vs number of iterations - Individual Curves")
    fig2.suptitle("Loss Vs number of iterations - Individual Curves")

    # ----------------------------------------------------------------------
    import pdb
    pdb.set_trace()
