# ---------------------------------------------------------------------------------------
# Plot the results of the lateral Connection Size exploration.
# Results need to be manually entered in lateral_connection_results dictionary
# ---------------------------------------------------------------------------------------

import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

mpl.rcParams.update({
    'font.size': 18,
    'lines.linewidth': 3}
)

lateral_connections_results = {
    3: np.array([
        [0, 0.9424, 0.0537, 0.9264, 0.1364, 3e-05],
        [1, 0.9146, 0.1903, 0.9038, 0.1972, 3e-05],
        [2, 0.8959, 0.2006, 0.8857, 0.1972, 3e-05],
        [3, 0.8787, 0.2006, 0.8701, 0.1972, 3e-05],
        [4, 0.8618, 0.2006, 0.8510, 0.1972, 3e-05],
        [5, 0.8449, 0.2006, 0.8383, 0.1972, 3e-05],
        [6, 0.8296, 0.2006, 0.8217, 0.1972, 3e-05],
        [7, 0.8155, 0.2006, 0.8082, 0.1972, 3e-05],
        [8, 0.8031, 0.2006, 0.7977, 0.1972, 3e-05],
        [9, 0.7923, 0.2006, 0.7842, 0.1972, 3e-05],
        [10, 0.7831, 0.2006, 0.7759, 0.1972, 3e-05],
        [11, 0.7741, 0.2006, 0.7722, 0.1972, 3e-05],
        [12, 0.7675, 0.2006, 0.7644, 0.1972, 3e-05],
        [13, 0.7627, 0.2006, 0.7598, 0.1972, 3e-05],
        [14, 0.7591, 0.2006, 0.7569, 0.1972, 3e-05],
        [15, 0.7564, 0.2006, 0.7562, 0.1972, 3e-05],
        [16, 0.7544, 0.2006, 0.7529, 0.1972, 3e-05],
        [17, 0.7529, 0.2006, 0.7520, 0.1972, 3e-05],
        [18, 0.7518, 0.2006, 0.7511, 0.1972, 3e-05],
        [19, 0.7510, 0.2006, 0.7509, 0.1972, 3e-05],
        [20, 0.7505, 0.2006, 0.7505, 0.1972, 3e-05],
        [21, 0.7501, 0.2006, 0.7499, 0.1972, 3e-05],
        [22, 0.7498, 0.2006, 0.7497, 0.1972, 3e-05],
        [23, 0.7496, 0.2006, 0.7495, 0.1972, 3e-05],
        [24, 0.7494, 0.2006, 0.7494, 0.1972, 3e-05],
        [25, 0.7493, 0.2006, 0.7493, 0.1972, 3e-05],
        [26, 0.7493, 0.2006, 0.7493, 0.1972, 3e-05],
        [27, 0.7492, 0.2006, 0.7492, 0.1972, 3e-05],
        [28, 0.7492, 0.2006, 0.7492, 0.1972, 3e-05],
        [29, 0.7492, 0.2006, 0.7492, 0.1972, 3e-05],
        [30, 0.7492, 0.2006, 0.7492, 0.1972, 3e-05],
        [31, 0.7492, 0.2006, 0.7492, 0.1972, 3e-06],
        [32, 0.7492, 0.2006, 0.7492, 0.1972, 3e-06],
        [33, 0.7492, 0.2006, 0.7492, 0.1972, 3e-06],
        [34, 0.7492, 0.2006, 0.7492, 0.1972, 3e-06],
        [35, 0.7492, 0.2006, 0.7492, 0.1972, 3e-06],
        [36, 0.7492, 0.2006, 0.7492, 0.1972, 3e-06],
        [37, 0.7492, 0.2006, 0.7492, 0.1972, 3e-06],
        [38, 0.7491, 0.2006, 0.7492, 0.1972, 3e-06],
        [39, 0.7491, 0.2006, 0.7492, 0.1972, 3e-06],
        [40, 0.7491, 0.2006, 0.7492, 0.1972, 3e-06],
        [41, 0.7491, 0.2006, 0.7492, 0.1972, 3e-06],
        [42, 0.7491, 0.2006, 0.7492, 0.1972, 3e-06],
        [43, 0.7491, 0.2006, 0.7492, 0.1972, 3e-06],
        [44, 0.7491, 0.2006, 0.7492, 0.1972, 3e-06],
        [45, 0.7491, 0.2006, 0.7492, 0.1972, 3e-06],
        [46, 0.7491, 0.2006, 0.7492, 0.1972, 3e-06],
        [47, 0.7491, 0.2006, 0.7492, 0.1972, 3e-06],
        [48, 0.7491, 0.2006, 0.7492, 0.1972, 3e-06],
        [49, 0.7491, 0.2006, 0.7492, 0.1972, 3e-06],
    ]),
    5: np.array([
        [0, 0.9370, 0.0403, 0.9207, 0.0951, 3e-05],
        [1, 0.9118, 0.1261, 0.8932, 0.1204, 3e-05],
        [2, 0.8824, 0.0443, 0.8685, 0.0686, 3e-05],
        [3, 0.8596, 0.1170, 0.8500, 0.1492, 3e-05],
        [4, 0.8394, 0.1772, 0.8286, 0.1927, 3e-05],
        [5, 0.8212, 0.1973, 0.8155, 0.1987, 3e-05],
        [6, 0.8055, 0.1994, 0.7960, 0.1992, 3e-05],
        [7, 0.7924, 0.1996, 0.7859, 0.1992, 3e-05],
        [8, 0.7814, 0.1996, 0.7807, 0.1992, 3e-05],
        [9, 0.7727, 0.1996, 0.7682, 0.1992, 3e-05],
        [10, 0.7662, 0.1996, 0.7639, 0.1992, 3e-05],
        [11, 0.7614, 0.1996, 0.7603, 0.1992, 3e-05],
        [12, 0.7579, 0.1996, 0.7567, 0.1992, 3e-05],
        [13, 0.7553, 0.1996, 0.7542, 0.1992, 3e-05],
        [14, 0.7534, 0.1996, 0.7531, 0.1992, 3e-05],
        [15, 0.7521, 0.1996, 0.7515, 0.1992, 3e-05],
        [16, 0.7512, 0.1996, 0.7507, 0.1992, 3e-05],
        [17, 0.7505, 0.1996, 0.7504, 0.1992, 3e-05],
        [18, 0.7501, 0.1996, 0.7500, 0.1992, 3e-05],
        [19, 0.7498, 0.1996, 0.7497, 0.1992, 3e-05],
        [20, 0.7496, 0.1996, 0.7495, 0.1992, 3e-05],
        [21, 0.7494, 0.1996, 0.7494, 0.1992, 3e-05],
        [22, 0.7493, 0.1996, 0.7493, 0.1992, 3e-05],
        [23, 0.7493, 0.1996, 0.7493, 0.1992, 3e-05],
        [24, 0.7492, 0.1996, 0.7492, 0.1992, 3e-05],
        [25, 0.7492, 0.1996, 0.7492, 0.1992, 3e-05],
        [26, 0.7492, 0.1996, 0.7492, 0.1992, 3e-05],
        [27, 0.7492, 0.1996, 0.7492, 0.1992, 3e-05],
        [28, 0.7492, 0.1996, 0.7492, 0.1992, 3e-05],
        [29, 0.7491, 0.1996, 0.7491, 0.1992, 3e-05],
        [30, 0.7491, 0.1996, 0.7491, 0.1992, 3e-05],
        [31, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [32, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [33, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [34, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [35, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [36, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [37, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [38, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [39, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [40, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [41, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [42, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [43, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [44, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [45, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [46, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [47, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [48, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [49, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
    ]),
    7: np.array([
        [0, 0.9187, 0.0524, 0.8972, 0.0624, 3e-05],
        [1, 0.8742, 0.1053, 0.8584, 0.1855, 3e-05],
        [2, 0.8462, 0.1949, 0.8337, 0.2027, 3e-05],
        [3, 0.8240, 0.1994, 0.8133, 0.2027, 3e-05],
        [4, 0.8050, 0.1994, 0.7979, 0.2027, 3e-05],
        [5, 0.7896, 0.1994, 0.7845, 0.2027, 3e-05],
        [6, 0.7773, 0.1994, 0.7727, 0.2027, 3e-05],
        [7, 0.7682, 0.1994, 0.7646, 0.2027, 3e-05],
        [8, 0.7618, 0.1994, 0.7584, 0.2027, 3e-05],
        [9, 0.7572, 0.1994, 0.7552, 0.2027, 3e-05],
        [10, 0.7544, 0.1994, 0.7537, 0.2027, 3e-05],
        [11, 0.7525, 0.1994, 0.7518, 0.2027, 3e-05],
        [12, 0.7513, 0.1994, 0.7508, 0.2027, 3e-05],
        [13, 0.7505, 0.1994, 0.7502, 0.2027, 3e-05],
        [14, 0.7500, 0.1994, 0.7498, 0.2027, 3e-05],
        [15, 0.7497, 0.1994, 0.7495, 0.2027, 3e-05],
        [16, 0.7495, 0.1994, 0.7494, 0.2027, 3e-05],
        [17, 0.7493, 0.1994, 0.7493, 0.2027, 3e-05],
        [18, 0.7493, 0.1994, 0.7492, 0.2027, 3e-05],
        [19, 0.7492, 0.1994, 0.7492, 0.2027, 3e-05],
        [20, 0.7492, 0.1994, 0.7492, 0.2027, 3e-05],
        [21, 0.7492, 0.1994, 0.7492, 0.2027, 3e-05],
        [22, 0.7492, 0.1994, 0.7491, 0.2027, 3e-05],
        [23, 0.7491, 0.1994, 0.7491, 0.2027, 3e-05],
        [24, 0.7491, 0.1994, 0.7491, 0.2027, 3e-05],
        [25, 0.7491, 0.1994, 0.7491, 0.2027, 3e-05],
        [26, 0.7491, 0.1994, 0.7491, 0.2027, 3e-05],
        [27, 0.7491, 0.1994, 0.7491, 0.2027, 3e-05],
        [28, 0.7491, 0.1994, 0.7491, 0.2027, 3e-05],
        [29, 0.7491, 0.1994, 0.7491, 0.2027, 3e-05],
        [30, 0.7491, 0.1994, 0.7491, 0.2027, 3e-05],
        [31, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [32, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [33, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [34, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [35, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [36, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [37, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [38, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [39, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [40, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [41, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [42, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [43, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [44, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [45, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [46, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [47, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [48, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
        [49, 0.7491, 0.1994, 0.7491, 0.2027, 3e-06],
    ]),
    11: np.array([
        [0, 0.8654, 0.1393, 0.8314, 0.1839, 3e-05],
        [1, 0.8179, 0.2008, 0.8030, 0.1902, 3e-05],
        [2, 0.7918, 0.2019, 0.7872, 0.1907, 3e-05],
        [3, 0.7752, 0.2019, 0.7693, 0.1907, 3e-05],
        [4, 0.7651, 0.2019, 0.7608, 0.1907, 3e-05],
        [5, 0.7589, 0.2019, 0.7568, 0.1907, 3e-05],
        [6, 0.7551, 0.2019, 0.7540, 0.1907, 3e-05],
        [7, 0.7528, 0.2019, 0.7519, 0.1907, 3e-05],
        [8, 0.7513, 0.2019, 0.7509, 0.1907, 3e-05],
        [9, 0.7505, 0.2019, 0.7501, 0.1907, 3e-05],
        [10, 0.7499, 0.2019, 0.7498, 0.1907, 3e-05],
        [11, 0.7496, 0.2019, 0.7495, 0.1907, 3e-05],
        [12, 0.7494, 0.2019, 0.7494, 0.1907, 3e-05],
        [13, 0.7493, 0.2019, 0.7492, 0.1907, 3e-05],
        [14, 0.7492, 0.2019, 0.7492, 0.1907, 3e-05],
        [15, 0.7492, 0.2019, 0.7492, 0.1907, 3e-05],
        [16, 0.7492, 0.2019, 0.7492, 0.1907, 3e-05],
        [17, 0.7492, 0.2019, 0.7492, 0.1907, 3e-05],
        [18, 0.7491, 0.2020, 0.7491, 0.1907, 3e-05],
        [19, 0.7491, 0.2020, 0.7491, 0.1907, 3e-05],
        [20, 0.7491, 0.2020, 0.7491, 0.1907, 3e-05],
        [21, 0.7491, 0.2020, 0.7491, 0.1907, 3e-05],
        [22, 0.7491, 0.2021, 0.7491, 0.1907, 3e-05],
        [23, 0.7491, 0.2022, 0.7491, 0.1907, 3e-05],
        [24, 0.7491, 0.2026, 0.7491, 0.1934, 3e-05],
        [25, 0.7491, 0.2031, 0.7491, 0.1911, 3e-05],
        [26, 0.7491, 0.2036, 0.7491, 0.1918, 3e-05],
        [27, 0.7491, 0.2046, 0.7491, 0.1910, 3e-05],
        [28, 0.7491, 0.2050, 0.7491, 0.1917, 3e-05],
        [29, 0.7491, 0.2055, 0.7491, 0.1921, 3e-05],
        [30, 0.7491, 0.2077, 0.7491, 0.1926, 3e-05],
        [31, 0.7491, 0.2117, 0.7491, 0.2027, 3e-06],
        [32, 0.7491, 0.2138, 0.7491, 0.2024, 3e-06],
        [33, 0.7491, 0.2145, 0.7491, 0.2040, 3e-06],
        [34, 0.7491, 0.2156, 0.7491, 0.2041, 3e-06],
        [35, 0.7491, 0.2161, 0.7491, 0.2049, 3e-06],
        [36, 0.7491, 0.2167, 0.7491, 0.2071, 3e-06],
        [37, 0.7490, 0.2175, 0.7491, 0.2080, 3e-06],
        [38, 0.7490, 0.2181, 0.7491, 0.2066, 3e-06],
        [39, 0.7490, 0.2186, 0.7491, 0.2066, 3e-06],
        [40, 0.7490, 0.2195, 0.7491, 0.2071, 3e-06],
        [41, 0.7490, 0.2201, 0.7491, 0.2085, 3e-06],
        [42, 0.7490, 0.2210, 0.7490, 0.2102, 3e-06],
        [43, 0.7490, 0.2220, 0.7490, 0.2105, 3e-06],
        [44, 0.7490, 0.2227, 0.7490, 0.2112, 3e-06],
        [45, 0.7490, 0.2235, 0.7490, 0.2097, 3e-06],
        [46, 0.7490, 0.2249, 0.7490, 0.2127, 3e-06],
        [47, 0.7490, 0.2257, 0.7490, 0.2128, 3e-06],
        [48, 0.7490, 0.2266, 0.7490, 0.2128, 3e-06],
        [49, 0.7490, 0.2278, 0.7490, 0.2134, 3e-06],
    ]),
    15: np.array([
        [0, 0.8984, 0.1632, 0.8692, 0.1972, 3e-05],
        [1, 0.8534, 0.2006, 0.8363, 0.1972, 3e-05],
        [2, 0.8235, 0.2006, 0.8111, 0.1972, 3e-05],
        [3, 0.8003, 0.2006, 0.7895, 0.1972, 3e-05],
        [4, 0.7834, 0.2006, 0.7766, 0.1972, 3e-05],
        [5, 0.7716, 0.2006, 0.7666, 0.1972, 3e-05],
        [6, 0.7636, 0.2006, 0.7604, 0.1972, 3e-05],
        [7, 0.7584, 0.2006, 0.7563, 0.1972, 3e-05],
        [8, 0.7550, 0.2006, 0.7538, 0.1972, 3e-05],
        [9, 0.7528, 0.2006, 0.7520, 0.1972, 3e-05],
        [10, 0.7514, 0.2006, 0.7510, 0.1972, 3e-05],
        [11, 0.7505, 0.2006, 0.7502, 0.1972, 3e-05],
        [12, 0.7500, 0.2006, 0.7498, 0.1972, 3e-05],
        [13, 0.7497, 0.2006, 0.7496, 0.1972, 3e-05],
        [14, 0.7494, 0.2006, 0.7494, 0.1972, 3e-05],
        [15, 0.7492, 0.2268, 0.7490, 0.2667, 3e-05],
        [16, 0.7488, 0.3026, 0.7488, 0.2802, 3e-05],
        [17, 0.7485, 0.3440, 0.7486, 0.3822, 3e-05],
        [18, 0.7483, 0.3844, 0.7483, 0.3573, 3e-05],
        [19, 0.7480, 0.4336, 0.7479, 0.4639, 3e-05],
        [20, 0.7477, 0.4759, 0.7477, 0.4818, 3e-05],
        [21, 0.7475, 0.5115, 0.7475, 0.4875, 3e-05],
        [22, 0.7473, 0.5399, 0.7474, 0.5296, 3e-05],
        [23, 0.7472, 0.5591, 0.7473, 0.5388, 3e-05],
        [24, 0.7470, 0.5765, 0.7472, 0.5611, 3e-05],
        [25, 0.7469, 0.5933, 0.7472, 0.5614, 3e-05],
        [26, 0.7468, 0.6078, 0.7471, 0.5775, 3e-05],
        [27, 0.7467, 0.6215, 0.7471, 0.5858, 3e-05],
        [28, 0.7466, 0.6355, 0.7470, 0.5996, 3e-05],
        [29, 0.7466, 0.6463, 0.7471, 0.6055, 3e-05],
        [30, 0.7465, 0.6592, 0.7470, 0.6047, 3e-05],
        [31, 0.7463, 0.6917, 0.7469, 0.6130, 3e-06],
        [32, 0.7462, 0.6971, 0.7469, 0.6171, 3e-06],
        [33, 0.7462, 0.7008, 0.7469, 0.6177, 3e-06],
        [34, 0.7462, 0.7046, 0.7469, 0.6204, 3e-06],
        [35, 0.7462, 0.7086, 0.7468, 0.6194, 3e-06],
        [36, 0.7461, 0.7103, 0.7469, 0.6194, 3e-06],
        [37, 0.7461, 0.7135, 0.7469, 0.6189, 3e-06],
        [38, 0.7461, 0.7155, 0.7469, 0.6227, 3e-06],
        [39, 0.7461, 0.7184, 0.7469, 0.6205, 3e-06],
        [40, 0.7461, 0.7207, 0.7468, 0.6202, 3e-06],
        [41, 0.7461, 0.7235, 0.7468, 0.6220, 3e-06],
        [42, 0.7461, 0.7250, 0.7469, 0.6220, 3e-06],
        [43, 0.7460, 0.7276, 0.7469, 0.6264, 3e-06],
        [44, 0.7460, 0.7298, 0.7468, 0.6236, 3e-06],
        [45, 0.7460, 0.7317, 0.7468, 0.6255, 3e-06],
        [46, 0.7460, 0.7336, 0.7468, 0.6252, 3e-06],
        [47, 0.7460, 0.7364, 0.7468, 0.6285, 3e-06],
        [48, 0.7460, 0.7379, 0.7468, 0.6289, 3e-06],
        [49, 0.7460, 0.7399, 0.7468, 0.6286, 3e-06],
    ]),
    19: np.array([
        [0, 0.8818, 0.1844, 0.8593, 0.2067, 3e-05],
        [1, 0.8411, 0.2033, 0.8270, 0.2067, 3e-05],
        [2, 0.8134, 0.2033, 0.8025, 0.2067, 3e-05],
        [3, 0.7926, 0.2033, 0.7837, 0.2067, 3e-05],
        [4, 0.7778, 0.2033, 0.7716, 0.2067, 3e-05],
        [5, 0.7677, 0.2033, 0.7640, 0.2067, 3e-05],
        [6, 0.7610, 0.2033, 0.7586, 0.2067, 3e-05],
        [7, 0.7567, 0.2033, 0.7552, 0.2067, 3e-05],
        [8, 0.7539, 0.2033, 0.7528, 0.2067, 3e-05],
        [9, 0.7521, 0.2033, 0.7514, 0.2067, 3e-05],
        [10, 0.7510, 0.2033, 0.7506, 0.2067, 3e-05],
        [11, 0.7503, 0.2033, 0.7500, 0.2067, 3e-05],
        [12, 0.7498, 0.2033, 0.7498, 0.2067, 3e-05],
        [13, 0.7495, 0.2275, 0.7492, 0.2800, 3e-05],
        [14, 0.7489, 0.3185, 0.7486, 0.3451, 3e-05],
        [15, 0.7484, 0.3882, 0.7483, 0.4143, 3e-05],
        [16, 0.7480, 0.4493, 0.7479, 0.4529, 3e-05],
        [17, 0.7477, 0.4903, 0.7477, 0.5051, 3e-05],
        [18, 0.7475, 0.5225, 0.7476, 0.5257, 3e-05],
        [19, 0.7473, 0.5454, 0.7475, 0.5161, 3e-05],
        [20, 0.7472, 0.5666, 0.7474, 0.5446, 3e-05],
        [21, 0.7470, 0.5826, 0.7473, 0.5394, 3e-05],
        [22, 0.7469, 0.5990, 0.7473, 0.5385, 3e-05],
        [23, 0.7468, 0.6168, 0.7472, 0.5876, 3e-05],
        [24, 0.7467, 0.6319, 0.7472, 0.5483, 3e-05],
        [25, 0.7466, 0.6445, 0.7472, 0.5593, 3e-05],
        [26, 0.7465, 0.6565, 0.7471, 0.5807, 3e-05],
        [27, 0.7464, 0.6713, 0.7470, 0.5963, 3e-05],
        [28, 0.7463, 0.6834, 0.7471, 0.5974, 3e-05],
        [29, 0.7462, 0.6937, 0.7470, 0.5980, 3e-05],
        [30, 0.7462, 0.7047, 0.7470, 0.6128, 3e-05],
        [31, 0.7460, 0.7349, 0.7469, 0.6194, 3e-06],
        [32, 0.7459, 0.7427, 0.7469, 0.6238, 3e-06],
        [33, 0.7459, 0.7464, 0.7469, 0.6256, 3e-06],
        [34, 0.7459, 0.7508, 0.7469, 0.6242, 3e-06],
        [35, 0.7459, 0.7540, 0.7469, 0.6311, 3e-06],
        [36, 0.7458, 0.7574, 0.7469, 0.6303, 3e-06],
        [37, 0.7458, 0.7597, 0.7470, 0.6336, 3e-06],
        [38, 0.7458, 0.7622, 0.7469, 0.6294, 3e-06],
        [39, 0.7458, 0.7646, 0.7470, 0.6288, 3e-06],
        [40, 0.7458, 0.7670, 0.7470, 0.6327, 3e-06],
        [41, 0.7458, 0.7689, 0.7469, 0.6325, 3e-06],
        [42, 0.7457, 0.7711, 0.7469, 0.6326, 3e-06],
        [43, 0.7457, 0.7727, 0.7469, 0.6332, 3e-06],
        [44, 0.7457, 0.7750, 0.7469, 0.6356, 3e-06],
        [45, 0.7457, 0.7766, 0.7469, 0.6345, 3e-06],
        [46, 0.7457, 0.7782, 0.7469, 0.6368, 3e-06],
        [47, 0.7457, 0.7796, 0.7469, 0.6364, 3e-06],
        [48, 0.7457, 0.7813, 0.7470, 0.6384, 3e-06],
        [49, 0.7457, 0.7825, 0.7469, 0.6381, 3e-06],
    ]),
    23: np.array([
        [0, 0.8584, 0.1888, 0.8350, 0.1987, 3e-05],
        [1, 0.8195, 0.1978, 0.8038, 0.1987, 3e-05],
        [2, 0.7941, 0.1978, 0.7840, 0.1987, 3e-05],
        [3, 0.7771, 0.1978, 0.7710, 0.1987, 3e-05],
        [4, 0.7662, 0.1978, 0.7626, 0.1987, 3e-05],
        [5, 0.7595, 0.1978, 0.7571, 0.1987, 3e-05],
        [6, 0.7554, 0.1978, 0.7538, 0.1987, 3e-05],
        [7, 0.7528, 0.1978, 0.7520, 0.1987, 3e-05],
        [8, 0.7513, 0.1978, 0.7508, 0.1987, 3e-05],
        [9, 0.7504, 0.1984, 0.7500, 0.2094, 3e-05],
        [10, 0.7497, 0.2435, 0.7494, 0.2747, 3e-05],
        [11, 0.7491, 0.2951, 0.7489, 0.2989, 3e-05],
        [12, 0.7488, 0.3279, 0.7487, 0.3401, 3e-05],
        [13, 0.7485, 0.3594, 0.7484, 0.3876, 3e-05],
        [14, 0.7482, 0.4106, 0.7481, 0.4318, 3e-05],
        [15, 0.7477, 0.4745, 0.7478, 0.4593, 3e-05],
        [16, 0.7474, 0.5170, 0.7475, 0.5164, 3e-05],
        [17, 0.7472, 0.5496, 0.7475, 0.5301, 3e-05],
        [18, 0.7470, 0.5740, 0.7473, 0.5515, 3e-05],
        [19, 0.7469, 0.5965, 0.7473, 0.5582, 3e-05],
        [20, 0.7467, 0.6154, 0.7472, 0.5721, 3e-05],
        [21, 0.7466, 0.6344, 0.7471, 0.5723, 3e-05],
        [22, 0.7465, 0.6545, 0.7471, 0.5924, 3e-05],
        [23, 0.7464, 0.6708, 0.7470, 0.5933, 3e-05],
        [24, 0.7463, 0.6849, 0.7470, 0.6112, 3e-05],
        [25, 0.7462, 0.7007, 0.7469, 0.6154, 3e-05],
        [26, 0.7461, 0.7119, 0.7469, 0.6190, 3e-05],
        [27, 0.7460, 0.7266, 0.7469, 0.6154, 3e-05],
        [28, 0.7459, 0.7367, 0.7468, 0.6220, 3e-05],
        [29, 0.7458, 0.7493, 0.7469, 0.6209, 3e-05],
        [30, 0.7458, 0.7582, 0.7469, 0.6271, 3e-05],
        [31, 0.7456, 0.7865, 0.7468, 0.6523, 3e-06],
        [32, 0.7455, 0.7937, 0.7468, 0.6544, 3e-06],
        [33, 0.7455, 0.7990, 0.7468, 0.6566, 3e-06],
        [34, 0.7455, 0.8022, 0.7468, 0.6568, 3e-06],
        [35, 0.7455, 0.8051, 0.7467, 0.6568, 3e-06],
        [36, 0.7455, 0.8084, 0.7468, 0.6580, 3e-06],
        [37, 0.7454, 0.8111, 0.7468, 0.6576, 3e-06],
        [38, 0.7454, 0.8135, 0.7468, 0.6583, 3e-06],
        [39, 0.7454, 0.8157, 0.7468, 0.6580, 3e-06],
        [40, 0.7454, 0.8180, 0.7468, 0.6581, 3e-06],
        [41, 0.7454, 0.8197, 0.7468, 0.6609, 3e-06],
        [42, 0.7454, 0.8216, 0.7468, 0.6615, 3e-06],
        [43, 0.7454, 0.8237, 0.7468, 0.6612, 3e-06],
        [44, 0.7453, 0.8248, 0.7468, 0.6642, 3e-06],
        [45, 0.7453, 0.8265, 0.7468, 0.6631, 3e-06],
        [46, 0.7453, 0.8279, 0.7468, 0.6637, 3e-06],
        [47, 0.7453, 0.8293, 0.7468, 0.6638, 3e-06],
        [48, 0.7453, 0.8307, 0.7468, 0.6652, 3e-06],
        [49, 0.7453, 0.8320, 0.7468, 0.6626, 3e-06],
    ]),
    27: np.array([
        [0, 0.8728, 0.1935, 0.8489, 0.1972, 3e-05],
        [1, 0.8358, 0.2006, 0.8211, 0.1972, 3e-05],
        [2, 0.8093, 0.2006, 0.7989, 0.1972, 3e-05],
        [3, 0.7895, 0.2006, 0.7819, 0.1972, 3e-05],
        [4, 0.7757, 0.2006, 0.7708, 0.1972, 3e-05],
        [5, 0.7663, 0.2006, 0.7624, 0.1972, 3e-05],
        [6, 0.7601, 0.2006, 0.7577, 0.1972, 3e-05],
        [7, 0.7560, 0.2006, 0.7545, 0.1972, 3e-05],
        [8, 0.7535, 0.2006, 0.7526, 0.1972, 3e-05],
        [9, 0.7518, 0.2006, 0.7513, 0.1972, 3e-05],
        [10, 0.7508, 0.2009, 0.7510, 0.1975, 3e-05],
        [11, 0.7500, 0.2350, 0.7496, 0.2573, 3e-05],
        [12, 0.7494, 0.2870, 0.7491, 0.2966, 3e-05],
        [13, 0.7490, 0.3164, 0.7488, 0.3114, 3e-05],
        [14, 0.7486, 0.3458, 0.7486, 0.3500, 3e-05],
        [15, 0.7483, 0.3949, 0.7482, 0.4043, 3e-05],
        [16, 0.7479, 0.4577, 0.7479, 0.4855, 3e-05],
        [17, 0.7475, 0.5077, 0.7477, 0.5078, 3e-05],
        [18, 0.7473, 0.5476, 0.7475, 0.5198, 3e-05],
        [19, 0.7470, 0.5790, 0.7473, 0.5394, 3e-05],
        [20, 0.7469, 0.6035, 0.7473, 0.5421, 3e-05],
        [21, 0.7467, 0.6292, 0.7472, 0.5716, 3e-05],
        [22, 0.7465, 0.6524, 0.7471, 0.5665, 3e-05],
        [23, 0.7464, 0.6730, 0.7470, 0.5937, 3e-05],
        [24, 0.7463, 0.6904, 0.7470, 0.5964, 3e-05],
        [25, 0.7461, 0.7092, 0.7470, 0.6074, 3e-05],
        [26, 0.7460, 0.7255, 0.7470, 0.5869, 3e-05],
        [27, 0.7459, 0.7411, 0.7469, 0.6185, 3e-05],
        [28, 0.7459, 0.7508, 0.7469, 0.6195, 3e-05],
        [29, 0.7458, 0.7650, 0.7469, 0.6283, 3e-05],
        [30, 0.7457, 0.7751, 0.7469, 0.6273, 3e-05],
        [31, 0.7455, 0.7987, 0.7468, 0.6371, 3e-06],
        [32, 0.7455, 0.8055, 0.7469, 0.6409, 3e-06],
        [33, 0.7455, 0.8097, 0.7469, 0.6400, 3e-06],
        [34, 0.7455, 0.8134, 0.7469, 0.6416, 3e-06],
        [35, 0.7454, 0.8163, 0.7469, 0.6406, 3e-06],
        [36, 0.7454, 0.8191, 0.7469, 0.6407, 3e-06],
        [37, 0.7454, 0.8216, 0.7469, 0.6408, 3e-06],
        [38, 0.7454, 0.8238, 0.7469, 0.6385, 3e-06],
        [39, 0.7454, 0.8256, 0.7469, 0.6392, 3e-06],
        [40, 0.7454, 0.8279, 0.7469, 0.6433, 3e-06],
        [41, 0.7453, 0.8297, 0.7469, 0.6413, 3e-06],
        [42, 0.7453, 0.8312, 0.7469, 0.6383, 3e-06],
        [43, 0.7453, 0.8331, 0.7469, 0.6423, 3e-06],
        [44, 0.7453, 0.8346, 0.7469, 0.6398, 3e-06],
        [45, 0.7453, 0.8360, 0.7469, 0.6422, 3e-06],
        [46, 0.7453, 0.8375, 0.7469, 0.6424, 3e-06],
        [47, 0.7453, 0.8389, 0.7469, 0.6434, 3e-06],
        [48, 0.7453, 0.8401, 0.7469, 0.6438, 3e-06],
        [49, 0.7453, 0.8413, 0.7469, 0.6417, 3e-06],
    ]),
    31: np.array([
        [0, 0.8194, 0.1965, 0.8011, 0.1992, 3e-05],
        [1, 0.7915, 0.1996, 0.7822, 0.1992, 3e-05],
        [2, 0.7758, 0.1996, 0.7708, 0.1992, 3e-05],
        [3, 0.7658, 0.1996, 0.7621, 0.1992, 3e-05],
        [4, 0.7594, 0.1996, 0.7572, 0.1992, 3e-05],
        [5, 0.7555, 0.1996, 0.7543, 0.1992, 3e-05],
        [6, 0.7530, 0.1996, 0.7521, 0.1992, 3e-05],
        [7, 0.7515, 0.1996, 0.7509, 0.1992, 3e-05],
        [8, 0.7506, 0.1996, 0.7503, 0.1992, 3e-05],
        [9, 0.7500, 0.1996, 0.7498, 0.1992, 3e-05],
        [10, 0.7496, 0.1996, 0.7495, 0.1992, 3e-05],
        [11, 0.7494, 0.1996, 0.7494, 0.1992, 3e-05],
        [12, 0.7493, 0.1996, 0.7493, 0.1992, 3e-05],
        [13, 0.7492, 0.1996, 0.7492, 0.1992, 3e-05],
        [14, 0.7492, 0.1996, 0.7492, 0.1992, 3e-05],
        [15, 0.7492, 0.1996, 0.7492, 0.1992, 3e-05],
        [16, 0.7492, 0.1996, 0.7492, 0.1992, 3e-05],
        [17, 0.7491, 0.1996, 0.7492, 0.1992, 3e-05],
        [18, 0.7491, 0.1996, 0.7491, 0.1992, 3e-05],
        [19, 0.7491, 0.1996, 0.7491, 0.1992, 3e-05],
        [20, 0.7491, 0.1996, 0.7491, 0.1992, 3e-05],
        [21, 0.7491, 0.1996, 0.7491, 0.1992, 3e-05],
        [22, 0.7491, 0.1996, 0.7491, 0.1992, 3e-05],
        [23, 0.7491, 0.1996, 0.7491, 0.1992, 3e-05],
        [24, 0.7491, 0.1996, 0.7491, 0.1992, 3e-05],
        [25, 0.7491, 0.1996, 0.7491, 0.1992, 3e-05],
        [26, 0.7491, 0.1996, 0.7491, 0.1992, 3e-05],
        [27, 0.7491, 0.1996, 0.7491, 0.1992, 3e-05],
        [28, 0.7491, 0.1996, 0.7491, 0.1992, 3e-05],
        [29, 0.7491, 0.1996, 0.7491, 0.1992, 3e-05],
        [30, 0.7491, 0.1996, 0.7491, 0.1992, 3e-05],
        [31, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [32, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [33, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [34, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [35, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [36, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [37, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [38, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [39, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [40, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [41, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [42, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [43, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [44, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [45, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [46, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [47, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [48, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
        [49, 0.7491, 0.1996, 0.7491, 0.1992, 3e-06],
    ])
}


if __name__ == "__main__":

    plt.ion()

    best_train_iou = []
    best_val_iou = []

    best_training_loss = []
    best_val_loss = []

    rf_size_arr = []

    for key, value in sorted(lateral_connections_results.items()):

        validation_iou_arr = value[:, 4]
        train_iou_arr = value[:, 2]

        validation_loss_arr = value[:, 3]
        train_loss_arr = value[:, 1]

        rf_size_arr.append(key)
        best_train_iou.append(np.max(train_iou_arr))
        best_val_iou.append(np.max(validation_iou_arr))
        best_training_loss.append(np.min(train_loss_arr))
        best_val_loss.append(np.min(validation_loss_arr))

    # Plot best Iou vs rf size
    plt.figure()
    plt.plot(rf_size_arr, best_train_iou, label='train_iou', marker='x', markersize=10)
    plt.plot(rf_size_arr, best_val_iou, label='val_iou', marker='x', markersize=10)
    plt.xlabel("Lateral RF size")
    plt.ylabel("IoU")
    plt.title("Iou vs Rf Size")
    plt.legend()

    # Plot lowest loss vs Tau
    plt.figure()
    plt.plot(rf_size_arr, best_training_loss, label='train_loss', marker='x', markersize=10)
    plt.plot(rf_size_arr, best_val_loss, label='val_loss', marker='x', markersize=10)
    plt.xlabel("a,b=")
    plt.ylabel("Loss")
    plt.title("Loss vs RF Size")
    plt.legend()

    # Plot Individual Loss/Iou Curves
    num_keys = len(lateral_connections_results.keys())
    single_dim = np.ceil(np.sqrt(num_keys))

    fig1 = plt.figure()
    fig2 = plt.figure()

    for k_idx, key in enumerate(sorted(lateral_connections_results.keys())):
        ax1 = fig1.add_subplot(single_dim, single_dim, k_idx+1)
        ax2 = fig2.add_subplot(single_dim, single_dim, k_idx+1)

        ax1.plot(
            lateral_connections_results[key][:, 0],
            lateral_connections_results[key][:, 2],
            label='train_iou')

        ax1.plot(
            lateral_connections_results[key][:, 0],
            lateral_connections_results[key][:, 4],
            label='val_iou')

        ax1.set_title("rf_size={}".format(key))

        ax2.plot(
            lateral_connections_results[key][:, 0],
            lateral_connections_results[key][:, 1],
            label='train_loss')

        ax2.plot(
            lateral_connections_results[key][:, 0],
            lateral_connections_results[key][:, 3],
            label='val_iou_loss')

        # ax2.set_yscale('log')

        ax1.set_title("rf_size={}".format(key))
        ax2.set_title("rf_size={}".format(key))

    ax1.legend()
    ax2.legend()
    fig1.suptitle("Iou Vs Rf Size Individual Curves")
    fig2.suptitle("Loss Vs Rf Size Individual Curves")

    # ----------------------------------------------------------------------
    import pdb
    pdb.set_trace()
