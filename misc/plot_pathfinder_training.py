import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np


mpl.rcParams.update({
    'font.size': 18,
    'lines.linewidth': 3}
)

plt.ion()

control = np.array([
    [1, 0.6950, 50.33, 0.6944, 49.76, 0.001],
    [2, 0.6934, 52.00, 0.6924, 56.54, 0.001],
    [3, 0.6885, 56.44, 0.6904, 55.82, 0.001],
    [4, 0.6833, 57.89, 0.6840, 57.30, 0.001],
    [5, 0.6772, 58.83, 0.6902, 56.54, 0.001],
    [6, 0.6705, 59.53, 0.6702, 60.54, 0.001],
    [7, 0.6639, 60.62, 0.6716, 58.66, 0.001],
    [8, 0.6566, 61.62, 0.6510, 63.84, 0.001],
    [9, 0.6495, 63.20, 0.6447, 64.50, 0.001],
    [10, 0.6407, 64.26, 0.6686, 57.14, 0.001],
    [11, 0.6348, 65.23, 0.6220, 67.00, 0.001],
    [12, 0.6268, 65.94, 0.6826, 55.40, 0.001],
    [13, 0.6179, 67.01, 0.6335, 63.04, 0.001],
    [14, 0.6115, 67.59, 0.5972, 67.92, 0.001],
    [15, 0.6008, 68.65, 0.6329, 62.60, 0.001],
    [16, 0.5938, 69.45, 0.6999, 59.16, 0.001],
    [17, 0.5864, 70.25, 0.5847, 69.08, 0.001],
    [18, 0.5794, 70.67, 0.5830, 70.80, 0.001],
    [19, 0.5748, 71.01, 0.5711, 71.22, 0.001],
    [20, 0.5683, 71.60, 0.5868, 69.28, 0.001],
    [21, 0.5613, 72.40, 0.5606, 71.90, 0.001],
    [22, 0.5550, 72.82, 0.5990, 68.84, 0.001],
    [23, 0.5478, 73.31, 0.6224, 66.42, 0.001],
    [24, 0.5408, 73.57, 0.5625, 71.88, 0.001],
    [25, 0.5367, 74.01, 0.6400, 66.08, 0.001],
    [26, 0.5300, 74.50, 0.5604, 71.34, 0.001],
    [27, 0.5248, 75.03, 0.5794, 71.08, 0.001],
    [28, 0.5159, 75.50, 0.5687, 71.44, 0.001],
    [29, 0.5103, 76.07, 0.5761, 70.96, 0.001],
    [30, 0.5036, 76.32, 0.5854, 71.40, 0.001],
    [31, 0.4945, 77.13, 0.5973, 70.00, 0.001],
    [32, 0.4551, 79.84, 0.5677, 72.76, 0.0001],
    [33, 0.4473, 80.26, 0.5674, 72.84, 0.0001],
    [34, 0.4394, 80.88, 0.5648, 73.64, 0.0001],
    [35, 0.4373, 80.93, 0.5685, 72.66, 0.0001],
    [36, 0.4355, 81.05, 0.5738, 72.92, 0.0001],
    [37, 0.4307, 81.18, 0.5628, 73.54, 0.0001],
    [38, 0.4294, 81.56, 0.5639, 73.32, 0.0001],
    [39, 0.4267, 81.51, 0.5719, 72.92, 0.0001],
    [40, 0.4222, 81.87, 0.5812, 72.56, 0.0001],
    [41, 0.4219, 81.82, 0.5735, 73.10, 0.0001],
    [42, 0.4177, 81.98, 0.5808, 72.44, 0.0001],
    [43, 0.4175, 82.15, 0.5934, 72.20, 0.0001],
    [44, 0.4144, 82.47, 0.5868, 72.44, 0.0001],
    [45, 0.4125, 82.21, 0.5944, 72.42, 0.0001],
    [46, 0.4122, 82.38, 0.5852, 72.98, 0.0001],
    [47, 0.4098, 82.60, 0.5976, 72.40, 0.0001],
    [48, 0.4051, 82.82, 0.5879, 72.56, 0.0001],
    [49, 0.4040, 83.05, 0.5901, 72.88, 0.0001],
    [50, 0.4028, 82.94, 0.6121, 71.76, 0.0001],
])

control_identical = np.array([
    [1, 0.7029, 50.44, 0.7016, 51.10, 0.0001],
    [2, 0.6952, 52.89, 0.6947, 54.10, 0.0001],
    [3, 0.6922, 54.55, 0.6932, 54.80, 0.0001],
    [4, 0.6910, 55.47, 0.6919, 54.78, 0.0001],
    [5, 0.6900, 56.69, 0.6943, 52.88, 0.0001],
    [6, 0.6883, 57.33, 0.6888, 56.30, 0.0001],
    [7, 0.6865, 58.00, 0.6883, 55.96, 0.0001],
    [8, 0.6844, 58.45, 0.6873, 57.90, 0.0001],
    [9, 0.6809, 59.00, 0.6826, 58.50, 0.0001],
    [10, 0.6766, 59.60, 0.6826, 58.42, 0.0001],
    [11, 0.6741, 59.77, 0.6789, 58.62, 0.0001],
    [12, 0.6708, 60.12, 0.6743, 59.24, 0.0001],
    [13, 0.6684, 60.04, 0.6721, 60.20, 0.0001],
    [14, 0.6655, 60.41, 0.6715, 59.84, 0.0001],
    [15, 0.6632, 60.96, 0.6682, 59.46, 0.0001],
    [16, 0.6611, 61.16, 0.6663, 61.04, 0.0001],
    [17, 0.6591, 61.42, 0.6681, 59.48, 0.0001],
    [18, 0.6565, 62.11, 0.6656, 61.14, 0.0001],
    [19, 0.6532, 62.62, 0.6646, 60.98, 0.0001],
    [20, 0.6511, 63.02, 0.6601, 61.20, 0.0001],
    [21, 0.6471, 63.80, 0.6607, 61.64, 0.0001],
    [22, 0.6434, 64.32, 0.6633, 60.24, 0.0001],
    [23, 0.6401, 64.83, 0.6853, 59.72, 0.0001],
    [24, 0.6355, 65.63, 0.6746, 61.62, 0.0001],
    [25, 0.6308, 66.65, 0.6589, 62.38, 0.0001],
    [26, 0.6250, 67.40, 0.6600, 62.78, 0.0001],
    [27, 0.6203, 67.79, 0.6776, 58.42, 0.0001],
    [28, 0.6148, 68.62, 0.6667, 61.88, 0.0001],
    [29, 0.6091, 68.84, 0.6742, 60.62, 0.0001],
    [30, 0.6030, 69.94, 0.6695, 62.58, 0.0001],
    [31, 0.5965, 70.45, 0.6794, 58.86, 0.0001],
    [32, 0.5782, 72.85, 0.6652, 60.34, 1e-05],
    [33, 0.5732, 73.50, 0.6684, 60.26, 1e-05],
    [34, 0.5708, 73.62, 0.6652, 60.88, 1e-05],
    [35, 0.5682, 73.89, 0.6705, 60.54, 1e-05],
    [36, 0.5670, 74.26, 0.6723, 59.96, 1e-05],
    [37, 0.5635, 74.42, 0.6709, 59.88, 1e-05],
    [38, 0.5633, 74.32, 0.6683, 60.46, 1e-05],
    [39, 0.5618, 74.72, 0.6730, 59.64, 1e-05],
    [40, 0.5597, 74.78, 0.6703, 59.62, 1e-05],
    [41, 0.5579, 74.62, 0.6662, 60.52, 1e-05],
    [42, 0.5572, 74.56, 0.6704, 60.14, 1e-05],
    [43, 0.5561, 75.05, 0.6734, 59.80, 1e-05],
    [44, 0.5528, 75.53, 0.6688, 59.98, 1e-05],
    [45, 0.5528, 75.14, 0.6736, 58.72, 1e-05],
    [46, 0.5513, 75.35, 0.6682, 60.34, 1e-05],
    [47, 0.5507, 75.40, 0.6675, 59.92, 1e-05],
    [48, 0.5496, 75.05, 0.6645, 60.74, 1e-05],
    [49, 0.5485, 75.57, 0.6716, 60.08, 1e-05],
    [50, 0.5450, 75.54, 0.6726, 59.84, 1e-05],
])

model = np.array([
    [1, 0.6992, 49.63, 0.6946, 50.24, 0.0001],
    [2, 0.6945, 50.02, 0.6940, 50.74, 0.0001],
    [3, 0.6942, 50.22, 0.6940, 49.80, 0.0001],
    [4, 0.6930, 52.65, 0.6929, 52.04, 0.0001],
    [5, 0.6915, 55.12, 0.6925, 52.18, 0.0001],
    [6, 0.6891, 56.85, 0.6899, 53.96, 0.0001],
    [7, 0.6860, 57.79, 0.6858, 58.88, 0.0001],
    [8, 0.6825, 58.87, 0.6814, 56.16, 0.0001],
    [9, 0.6787, 60.10, 0.6695, 61.86, 0.0001],
    [10, 0.6735, 61.48, 0.6653, 62.48, 0.0001],
    [11, 0.6661, 62.66, 0.6576, 60.88, 0.0001],
    [12, 0.6555, 64.90, 0.6376, 69.76, 0.0001],
    [13, 0.6433, 66.51, 0.6044, 70.08, 0.0001],
    [14, 0.6314, 67.83, 0.5890, 72.42, 0.0001],
    [15, 0.6163, 69.35, 0.5692, 72.36, 0.0001],
    [16, 0.6019, 70.80, 0.5706, 72.16, 0.0001],
    [17, 0.5865, 71.86, 0.5351, 76.14, 0.0001],
    [18, 0.5748, 72.20, 0.5214, 76.86, 0.0001],
    [19, 0.5637, 73.26, 0.5063, 77.16, 0.0001],
    [20, 0.5527, 74.02, 0.5446, 71.76, 0.0001],
    [21, 0.5414, 74.98, 0.4896, 77.50, 0.0001],
    [22, 0.5329, 75.09, 0.4832, 77.48, 0.0001],
    [23, 0.5248, 75.65, 0.4750, 77.16, 0.0001],
    [24, 0.5162, 76.41, 0.4693, 79.44, 0.0001],
    [25, 0.5088, 76.63, 0.4618, 79.52, 0.0001],
    [26, 0.5006, 77.18, 0.4712, 78.22, 0.0001],
    [27, 0.4936, 77.65, 0.4869, 78.18, 0.0001],
    [28, 0.4865, 77.89, 0.4412, 80.52, 0.0001],
    [29, 0.4794, 78.59, 0.4650, 77.98, 0.0001],
    [30, 0.4714, 79.05, 0.4497, 80.90, 0.0001],
    [31, 0.4646, 79.55, 0.4487, 79.76, 0.0001],
    [32, 0.4374, 81.47, 0.4293, 81.76, 1e-05],
    [33, 0.4334, 81.96, 0.4299, 81.44, 1e-05],
    [34, 0.4286, 82.43, 0.4338, 81.10, 1e-05],
    [35, 0.4280, 82.16, 0.4249, 81.76, 1e-05],
    [36, 0.4250, 82.67, 0.4295, 81.74, 1e-05],
    [37, 0.4223, 82.63, 0.4244, 81.56, 1e-05],
    [38, 0.4210, 82.79, 0.4295, 81.40, 1e-05],
    [39, 0.4195, 83.02, 0.4308, 81.40, 1e-05],
    [40, 0.4169, 83.14, 0.4261, 81.90, 1e-05],
    [41, 0.4163, 83.17, 0.4223, 81.72, 1e-05],
    [42, 0.4140, 83.18, 0.4287, 80.84, 1e-05],
    [43, 0.4140, 83.18, 0.4294, 81.62, 1e-05],
    [44, 0.4117, 83.34, 0.4251, 81.48, 1e-05],
    [45, 0.4108, 83.43, 0.4315, 81.28, 1e-05],
    [46, 0.4082, 83.64, 0.4256, 81.56, 1e-05],
    [47, 0.4087, 83.60, 0.4244, 81.62, 1e-05],
    [48, 0.4062, 83.58, 0.4216, 82.10, 1e-05],
    [49, 0.4057, 83.83, 0.4327, 81.42, 1e-05],
    [50, 0.4033, 83.89, 0.4256, 81.44, 1e-05],
])

# Accuracy
plt.plot(control[:, 0], control[:, 2], label='control_train', color='red', linestyle='--')
plt.plot(control[:, 0], control[:, 4], label='control_val', color='red')
plt.plot(model[:, 0], model[:, 2], label='model_train', color='b', linestyle='--')
plt.plot(model[:, 0], model[:, 4], label='model_val', color='blue')
plt.title("Accuracy vs Epoch")

plt.grid()
plt.legend()
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
# plt.ylim([0, 100])

# Loss
plt.figure()
plt.plot(control[:, 0], control[:, 1], label='control_train', color='red', linestyle='--')
plt.plot(control[:, 0], control[:, 3], label='control_val', color='red')
plt.plot(model[:, 0], model[:, 1], label='model_train', color='b', linestyle='--')
plt.plot(model[:, 0], model[:, 3], label='model_val', color='blue')
plt.title("Loss vs Epoch")

plt.grid()
plt.legend()
plt.xlabel("Epoch")
plt.ylabel("Loss")
# plt.ylim([0, 100])

import pdb
pdb.set_trace()
