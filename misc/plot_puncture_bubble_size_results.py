# ---------------------------------------------------------------------------------------
# # Plot results for the puncture bubbles experiment - explore bubbles size
# ---------------------------------------------------------------------------------------
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

n_bubbles = 10

mpl.rcParams.update({
    'font.size': 18,
    'lines.linewidth': 3}
)

results_fwhm_0 = {
    'iou_vs_epoch': np.array([
        [1, 0.3161, 0.1541, 0.1382, 0.3796, 0.001],
        [2, 0.1222, 0.4492, 0.1156, 0.4420, 0.001],
        [3, 0.1118, 0.4754, 0.1112, 0.4783, 0.001],
        [4, 0.1096, 0.4879, 0.1080, 0.4945, 0.001],
        [5, 0.1080, 0.4945, 0.1065, 0.4991, 0.001],
        [6, 0.1065, 0.4995, 0.1082, 0.4911, 0.001],
        [7, 0.1057, 0.5027, 0.1042, 0.5065, 0.001],
        [8, 0.1052, 0.5053, 0.1041, 0.5017, 0.001],
        [9, 0.1047, 0.5076, 0.1039, 0.5019, 0.001],
        [10, 0.1042, 0.5097, 0.1034, 0.5038, 0.001],
        [11, 0.1040, 0.5114, 0.1031, 0.5045, 0.001],
        [12, 0.1044, 0.5125, 0.1028, 0.5078, 0.001],
        [13, 0.1032, 0.5148, 0.1020, 0.5074, 0.001],
        [14, 0.1041, 0.5159, 0.1027, 0.5054, 0.001],
        [15, 0.1029, 0.5172, 0.1022, 0.5039, 0.001],
        [16, 0.1033, 0.5179, 0.1020, 0.5069, 0.001],
        [17, 0.1025, 0.5191, 0.1015, 0.5064, 0.001],
        [18, 0.1021, 0.5200, 0.1015, 0.5056, 0.001],
        [19, 0.1019, 0.5208, 0.1013, 0.5072, 0.001],
        [20, 0.1020, 0.5214, 0.1019, 0.5059, 0.001],
        [21, 0.1017, 0.5222, 0.1013, 0.5072, 0.001],
        [22, 0.1015, 0.5228, 0.1012, 0.5080, 0.001],
        [23, 0.1014, 0.5234, 0.1010, 0.5093, 0.001],
        [24, 0.1013, 0.5240, 0.1012, 0.5077, 0.001],
        [25, 0.1011, 0.5245, 0.1011, 0.5096, 0.001],
        [26, 0.1010, 0.5251, 0.1011, 0.5095, 0.001],
        [27, 0.1009, 0.5256, 0.1009, 0.5089, 0.001],
        [28, 0.1008, 0.5261, 0.1003, 0.5184, 0.001],
        [29, 0.1007, 0.5266, 0.1000, 0.5215, 0.001],
        [30, 0.1006, 0.5269, 0.0999, 0.5223, 0.001],
        [31, 0.1005, 0.5274, 0.0998, 0.5222, 0.001],
        [32, 0.0922, 0.5389, 0.0923, 0.5384, 0.0001],
        [33, 0.0919, 0.5403, 0.0921, 0.5417, 0.0001],
        [34, 0.0918, 0.5411, 0.0919, 0.5440, 0.0001],
        [35, 0.0917, 0.5417, 0.0918, 0.5454, 0.0001],
        [36, 0.0916, 0.5422, 0.0918, 0.5464, 0.0001],
        [37, 0.0915, 0.5426, 0.0917, 0.5473, 0.0001],
        [38, 0.0914, 0.5430, 0.0916, 0.5479, 0.0001],
        [39, 0.0913, 0.5434, 0.0916, 0.5485, 0.0001],
        [40, 0.0912, 0.5437, 0.0915, 0.5490, 0.0001],
        [41, 0.0912, 0.5441, 0.0915, 0.5494, 0.0001],
        [42, 0.0911, 0.5444, 0.0914, 0.5500, 0.0001],
        [43, 0.0910, 0.5447, 0.0914, 0.5505, 0.0001],
        [44, 0.0910, 0.5450, 0.0914, 0.5508, 0.0001],
        [45, 0.0909, 0.5453, 0.0914, 0.5513, 0.0001],
        [46, 0.0909, 0.5455, 0.0913, 0.5514, 0.0001],
        [47, 0.0908, 0.5458, 0.0913, 0.5515, 0.0001],
        [48, 0.0908, 0.5460, 0.0913, 0.5518, 0.0001],
        [49, 0.0907, 0.5463, 0.0913, 0.5521, 0.0001],
        [50, 0.0907, 0.5465, 0.0912, 0.5523, 0.0001],
    ]),
    'gain_vs_c_len': {
        'c_len': np.array([1, 3, 5, 7, 9]),
        'mean_gain': np.array([1.0000, 1.0112, 1.0125, 1.0144, 1.0147]),
        'std_gain': np.array([0.0563, 0.0459, 0.0526, 0.0563, 0.0525])
    },

    'gain_vs_c_len_11x11': {
        'c_len': np.array([1, 3, 5, 7, 9]),
        'mean_gain': np.array([1.0000, 1.0851, 1.1295, 1.1711, 1.1772]),
        'std_gain': np.array([0.1512, 0.1191, 0.1058, 0.1387, 0.1429])
    },

    'gain_vs_spacing': {
        'spacing': np.array([1.00, 1.14, 1.29, 1.43, 1.57, 1.71, 1.86, 2.00]),
        'mean_gain': np.array([1.0160, 1.0373, 1.0564, 1.0759, 1.0899, 1.1049, 1.1125, 1.1255]),
        'std_gain': np.array([0.0531, 0.0579, 0.0591, 0.0546, 0.0562, 0.0571, 0.0627, 0.0550])
    },
    'no_opt_stim_neurons': [11, 16, 28, 29, 33, 34, 44, 57, 62],
    'filtered_out_neurons': [],
}

results_fwhm_5 = {
    'iou_vs_epoch': np.array([
        [1, 0.2061, 0.2195, 0.1287, 0.4417, 0.001],
        [2, 0.1223, 0.4418, 0.1254, 0.4506, 0.001],
        [3, 0.1175, 0.4607, 0.1196, 0.4688, 0.001],
        [4, 0.1153, 0.4704, 0.1215, 0.4698, 0.001],
        [5, 0.1134, 0.4778, 0.1183, 0.4822, 0.001],
        [6, 0.1122, 0.4835, 0.1191, 0.4744, 0.001],
        [7, 0.1124, 0.4869, 0.1191, 0.4763, 0.001],
        [8, 0.1105, 0.4908, 0.1210, 0.4678, 0.001],
        [9, 0.1100, 0.4932, 0.1218, 0.4638, 0.001],
        [10, 0.1096, 0.4953, 0.1230, 0.4570, 0.001],
        [11, 0.1092, 0.4970, 0.1244, 0.4517, 0.001],
        [12, 0.1092, 0.4983, 0.1218, 0.4573, 0.001],
        [13, 0.1086, 0.4997, 0.1214, 0.4573, 0.001],
        [14, 0.1083, 0.5008, 0.1240, 0.4492, 0.001],
        [15, 0.1082, 0.5016, 0.1254, 0.4434, 0.001],
        [16, 0.1079, 0.5027, 0.1242, 0.4439, 0.001],
        [17, 0.1077, 0.5033, 0.1262, 0.4398, 0.001],
        [18, 0.1076, 0.5041, 0.1245, 0.4431, 0.001],
        [19, 0.1074, 0.5047, 0.1273, 0.4313, 0.001],
        [20, 0.1074, 0.5051, 0.1268, 0.4341, 0.001],
        [21, 0.1072, 0.5058, 0.1266, 0.4367, 0.001],
        [22, 0.1071, 0.5061, 0.1263, 0.4387, 0.001],
        [23, 0.1070, 0.5067, 0.1241, 0.4427, 0.001],
        [24, 0.1068, 0.5071, 0.1236, 0.4475, 0.001],
        [25, 0.1068, 0.5075, 0.1242, 0.4475, 0.001],
        [26, 0.1069, 0.5079, 0.1263, 0.4375, 0.001],
        [27, 0.1066, 0.5083, 0.1233, 0.4514, 0.001],
        [28, 0.1065, 0.5088, 0.1238, 0.4498, 0.001],
        [29, 0.1065, 0.5092, 0.1229, 0.4533, 0.001],
        [30, 0.1063, 0.5097, 0.1214, 0.4592, 0.001],
        [31, 0.1063, 0.5100, 0.1199, 0.4641, 0.001],
        [32, 0.0970, 0.5215, 0.0971, 0.5248, 0.0001],
        [33, 0.0966, 0.5232, 0.0969, 0.5248, 0.0001],
        [34, 0.0965, 0.5239, 0.0968, 0.5249, 0.0001],
        [35, 0.0964, 0.5245, 0.0966, 0.5252, 0.0001],
        [36, 0.0963, 0.5249, 0.0965, 0.5254, 0.0001],
        [37, 0.0962, 0.5253, 0.0964, 0.5256, 0.0001],
        [38, 0.0961, 0.5257, 0.0964, 0.5258, 0.0001],
        [39, 0.0960, 0.5260, 0.0963, 0.5259, 0.0001],
        [40, 0.0959, 0.5263, 0.0962, 0.5260, 0.0001],
        [41, 0.0959, 0.5266, 0.0962, 0.5262, 0.0001],
        [42, 0.0958, 0.5269, 0.0961, 0.5264, 0.0001],
        [43, 0.0958, 0.5272, 0.0961, 0.5266, 0.0001],
        [44, 0.0957, 0.5274, 0.0961, 0.5266, 0.0001],
        [45, 0.0957, 0.5277, 0.0960, 0.5267, 0.0001],
        [46, 0.0956, 0.5279, 0.0960, 0.5268, 0.0001],
        [47, 0.0956, 0.5281, 0.0959, 0.5267, 0.0001],
        [48, 0.0955, 0.5284, 0.0959, 0.5268, 0.0001],
        [49, 0.0955, 0.5286, 0.0959, 0.5268, 0.0001],
        [50, 0.0954, 0.5288, 0.0959, 0.5268, 0.0001],
    ]),
    'gain_vs_c_len': {
        'c_len': np.array([1, 3, 5, 7, 9]),
        'mean_gain': np.array([1.0000, 1.0104, 1.0202, 1.0185, 1.0233]),
        'std_gain': np.array([0.1085, 0.1379, 0.1454, 0.1433, 0.1250])
    },
    'gain_vs_c_len_11x11': {
        'c_len': np.array([1, 3, 5, 7, 9]),
        'mean_gain': np.array([1.0000, 1.0559, 1.0629, 1.0666, 1.0668]),
        'std_gain': np.array([0.1624, 0.2492, 0.2626, 0.3173, 0.2800])
    },
    'gain_vs_spacing': {
        'spacing': np.array([1.00, 1.14, 1.29, 1.43, 1.57, 1.71, 1.86, 2.00]),
        'mean_gain': np.array([1.0184, 1.0599, 1.0891, 1.1407, 1.1633, 1.1880, 1.2064, 1.2175]),
        'std_gain': np.array([0.1178, 0.1887, 0.1852, 0.1909, 0.1830, 0.1780, 0.1538, 0.1579])
    },
    'no_opt_stim_neurons': [2, 22, 25, 29, 35, 43, 52, 57, 59, 62],
    'filtered_out_neurons': [],
}

results_fwhm_10 = {
    'iou_vs_epoch': np.array([
        [1, 0.3130, 0.1679, 0.1513, 0.3840, 0.001],
        [2, 0.1370, 0.4020, 0.1341, 0.3891, 0.001],
        [3, 0.1267, 0.4315, 0.1249, 0.4228, 0.001],
        [4, 0.1227, 0.4443, 0.1248, 0.4137, 0.001],
        [5, 0.1200, 0.4524, 0.1233, 0.4152, 0.001],
        [6, 0.1187, 0.4579, 0.1221, 0.4237, 0.001],
        [7, 0.1175, 0.4620, 0.1199, 0.4335, 0.001],
        [8, 0.1166, 0.4653, 0.1199, 0.4298, 0.001],
        [9, 0.1158, 0.4680, 0.1200, 0.4286, 0.001],
        [10, 0.1153, 0.4704, 0.1203, 0.4235, 0.001],
        [11, 0.1148, 0.4723, 0.1194, 0.4334, 0.001],
        [12, 0.1143, 0.4742, 0.1189, 0.4366, 0.001],
        [13, 0.1150, 0.4757, 0.1223, 0.4329, 0.001],
        [14, 0.1167, 0.4762, 0.1210, 0.4368, 0.001],
        [15, 0.1141, 0.4786, 0.1186, 0.4392, 0.001],
        [16, 0.1132, 0.4797, 0.1177, 0.4439, 0.001],
        [17, 0.1136, 0.4804, 0.1175, 0.4457, 0.001],
        [18, 0.1128, 0.4817, 0.1169, 0.4487, 0.001],
        [19, 0.1127, 0.4826, 0.1173, 0.4444, 0.001],
        [20, 0.1124, 0.4833, 0.1170, 0.4471, 0.001],
        [21, 0.1125, 0.4841, 0.1176, 0.4429, 0.001],
        [22, 0.1122, 0.4848, 0.1175, 0.4417, 0.001],
        [23, 0.1121, 0.4855, 0.1183, 0.4366, 0.001],
        [24, 0.1121, 0.4861, 0.1172, 0.4412, 0.001],
        [25, 0.1119, 0.4866, 0.1176, 0.4380, 0.001],
        [26, 0.1117, 0.4872, 0.1179, 0.4361, 0.001],
        [27, 0.1119, 0.4876, 0.1183, 0.4385, 0.001],
        [28, 0.1116, 0.4881, 0.1181, 0.4371, 0.001],
        [29, 0.1115, 0.4885, 0.1184, 0.4360, 0.001],
        [30, 0.1116, 0.4889, 0.1182, 0.4387, 0.001],
        [31, 0.1113, 0.4892, 0.1174, 0.4441, 0.001],
        [32, 0.1018, 0.5028, 0.1019, 0.4935, 0.0001],
        [33, 0.1013, 0.5045, 0.1019, 0.4940, 0.0001],
        [34, 0.1011, 0.5052, 0.1018, 0.4947, 0.0001],
        [35, 0.1010, 0.5058, 0.1017, 0.4954, 0.0001],
        [36, 0.1009, 0.5063, 0.1016, 0.4958, 0.0001],
        [37, 0.1008, 0.5067, 0.1015, 0.4962, 0.0001],
        [38, 0.1007, 0.5071, 0.1014, 0.4969, 0.0001],
        [39, 0.1006, 0.5075, 0.1013, 0.4975, 0.0001],
        [40, 0.1005, 0.5079, 0.1013, 0.4979, 0.0001],
        [41, 0.1004, 0.5084, 0.1012, 0.4984, 0.0001],
        [42, 0.1003, 0.5087, 0.1011, 0.4988, 0.0001],
        [43, 0.1003, 0.5091, 0.1010, 0.4991, 0.0001],
        [44, 0.1002, 0.5094, 0.1010, 0.4995, 0.0001],
        [45, 0.1001, 0.5097, 0.1009, 0.4999, 0.0001],
        [46, 0.1001, 0.5100, 0.1008, 0.5003, 0.0001],
        [47, 0.1000, 0.5103, 0.1007, 0.5004, 0.0001],
        [48, 0.0999, 0.5105, 0.1007, 0.5007, 0.0001],
        [49, 0.0999, 0.5107, 0.1006, 0.5009, 0.0001],
        [50, 0.0998, 0.5109, 0.1006, 0.5012, 0.0001],
    ]),
    'gain_vs_c_len': {
        'c_len': np.array([1, 3, 5, 7, 9]),
        'mean_gain': np.array([1.0000, 1.0149, 1.0443, 1.0418, 1.0423]),
        'std_gain': np.array([0.1495, 0.1438, 0.1773, 0.1843, 0.2049])
    },
    'gain_vs_c_len_11x11': {
        'c_len': np.array([1, 3, 5, 7, 9]),
        'mean_gain': np.array([1.0000, 1.0556, 1.0808, 1.0832, 1.0857]),
        'std_gain': np.array([0.0580, 0.0487, 0.0631, 0.0527, 0.0554])
    },
    'gain_vs_spacing': {
        'spacing': np.array([1.00, 1.14, 1.29, 1.43, 1.57, 1.71, 1.86, 2.00]),
        'mean_gain': np.array([1.0564, 1.1570, 1.2854, 1.3646, 1.4390, 1.4875, 1.5352, 1.5646]),
        'std_gain': np.array([0.2202, 0.2118, 0.1807, 0.1545, 0.1610, 0.1761, 0.1568, 0.1485])
    },
    'no_opt_stim_neurons': [14, 29, 30, 43, 44, 46, 57, 59, 62],
    'filtered_out_neurons': [32, 33, 39]
}

results_fwhm_20 = {
    'iou_vs_epoch': np.array([
        [1, 0.2855, 0.1137, 0.1739, 0.2834, 0.001],
        [2, 0.1540, 0.3271, 0.1456, 0.3575, 0.001],
        [3, 0.1406, 0.3759, 0.1391, 0.3640, 0.001],
        [4, 0.1358, 0.3949, 0.1365, 0.3673, 0.001],
        [5, 0.1321, 0.4063, 0.1361, 0.3788, 0.001],
        [6, 0.1318, 0.4126, 0.1337, 0.3915, 0.001],
        [7, 0.1307, 0.4177, 0.1342, 0.3848, 0.001],
        [8, 0.1283, 0.4228, 0.1309, 0.3980, 0.001],
        [9, 0.1274, 0.4260, 0.1307, 0.3957, 0.001],
        [10, 0.1270, 0.4284, 0.1293, 0.4057, 0.001],
        [11, 0.1264, 0.4307, 0.1272, 0.4131, 0.001],
        [12, 0.1259, 0.4325, 0.1273, 0.4153, 0.001],
        [13, 0.1258, 0.4341, 0.1270, 0.4183, 0.001],
        [14, 0.1253, 0.4354, 0.1268, 0.4156, 0.001],
        [15, 0.1370, 0.4169, 0.1315, 0.4234, 0.001],
        [16, 0.1281, 0.4304, 0.1270, 0.4259, 0.001],
        [17, 0.1250, 0.4372, 0.1254, 0.4265, 0.001],
        [18, 0.1244, 0.4385, 0.1258, 0.4234, 0.001],
        [19, 0.1241, 0.4394, 0.1257, 0.4245, 0.001],
        [20, 0.1240, 0.4401, 0.1252, 0.4291, 0.001],
        [21, 0.1239, 0.4408, 0.1253, 0.4296, 0.001],
        [22, 0.1237, 0.4414, 0.1248, 0.4339, 0.001],
        [23, 0.1236, 0.4420, 0.1242, 0.4375, 0.001],
        [24, 0.1239, 0.4424, 0.1239, 0.4409, 0.001],
        [25, 0.1234, 0.4430, 0.1234, 0.4425, 0.001],
        [26, 0.1232, 0.4436, 0.1232, 0.4423, 0.001],
        [27, 0.1237, 0.4436, 0.1263, 0.4417, 0.001],
        [28, 0.1233, 0.4446, 0.1231, 0.4420, 0.001],
        [29, 0.1229, 0.4451, 0.1229, 0.4425, 0.001],
        [30, 0.1233, 0.4455, 0.1230, 0.4416, 0.001],
        [31, 0.1227, 0.4459, 0.1228, 0.4436, 0.001],
        [32, 0.1126, 0.4597, 0.1132, 0.4456, 0.0001],
        [33, 0.1122, 0.4612, 0.1129, 0.4473, 0.0001],
        [34, 0.1121, 0.4620, 0.1127, 0.4486, 0.0001],
        [35, 0.1119, 0.4626, 0.1125, 0.4495, 0.0001],
        [36, 0.1118, 0.4631, 0.1124, 0.4496, 0.0001],
        [37, 0.1117, 0.4635, 0.1123, 0.4498, 0.0001],
        [38, 0.1116, 0.4640, 0.1122, 0.4499, 0.0001],
        [39, 0.1115, 0.4643, 0.1122, 0.4502, 0.0001],
        [40, 0.1114, 0.4647, 0.1121, 0.4509, 0.0001],
        [41, 0.1114, 0.4650, 0.1120, 0.4510, 0.0001],
        [42, 0.1113, 0.4653, 0.1119, 0.4512, 0.0001],
        [43, 0.1112, 0.4656, 0.1118, 0.4517, 0.0001],
        [44, 0.1111, 0.4659, 0.1117, 0.4519, 0.0001],
        [45, 0.1111, 0.4662, 0.1117, 0.4523, 0.0001],
        [46, 0.1110, 0.4664, 0.1116, 0.4525, 0.0001],
        [47, 0.1109, 0.4666, 0.1115, 0.4527, 0.0001],
        [48, 0.1109, 0.4668, 0.1115, 0.4531, 0.0001],
        [49, 0.1108, 0.4670, 0.1114, 0.4532, 0.0001],
        [50, 0.1108, 0.4673, 0.1114, 0.4534, 0.0001],
    ]),
    'gain_vs_c_len': {
        'c_len': np.array([1, 3, 5, 7, 9]),
        'mean_gain': np.array([1.0000,1.0010,0.9988,0.9983,1.0059]),
        'std_gain': np.array( [0.1820,0.1378,0.1267,0.1259,0.1308])
    },
    'gain_vs_c_len_11x11': {
        'c_len': np.array([1, 3, 5, 7, 9]),
        'mean_gain': np.array([1.0000,1.0333,1.0504,1.0519,1.0527]),
        'std_gain': np.array([0.0977,0.1008,0.1046,0.1052,0.0958])
    },
    'gain_vs_spacing': {
        'spacing': np.array([1.00, 1.14, 1.29, 1.43, 1.57, 1.71, 1.86, 2.00]),
        'mean_gain': np.array([0.9931,1.0338,1.0810,1.1209,1.1424,1.1540,1.1636,1.1739]),
        'std_gain': np.array([0.1243,0.1354,0.1505,0.1521,0.1467,0.1457,0.1178,0.1224])
    },
    'no_opt_stim_neurons': [11, 13, 23, 28, 29, 33, 34, 43, 52, 59, 62],
    'filtered_out_neurons': [11, 36, 40, 48]
}


# results_fwhm_20 = {
#     'iou_vs_epoch': np.array([
#         [0, 0.2746, 0.0941, 0.1311, 0.3437, 0.001],
#         [1, 0.1175, 0.4083, 0.1127, 0.4594, 0.001],
#         [2, 0.1065, 0.4543, 0.1061, 0.4774, 0.001],
#         [3, 0.1020, 0.4762, 0.1042, 0.4828, 0.001],
#         [4, 0.0986, 0.4896, 0.0988, 0.5022, 0.001],
#         [5, 0.0969, 0.4987, 0.0995, 0.5096, 0.001],
#         [6, 0.0955, 0.5068, 0.0973, 0.5136, 0.001],
#         [7, 0.0937, 0.5134, 0.0946, 0.5181, 0.001],
#         [8, 0.0927, 0.5181, 0.0938, 0.5231, 0.001],
#         [9, 0.0911, 0.5225, 0.0967, 0.5275, 0.001],
#         [10, 0.0923, 0.5271, 0.0922, 0.5360, 0.001],
#         [11, 0.0900, 0.5306, 0.0913, 0.5383, 0.001],
#         [12, 0.0887, 0.5339, 0.0899, 0.5372, 0.001],
#         [13, 0.0879, 0.5370, 0.0895, 0.5377, 0.001],
#         [14, 0.0876, 0.5396, 0.0899, 0.5431, 0.001],
#         [15, 0.0877, 0.5412, 0.0895, 0.5427, 0.001],
#         [16, 0.0866, 0.5441, 0.0898, 0.5416, 0.001],
#         [17, 0.0862, 0.5461, 0.0887, 0.5441, 0.001],
#         [18, 0.0860, 0.5478, 0.0885, 0.5444, 0.001],
#         [19, 0.0859, 0.5494, 0.0881, 0.5466, 0.001],
#         [20, 0.0858, 0.5511, 0.0884, 0.5508, 0.001],
#         [21, 0.0853, 0.5525, 0.0869, 0.5497, 0.001],
#         [22, 0.0848, 0.5542, 0.0869, 0.5492, 0.001],
#         [23, 0.0845, 0.5557, 0.0862, 0.5516, 0.001],
#         [24, 0.0843, 0.5568, 0.0854, 0.5570, 0.001],
#         [25, 0.0842, 0.5576, 0.0858, 0.5554, 0.001],
#         [26, 0.0839, 0.5589, 0.0852, 0.5565, 0.001],
#         [27, 0.0837, 0.5600, 0.0849, 0.5585, 0.001],
#         [28, 0.0840, 0.5605, 0.0843, 0.5599, 0.001],
#         [29, 0.0834, 0.5616, 0.0842, 0.5627, 0.001],
#         [30, 0.0832, 0.5625, 0.0845, 0.5637, 0.001],
#         [31, 0.0741, 0.5795, 0.0734, 0.5818, 0.0001],
#         [32, 0.0737, 0.5807, 0.0736, 0.5824, 0.0001],
#         [33, 0.0736, 0.5812, 0.0736, 0.5832, 0.0001],
#         [34, 0.0734, 0.5818, 0.0735, 0.5839, 0.0001],
#         [35, 0.0733, 0.5822, 0.0734, 0.5846, 0.0001],
#         [36, 0.0732, 0.5827, 0.0733, 0.5851, 0.0001],
#         [37, 0.0731, 0.5831, 0.0732, 0.5855, 0.0001],
#         [38, 0.0730, 0.5834, 0.0731, 0.5861, 0.0001],
#         [39, 0.0729, 0.5838, 0.0730, 0.5865, 0.0001],
#         [40, 0.0729, 0.5841, 0.0729, 0.5868, 0.0001],
#         [41, 0.0728, 0.5844, 0.0728, 0.5871, 0.0001],
#         [42, 0.0727, 0.5847, 0.0727, 0.5874, 0.0001],
#         [43, 0.0726, 0.5850, 0.0726, 0.5878, 0.0001],
#         [44, 0.0726, 0.5852, 0.0725, 0.5882, 0.0001],
#         [45, 0.0725, 0.5855, 0.0725, 0.5885, 0.0001],
#         [46, 0.0725, 0.5858, 0.0724, 0.5887, 0.0001],
#         [47, 0.0724, 0.5860, 0.0723, 0.5890, 0.0001],
#         [48, 0.0723, 0.5862, 0.0723, 0.5893, 0.0001],
#         [49, 0.0723, 0.5865, 0.0722, 0.5895, 0.0001],
#     ]),
#     'gain_vs_c_len': {
#         'c_len': np.array([1, 3, 5, 7, 9]),
#         'mean_gain': np.array([1.0000, 1.0223, 1.0216, 1.0413, 1.0296]),
#         'std_gain': np.array([0.2973, 0.2158, 0.2313, 0.2743, 0.2827])
#     },
#     'gain_vs_spacing': {
#         'spacing': np.array([1.00, 1.14, 1.29, 1.43, 1.57, 1.71, 1.86, 2.00]),
#         'mean_gain': np.array([1.0152, 1.0437, 1.0421, 1.0407, 1.0484, 1.0546, 1.0601, 1.0739]),
#         'std_gain': np.array([0.1914, 0.2112, 0.1663, 0.1910, 0.1469, 0.1420, 0.1090, 0.1143])
#     },
#     'no_opt_stim_neurons': [2, 3, 4, 8, 9, 10, 11, 15, 16, 17,
#                             22, 24, 29, 30, 32, 33, 34, 36, 40, 43,
#                             44, 47, 48, 49, 52, 53, 54, 55, 57, 60,
#                             62, 63]
# }
#
# results_fwhm_30 = {
#     'iou_vs_epoch': np.array([
#         [0, 0.2579, 0.0913, 0.1534, 0.2212, 0.001],
#         [1, 0.1417, 0.2856, 0.1364, 0.3005, 0.001],
#         [2, 0.1299, 0.3432, 0.1276, 0.3712, 0.001],
#         [3, 0.1217, 0.3767, 0.1183, 0.3913, 0.001],
#         [4, 0.1178, 0.4016, 0.1142, 0.4045, 0.001],
#         [5, 0.1145, 0.4163, 0.1119, 0.4207, 0.001],
#         [6, 0.1217, 0.4097, 0.1122, 0.4223, 0.001],
#         [7, 0.1110, 0.4324, 0.1074, 0.4373, 0.001],
#         [8, 0.1077, 0.4419, 0.1050, 0.4546, 0.001],
#         [9, 0.1066, 0.4476, 0.1047, 0.4599, 0.001],
#         [10, 0.1066, 0.4515, 0.1038, 0.4623, 0.001],
#         [11, 0.1049, 0.4556, 0.1030, 0.4580, 0.001],
#         [12, 0.1042, 0.4585, 0.1026, 0.4595, 0.001],
#         [13, 0.1038, 0.4610, 0.1023, 0.4609, 0.001],
#         [14, 0.1038, 0.4634, 0.1051, 0.4589, 0.001],
#         [15, 0.1030, 0.4655, 0.1050, 0.4583, 0.001],
#         [16, 0.1026, 0.4670, 0.1016, 0.4623, 0.001],
#         [17, 0.1029, 0.4683, 0.1016, 0.4661, 0.001],
#         [18, 0.1022, 0.4698, 0.1012, 0.4624, 0.001],
#         [19, 0.1019, 0.4711, 0.1012, 0.4641, 0.001],
#         [20, 0.1019, 0.4725, 0.1012, 0.4626, 0.001],
#         [21, 0.1015, 0.4734, 0.1009, 0.4656, 0.001],
#         [22, 0.1013, 0.4746, 0.1006, 0.4697, 0.001],
#         [23, 0.1011, 0.4757, 0.1024, 0.4699, 0.001],
#         [24, 0.1008, 0.4769, 0.1006, 0.4688, 0.001],
#         [25, 0.1008, 0.4776, 0.1012, 0.4730, 0.001],
#         [26, 0.1007, 0.4786, 0.1000, 0.4772, 0.001],
#         [27, 0.1009, 0.4790, 0.1011, 0.4737, 0.001],
#         [28, 0.1005, 0.4801, 0.0996, 0.4774, 0.001],
#         [29, 0.1001, 0.4808, 0.0999, 0.4738, 0.001],
#         [30, 0.0999, 0.4816, 0.0995, 0.4767, 0.001],
#         [31, 0.0901, 0.4987, 0.0892, 0.5004, 0.0001],
#         [32, 0.0896, 0.4999, 0.0890, 0.5003, 0.0001],
#         [33, 0.0894, 0.5007, 0.0889, 0.5006, 0.0001],
#         [34, 0.0893, 0.5013, 0.0888, 0.5012, 0.0001],
#         [35, 0.0892, 0.5018, 0.0886, 0.5015, 0.0001],
#         [36, 0.0891, 0.5023, 0.0885, 0.5020, 0.0001],
#         [37, 0.0890, 0.5027, 0.0885, 0.5020, 0.0001],
#         [38, 0.0889, 0.5032, 0.0884, 0.5024, 0.0001],
#         [39, 0.0888, 0.5036, 0.0883, 0.5030, 0.0001],
#         [40, 0.0887, 0.5040, 0.0882, 0.5046, 0.0001],
#         [41, 0.0886, 0.5043, 0.0881, 0.5043, 0.0001],
#         [42, 0.0885, 0.5046, 0.0881, 0.5046, 0.0001],
#         [43, 0.0884, 0.5049, 0.0881, 0.5046, 0.0001],
#         [44, 0.0884, 0.5052, 0.0880, 0.5052, 0.0001],
#         [45, 0.0883, 0.5054, 0.0879, 0.5052, 0.0001],
#         [46, 0.0882, 0.5057, 0.0878, 0.5062, 0.0001],
#         [47, 0.0882, 0.5059, 0.0878, 0.5061, 0.0001],
#         [48, 0.0881, 0.5062, 0.0878, 0.5068, 0.0001],
#         [49, 0.0881, 0.5064, 0.0877, 0.5071, 0.0001],
#     ]),
#     'gain_vs_c_len': {
#         'c_len': np.array([1, 3, 5, 7, 9]),
#         'mean_gain': np.array([1.0000, 1.0031, 1.0043, 1.0060, 1.0075]),
#         'std_gain': np.array([0.1737, 0.0797, 0.0791, 0.0743, 0.0807])
#     },
#     'gain_vs_spacing': {
#         'spacing': np.array([1.00, 1.14, 1.29, 1.43, 1.57, 1.71, 1.86, 2.00]),
#         'mean_gain': np.array([1.0044, 1.0059, 1.0383, 1.0275, 1.0344, 1.0283, 1.0235, 1.0143]),
#         'std_gain': np.array([0.0724, 0.0629, 0.0668, 0.0645, 0.0576, 0.0671, 0.0627, 0.0595])
#     },
#     'no_opt_stim_neurons': [0, 1, 2, 5, 6, 10, 11, 14, 15, 20,
#                             21, 23, 25, 26, 28, 29, 30, 32, 34, 36,
#                             38, 40, 41, 42, 43, 44, 45, 46, 49, 50,
#                             52, 53, 54, 57, 61, 62, 63]
#
# }


def plot_iou_results(results_dict, ax=None, label='', c='k'):
    if ax is None:
        f, ax = plt.subplots()

    ax.plot(
        results_dict['iou_vs_epoch'][:, 0],
        results_dict['iou_vs_epoch'][:, 2],
        label='train_' + label,
        linestyle='--',
        color=c
    )

    ax.plot(
        results_dict['iou_vs_epoch'][:, 0],
        results_dict['iou_vs_epoch'][:, 4],
        label='val_' + label,
        linestyle='-',
        color=c
    )


def plot_gain_vs_contour_len(results_dict, ax=None, label='', c='k'):
    if ax is None:
        f, ax = plt.subplots()

    ax.errorbar(
        results_dict['gain_vs_c_len']['c_len'],
        results_dict['gain_vs_c_len']['mean_gain'],
        results_dict['gain_vs_c_len']['std_gain'],
        label=label,
        linestyle='--',
        color=c
    )


def plot_gain_vs_contour_len_11x11(results_dict, ax=None, label='', c='k'):
    if ax is None:
        f, ax = plt.subplots()

    ax.errorbar(
        results_dict['gain_vs_c_len_11x11']['c_len'],
        results_dict['gain_vs_c_len_11x11']['mean_gain'],
        results_dict['gain_vs_c_len_11x11']['std_gain'],
        label=label,
        linestyle='--',
        color=c
    )


def plot_gain_vs_fragment_spacing(results_dict, ax=None, label='', c='k'):
    if ax is None:
        f, ax = plt.subplots()

    ax.errorbar(
        results_dict['gain_vs_spacing']['spacing'],
        results_dict['gain_vs_spacing']['mean_gain'],
        results_dict['gain_vs_spacing']['std_gain'],
        label=label,
        linestyle='--',
        color=c
    )


if __name__ == "__main__":
    plt.ion()

    _, axis = plt.subplots()

    plot_iou_results(results_fwhm_0, ax=axis, label='no_bubbles', c='b')
    plot_iou_results(results_fwhm_5, ax=axis, label='fwhm_5', c='r')
    plot_iou_results(results_fwhm_10, ax=axis, label='fwhm_10', c='g')
    plot_iou_results(results_fwhm_20, ax=axis, label='fwhm_20', c='m')
    # plot_iou_results(results_fwhm_30, ax=axis, label='fwhm_30', c='m')

    plt.legend()
    plt.title("IoU vs Epoch")
    plt.xlabel("Epoch")
    plt.ylabel("IoU")
    plt.grid()

    # Contour Length
    _, axis = plt.subplots()

    plot_gain_vs_contour_len(results_fwhm_0, ax=axis, label='no_bubbles', c='b')
    plot_gain_vs_contour_len(results_fwhm_5, ax=axis, label='fwhm_5', c='r')
    plot_gain_vs_contour_len(results_fwhm_10, ax=axis, label='fwhm_10', c='g')
    plot_gain_vs_contour_len(results_fwhm_20, ax=axis, label='fwhm_20', c='m')
    # plot_gain_vs_contour_len(results_fwhm_30, ax=axis, label='fwhm_30', c='m')

    plt.legend()
    plt.title("Contour Gain vs Length")
    plt.xlabel("Contour Length")
    plt.ylabel("Gain")
    plt.grid()
    axis.set_ylim(bottom=0)

    # Contour Length 11x11
    _, axis = plt.subplots()

    plot_gain_vs_contour_len_11x11(
        results_fwhm_0, ax=axis, label='no_bubbles', c='b')
    plot_gain_vs_contour_len_11x11(
        results_fwhm_5, ax=axis, label='fwhm_5', c='r')
    plot_gain_vs_contour_len_11x11(
        results_fwhm_10, ax=axis, label='fwhm_10', c='g')
    plot_gain_vs_contour_len_11x11(
        results_fwhm_20, ax=axis, label='fwhm_10', c='m')

    plt.legend()
    plt.title("Contour Gain vs Length - Frag size 11x11")
    plt.xlabel("Contour Length")
    plt.ylabel("Gain")
    plt.grid()
    axis.set_ylim(bottom=0)

    # Fragment Spacing
    _, axis = plt.subplots()

    plot_gain_vs_fragment_spacing(results_fwhm_0, ax=axis, label='no_bubbles', c='b')
    plot_gain_vs_fragment_spacing(results_fwhm_5, ax=axis, label='fwhm_5', c='r')
    plot_gain_vs_fragment_spacing(results_fwhm_10, ax=axis, label='fwhm_10', c='g')
    plot_gain_vs_fragment_spacing(results_fwhm_20, ax=axis, label='fwhm_20', c='m')
    # plot_gain_vs_fragment_spacing(results_fwhm_30, ax=axis, label='fwhm_30', c='g')

    plt.legend()
    plt.title("Contour Gain vs Fragment Spacing")
    plt.xlabel("Fragment Spacing (RCD)")
    plt.ylabel("Gain")
    plt.grid()
    axis.set_ylim(bottom=0)

    # -----------------------------------------------------------------------------------
    import pdb

    pdb.set_trace()
