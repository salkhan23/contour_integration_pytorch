import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

mpl.rcParams.update({
    'font.size': 18, 'lines.linewidth': 3,
    'lines.markersize': 10,
    'lines.markeredgewidth': 3
})

# -------------------------------------------------------------------------------------------------
# Neurophysiological Data
# -------------------------------------------------------------------------------------------------
monkey_ma = {
    'c_len': np.array([1, 3, 5, 7, 9]),
    'c_len_results': np.array([1.05, 1.41, 1.85, 2.09, 2.26]),
    'rcd': np.array([1.0, 1.2, 1.4, 1.6, 1.9]),
    'spacing_results': np.array([1.97, 1.69, 1.29, 1.17, 1.16])
}

monkey_mb = {
    'c_len': np.array([1, 3, 5, 7, 9]),
    'c_len_results': np.array([1.05, 1.69, 2.14, 2.41, 2.72]),
    'rcd': np.array([1.0, 1.2, 1.4, 1.6, 1.9]),
    'spacing_results': np.array([2.24, 2.19, 1.7, 1.23, 0.98])
}

# Weighted avg results (MA =30 neurons, MB=24 neurons)
neuro_c_len_results = (30 / 54. * monkey_ma['c_len_results']) + (24 / 50. * monkey_mb['c_len_results'])
neuro_space_results = (30 / 54. * monkey_ma['spacing_results']) + (24 / 50. * monkey_mb['spacing_results'])

# -------------------------------------------------------------------------------------------------
# Simulation Results
# -------------------------------------------------------------------------------------------------

# Control -----------------------------------------------------------------------------------------
# ./results/new_model_resnet_based/New - Most Recent/
# ContourIntegrationResnet50_ControlMatchParametersLayer_run_3_20200926_115550
control_run_1 = {
    'train_acc': 0.7102,
    'validation_acc': 0.7278,
    'no_optimal_stimulus_neurons': np.array([
         1,  2,  3,  4,  6,  8, 10, 11, 12, 13,
        14, 15, 16, 18, 19, 20, 22, 24, 26, 27,
        28, 29, 30, 32, 33, 35, 37, 38, 39, 40,
        42, 43, 46, 49, 50, 51, 52, 53, 54, 55,
        56, 59, 61, 62, 63]),
    'c_len_iou_vs_len_test': np.array([0.9779, 0.2256, 0.7876, 0.8269, 0.8543]),
    'c_len_iou_vs_len_validation': np.array([0.961, 0.611, 0.717, 0.740, 0.743]),
    'c_len_noise_resp': np.array([
        0.006, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ,
        0.   , 0.   , 0.026, 0.003, 0.   , 0.   , 0.012, 0.   , 0.   ,
       0.   ]),
    'c_len_mean_gains': np.array([
        [9.982e-01, 8.867e-01, 1.036e+01, 1.958e+01, 1.907e+01],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 7.932e+01, 5.127e+02, 7.662e+02, 1.787e+02],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 2.011e+01],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 2.512e+03, 7.562e+03, 9.497e+03, 9.335e+03],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 2.180e+02, 1.020e+03, 1.635e+03, 2.505e+03],
        [9.996e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.965e-01, 0.000e+00, 2.624e-01, 4.924e-01, 1.052e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.991e-01, 2.578e+01, 2.665e+01, 2.920e+01, 3.099e+01],
        [0.000e+00, 1.154e+02, 9.860e+02, 5.844e+02, 9.645e+02],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00]]),
    'spacing_noise_resp': np.array([
        0.0055, 0.0000, 0.0000, 0.0000, 0.0064, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0021, 0.0075, 0.0134, 0.0000, 0.0000, 0.0109, 0.0000, 0.0000, 0.0008, ]),
    'spacing_mean_gains': np.array([
        [18.8893, 71.9665, 63.1547, 26.6041, 5.5154, 12.9115, 42.7667, 59.7363],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 137.6247, 72.9031, 623.2192],
        [0.0000, 0.0000, 0.0000, 0.0000, 155.7641, 280.9805, 3860.7419, 20707.7347],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 648.9137],
        [0.0000, 0.0000, 0.0000, 0.4571, 0.2475, 3.3525, 6.2148, 14.0709],
        [849.0488, 15075.2083, 30961.9136, 46185.3407, 47547.2676, 47623.3493, 39056.4811, 46810.9109],
        [0.0000, 342.8955, 1141.3872, 11553.6938, 7914.1451, 5231.3330, 5786.4025, 11562.6612],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 788.7446, 0.0000, 0.0000],
        [10301.1870, 8370.3603, 1673.9035, 1056.5312, 1930.2379, 1670.7341, 1494.7849, 4939.6991],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 43.5807, 66.8004],
        [4.7512, 8.2777, 31.3677, 41.6225, 42.2069, 64.3483, 77.2484, 81.4297],
        [0.0000, 0.0000, 0.0000, 0.1511, 8.5466, 7.4464, 6.4206, 6.8669],
        [0.0159, 0.0000, 0.0063, 0.8183, 1.6284, 1.3931, 2.3387, 1.1746],
        [0.0000, 0.0000, 0.0000, 0.0000, 3882.3660, 6742.5792, 23346.0783, 38316.3138],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 222.3090],
        [30.1550, 16.0246, 3.1816, 0.2519, 0.5598, 0.4892, 1.2913, 1.7103],
        [660.6771, 426.3972, 1487.3780, 725.3130, 200.7205, 380.9683, 890.5923, 1656.6606],
        [0.0000, 0.0000, 0.0000, 356.5696, 3355.6575, 2115.8969, 1983.2827, 1001.6341],
        [0.0000, 0.0000, 0.0000, 0.0000, 1.2995, 11.7326, 130.7769, 311.7770]]),
}

# ./results/new_model_resnet_based/New - Most Recent/
# ContourIntegrationResnet50_ControlMatchParametersLayer_run_2_20200928_113617
control_run_2 = {
    'train_acc': 0.7082,
    'validation_acc': 0.7233,
    'no_optimal_stimulus_neurons': np.array([
         0,  1,  4,  6,  7,  8,  9, 10, 11, 12,
        15, 16, 17, 18, 19, 22, 23, 24, 25, 28,
        29, 30, 31, 33, 34, 35, 36, 37, 38, 39,
        40, 41, 42, 43, 44, 45, 46, 48, 49, 51,
        52, 53, 54, 55, 57, 58, 60, 62]),
    'c_len_iou_vs_len_test': np.array([0.9775, 0.4752, 0.9091, 0.9140, 0.9097]),
    'c_len_iou_vs_len_validation': np.array([0.952, 0.612, 0.726, 0.749, 0.751]),
    'c_len_noise_resp': np.array([
        0.006, 0., 0., 0., 0., 0., 0., 0., 0.037, 0., 0.001, 0., 0.008, 0.04, 0., 0.027]),
    'c_len_mean_gains': np.array([
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.995e-01, 2.077e-01, 0.000e+00, 0.000e+00, 8.430e-02],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.997e-01, 2.949e-02, 0.000e+00, 0.000e+00, 4.288e-02],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.990e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.992e-01, 2.437e+00, 1.720e+00, 3.187e-01, 1.575e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 1.032e+04, 1.655e+04, 1.859e+04, 1.557e+04],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00]]),
    'spacing_noise_resp': np.array([
        0.0056, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0365, 0.0000,
        0.0009, 0.0000, 0.0090, 0.0508, 0.0000, 0.0146, ]),
    'spacing_mean_gains': np.array([
        [0.0000, 0.0000, 0.0000, 0.0189, 0.2795, 1.7154, 4.0466, 1.8272],
        [0.0000, 0.0000, 0.0000, 428.5500, 1675.5839, 6344.1958, 16565.9683, 24812.5650],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 212.1145, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 3.1281],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 74.2008],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0232, 0.0108, 0.0000, 0.0000, 0.0128, 0.0000, 0.1131, 0.3381],
        [0.0000, 3660.5587, 2229.0076, 2097.1554, 1160.4519, 3793.3932, 15548.5794, 21201.3332],
        [0.0000, 0.0000, 0.0000, 0.9786, 24.2767, 62.8442, 67.2305, 48.7180],
        [36.2024, 0.0000, 17.2960, 61.2693, 0.0000, 111.1080, 83.0542, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [6.0107, 6.3013, 5.7646, 4.7691, 4.0663, 4.8335, 5.8156, 5.5444],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [24.5513, 23.3883, 17.1379, 13.1244, 4.1320, 3.6638, 2.7367, 3.0777]]),
}

# ./results/new_model_resnet_based/New - Most Recent/
# ContourIntegrationResnet50_ControlMatchParametersLayer_run_3_20200926_115550
control_run_3 = {
    'train_acc': 0.7129,
    'validation_acc': 0.7306,
    'no_optimal_stimulus_neurons': np.array([
         0,  1,  3,  5,  8, 10, 11, 12, 13, 14,
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31, 32, 34, 35,
        37, 38, 39, 40, 41, 43, 44, 47, 48, 49,
        50, 51, 52, 53, 54, 55, 56, 57, 59, 60,
        61, 62, 63]),
    'c_len_iou_vs_len_test': np.array([0.9655, 0.3896, 0.8353, 0.8921, 0.8870]),
    'c_len_iou_vs_len_validation': np.array([0.935, 0.629, 0.724, 0.755, 0.761]),
    'c_len_noise_resp': np.array([0.   , 0.   , 0.016, 0.009, 0.   , 0.   , 0.   , 0.   , 0.001, 0.   , 0.023]),
    'c_len_mean_gains': np.array([
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.529e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.994e-01, 5.007e-03, 1.132e+00, 7.917e-01, 3.983e-01],
        [9.989e-01, 0.000e+00, 7.258e-01, 1.911e-01, 0.000e+00],
        [9.237e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 5.837e+01, 2.138e+02, 2.347e+02, 1.128e+02],
        [9.929e-01, 1.735e+01, 7.227e+01, 9.028e+01, 9.217e+01],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.996e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00]]),
    'spacing_noise_resp': np.array([
        0.0000, 0.0000, 0.0206, 0.0250, 0.0027, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0307]),
    'spacing_mean_gains': np.array([
        [0.0000, 0.0000, 498.9996, 2033.1490, 8166.7994, 8924.6373, 3777.2517, 2588.3449],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 320.5112],
        [0.2947, 0.0000, 0.5065, 2.0988, 3.4011, 3.1080, 3.6992, 3.9110],
        [0.2535, 1.0541, 0.3880, 0.2796, 0.0311, 0.1512, 0.5491, 1.1727],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 610.8384, 3145.4692, 13312.7907],
        [569.6304, 0.0000, 0.0000, 0.0000, 0.0000, 150.2889, 0.0000, 0.0000],
        [14904.6912, 26079.9079, 13734.9162, 6015.4031, 3860.7724, 3530.3847, 9998.5288, 18728.2013],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.3380, 0.0220, 0.1853, 0.3923, 1.2770, 2.5879, 5.7904]]),
}

# Model -----------------------------------------------------------------------------------------
# ./results/new_model_resnet_based/New - Most Recent/
# ContourIntegrationResnet50_CurrentSubtractInhibitLayer_run_1_20200924_183734
model_run_1 = {
    'train_acc': 0.8327,
    'validation_acc': 0.8063,
    'no_optimal_stimulus_neurons': np.array([6, 13, 23, 31, 47]),
    'c_len_iou_vs_len_test': np.array([0.9678, 0.5144, 0.8857, 0.9224, 0.9141]),
    'c_len_iou_vs_len_validation': np.array([0.947, 0.684, 0.821, 0.868, 0.874]),
    'c_len_noise_resp': np.array([
        1.176e-02, 1.850e-02, 0.000e+00, 1.472e-01, 4.269e-01, 1.213e-01,
        2.183e-01, 0.000e+00, 2.415e-02, 5.380e-01, 9.284e-01, 0.000e+00,
        4.835e+00, 1.328e+00, 1.399e-01, 4.413e-02, 1.404e-01, 1.040e+00,
        0.000e+00, 6.361e-01, 1.508e+00, 4.722e-01, 0.000e+00, 1.623e+00,
        2.017e-01, 2.441e-02, 2.159e-01, 5.349e-02, 4.357e-01, 1.397e-01,
        1.548e+00, 1.277e-01, 1.079e+00, 8.218e-01, 3.142e+00, 0.000e+00,
        0.000e+00, 3.270e+00, 5.982e-01, 5.326e-01, 5.170e-01, 2.675e-03,
        6.364e-01, 5.180e-02, 1.527e+00, 9.962e-02, 1.064e+00, 3.614e-02,
        3.002e-02, 8.925e-01, 1.569e+00, 2.355e-01, 9.282e-04, 7.687e-02,
        0.000e+00, 1.701e-01, 4.282e-02, 1.568e-02, 0.000e+00]),
    'c_len_mean_gains': np.array([
        [9.992e-01, 8.916e+00, 6.862e+00, 9.524e+00, 1.015e+01],
        [9.995e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.999e-01, 2.010e+00, 2.989e+00, 2.973e+00, 3.335e+00],
        [1.000e+00, 1.454e+00, 1.543e+00, 1.591e+00, 1.564e+00],
        [9.999e-01, 9.548e+00, 1.505e+01, 1.874e+01, 1.963e+01],
        [1.000e+00, 7.282e-01, 6.799e-01, 6.516e-01, 6.841e-01],
        [0.000e+00, 9.348e+04, 2.380e+05, 2.757e+05, 2.773e+05],
        [9.996e-01, 4.165e+00, 1.087e+01, 9.245e+00, 8.966e+00],
        [1.000e+00, 1.884e+00, 3.085e+00, 3.793e+00, 3.867e+00],
        [1.000e+00, 6.343e-01, 5.061e-01, 4.839e-01, 4.852e-01],
        [0.000e+00, 1.264e+02, 3.306e+02, 4.850e+02, 5.070e+02],
        [1.000e+00, 9.785e-01, 9.760e-01, 9.790e-01, 9.770e-01],
        [1.000e+00, 7.257e-01, 5.818e-01, 6.081e-01, 5.692e-01],
        [9.999e-01, 1.313e+00, 1.701e+00, 2.262e+00, 2.236e+00],
        [9.998e-01, 8.407e+00, 1.233e+01, 1.450e+01, 1.463e+01],
        [9.999e-01, 5.228e-01, 4.527e-01, 4.292e-01, 3.627e-01],
        [1.000e+00, 9.941e-01, 9.875e-01, 9.849e-01, 9.756e-01],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [1.000e+00, 3.929e+00, 5.735e+00, 6.152e+00, 6.193e+00],
        [1.000e+00, 1.051e+00, 9.722e-01, 9.727e-01, 9.622e-01],
        [1.000e+00, 7.514e-01, 4.595e-01, 3.814e-01, 3.515e-01],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [1.000e+00, 9.911e-01, 9.948e-01, 9.903e-01, 9.979e-01],
        [1.000e+00, 1.194e+01, 2.879e+01, 3.261e+01, 3.355e+01],
        [9.996e-01, 9.913e-01, 9.283e-01, 1.002e+00, 9.733e-01],
        [1.000e+00, 1.021e+00, 7.032e-01, 7.006e-01, 6.991e-01],
        [9.998e-01, 9.996e-01, 9.997e-01, 1.000e+00, 1.000e+00],
        [1.000e+00, 9.144e-01, 8.222e-01, 8.222e-01, 8.308e-01],
        [9.999e-01, 2.350e+00, 2.039e+00, 1.602e+00, 1.924e+00],
        [1.000e+00, 7.102e-01, 6.305e-01, 5.920e-01, 5.719e-01],
        [9.999e-01, 8.932e-04, 9.247e-05, 2.666e-03, 0.000e+00],
        [1.000e+00, 1.009e+00, 1.086e+00, 1.082e+00, 1.077e+00],
        [1.000e+00, 7.420e-01, 6.914e-01, 7.120e-01, 6.978e-01],
        [1.000e+00, 1.265e+00, 1.442e+00, 1.488e+00, 1.490e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [1.000e+00, 8.714e-01, 8.784e-01, 8.467e-01, 8.500e-01],
        [1.000e+00, 1.000e+00, 1.000e+00, 1.000e+00, 1.000e+00],
        [1.000e+00, 1.035e+00, 1.012e+00, 1.000e+00, 1.037e+00],
        [1.000e+00, 1.016e+00, 1.047e+00, 1.027e+00, 1.014e+00],
        [9.963e-01, 5.767e+02, 1.079e+03, 1.179e+03, 1.225e+03],
        [1.000e+00, 5.364e-01, 4.502e-01, 4.108e-01, 4.260e-01],
        [9.998e-01, 1.417e+00, 2.348e+00, 2.202e+00, 2.763e+00],
        [1.000e+00, 1.281e+00, 1.385e+00, 1.389e+00, 1.414e+00],
        [9.999e-01, 8.889e+00, 1.128e+01, 1.228e+01, 1.424e+01],
        [1.000e+00, 9.319e-01, 9.334e-01, 9.293e-01, 9.295e-01],
        [9.997e-01, 1.036e+01, 1.495e+01, 1.604e+01, 1.601e+01],
        [9.997e-01, 6.744e+01, 1.295e+02, 1.465e+02, 1.474e+02],
        [1.000e+00, 1.727e+00, 2.193e+00, 2.229e+00, 2.154e+00],
        [1.000e+00, 1.956e+00, 2.670e+00, 2.908e+00, 2.987e+00],
        [1.000e+00, 9.712e-01, 9.704e-01, 9.689e-01, 9.706e-01],
        [9.893e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.999e-01, 1.409e+00, 3.466e+00, 4.504e+00, 4.705e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.999e-01, 2.772e-03, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.998e-01, 2.503e+00, 2.420e+00, 2.527e+00, 2.626e+00],
        [9.994e-01, 7.628e-01, 2.440e+00, 6.044e+00, 6.907e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00]]),
    'spacing_noise_resp': np.array([
        0.0154, 0.0191, 0.0000, 0.1603, 0.4325, 0.1436,
        0.2237, 0.0000, 0.0218, 0.5299, 0.9151, 0.0000,
        4.8331, 1.3752, 0.1386, 0.0515, 0.1440, 1.0519,
        0.0000, 0.6500, 1.5008, 0.4693, 0.0042, 1.6179,
        0.2130, 0.0231, 0.2244, 0.0535, 0.4374, 0.1153,
        1.5910, 0.1363, 1.0890, 0.8332, 3.1419, 0.0020,
        0.0000, 3.2878, 0.5982, 0.5357, 0.5116, 0.0051,
        0.6418, 0.0468, 1.5363, 0.1010, 1.0804, 0.0315,
        0.0759, 0.9408, 1.5566, 0.2357, 0.0009, 0.0686,
        0.0000, 0.1642, 0.0527, 0.0114, 0.0000, ]),
    'spacing_mean_gains': np.array([
        [8.1408, 7.5954, 10.6376, 11.9328, 7.6875, 11.1653, 10.8516, 13.8989],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.1943, 3.7039, 3.1499, 5.4941],
        [0.0000, 0.0000, 0.0000, 11.2133, 51.9038, 1824.2180, 5489.3001, 6764.5835],
        [3.1400, 4.5142, 3.4446, 1.9501, 1.0264, 0.8418, 0.7354, 0.8352],
        [1.5611, 1.8439, 1.7984, 1.5223, 1.2381, 1.1046, 1.0430, 0.9188],
        [15.3354, 16.7694, 15.0555, 10.2397, 7.7247, 4.5866, 2.4947, 1.1113],
        [0.6757, 0.7602, 0.8411, 0.9148, 1.0246, 1.1270, 1.2033, 1.3120],
        [282816.1137, 331004.8950, 299762.1849, 341854.9218, 202954.1512, 159888.3103, 99119.1443, 64669.0531],
        [8.5229, 18.5818, 9.0303, 4.6866, 3.8102, 1.5504, 1.2439, 1.2677],
        [3.8602, 3.3816, 2.1651, 1.4866, 1.0879, 1.1507, 1.1889, 1.2022],
        [0.4963, 0.4903, 0.4953, 0.5025, 0.5270, 0.5518, 0.5619, 0.5893],
        [349.0968, 0.0000, 0.0000, 10.4313, 3.9533, 332.7704, 238.0230, 734.6719],
        [0.9780, 0.9764, 0.9750, 0.9756, 0.9736, 0.9818, 0.9812, 0.9867],
        [0.5372, 0.0016, 0.0490, 0.1444, 0.1911, 0.2245, 0.2797, 0.3375],
        [2.3002, 3.5788, 3.5567, 2.6414, 2.2248, 1.6179, 1.4250, 1.1422],
        [12.9809, 16.7116, 19.8322, 25.1478, 18.4196, 18.0856, 16.8743, 15.4319],
        [0.4151, 0.6293, 0.7553, 0.8387, 0.9905, 1.1484, 1.2440, 1.3484],
        [0.9698, 1.0524, 1.1170, 1.1663, 1.1946, 1.2283, 1.2393, 1.2618],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1520.3654],
        [6.0830, 6.1653, 5.4968, 5.2322, 4.3854, 3.9488, 3.6044, 3.2950],
        [0.9968, 0.7004, 0.5977, 0.6623, 0.6638, 0.7104, 0.7249, 0.7433],
        [0.3739, 0.0873, 0.0518, 0.0534, 0.0714, 0.2196, 0.2813, 0.3491],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9989, 0.9776, 0.9871, 0.9723, 0.9767, 0.9698, 0.9668, 0.9637],
        [29.9015, 26.0811, 25.4098, 16.0569, 13.1703, 6.8674, 5.6739, 4.4018],
        [1.0221, 1.0071, 1.0553, 1.1325, 1.1568, 1.1361, 1.1167, 1.1695],
        [0.6787, 0.6732, 0.8119, 0.8073, 0.8128, 0.8682, 0.6402, 0.5771],
        [1.0001, 1.0003, 0.9993, 0.9847, 0.9621, 0.9485, 0.9365, 0.9593],
        [0.8149, 0.8379, 0.8276, 0.8278, 0.8447, 1.0708, 1.0157, 1.0974],
        [2.0911, 2.1907, 2.1347, 2.6799, 2.4456, 2.4900, 1.6497, 1.3151],
        [0.5735, 0.4111, 0.3793, 0.4107, 0.4511, 0.5425, 0.6023, 0.6127],
        [0.0009, 0.0023, 0.0119, 0.1056, 0.2175, 0.3034, 0.3858, 0.5080],
        [1.0798, 1.1827, 1.2007, 1.2468, 1.2910, 1.4170, 1.4489, 1.4753],
        [0.7061, 0.6423, 0.7629, 0.7943, 0.7661, 0.8749, 0.8846, 0.9649],
        [1.4902, 1.5133, 1.4105, 1.2886, 1.1033, 1.0029, 0.9290, 0.9225],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.8533, 0.9307, 1.0181, 1.0553, 1.0819, 1.1263, 1.1627, 1.1797],
        [1.0002, 1.0032, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [1.0078, 1.0705, 1.2668, 1.1814, 1.1877, 1.1176, 0.9892, 0.9787],
        [1.0264, 1.0490, 1.1273, 1.0790, 1.0897, 1.0749, 1.0676, 1.0710],
        [601.2685, 672.9413, 549.1699, 203.3287, 224.8712, 67.9050, 16.1683, 16.0430],
        [0.4218, 0.6829, 0.8477, 1.0166, 1.1334, 1.2288, 1.3292, 1.4128],
        [2.4801, 1.4195, 3.1091, 2.4451, 3.4497, 3.3972, 3.9280, 4.0724],
        [1.4246, 1.1924, 1.1825, 1.3087, 1.0716, 1.0529, 1.0390, 1.0688],
        [12.7505, 10.5311, 9.3252, 11.8404, 7.8292, 6.6177, 5.2280, 4.1652],
        [0.9275, 0.9263, 0.9567, 0.9637, 0.9665, 0.9669, 0.9639, 0.9614],
        [18.4339, 11.2288, 12.0939, 13.7857, 8.7443, 6.9006, 5.2835, 3.8404],
        [57.3909, 49.9359, 39.9714, 42.3322, 23.7318, 13.9594, 8.3810, 3.2241],
        [1.9936, 1.9855, 2.2227, 1.9837, 1.7555, 1.6351, 1.5524, 1.5481],
        [2.9127, 3.0405, 2.9743, 2.4653, 2.1252, 1.6454, 1.3667, 1.2188],
        [0.9796, 1.1760, 1.6286, 1.5154, 1.4737, 1.4425, 1.3412, 1.3841],
        [0.0000, 1.1181, 33.1445, 60.4675, 74.1253, 84.4802, 87.9778, 98.1200],
        [4.9522, 7.8498, 9.6108, 10.4727, 9.9917, 9.2056, 8.8789, 9.0215],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0161, 0.0074, 0.0380],
        [2.0099, 2.7747, 4.0358, 4.6755, 5.3177, 5.0315, 4.7419, 5.0520],
        [5.9522, 10.7892, 15.4712, 6.0488, 8.6218, 10.8115, 11.9226, 13.0528],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]]),
}

# ./results/new_model_resnet_based/New - Most Recent/
# ContourIntegrationResnet50_CurrentSubtractInhibitLayer_run_2_20200924_183958
model_run_2 = {
    'train_acc': 0.8217,
    'validation_acc': 0.7963,
    'no_optimal_stimulus_neurons': np.array([]),
    'c_len_iou_vs_len_test': np.array([0.9825, 0.4524, 0.8579, 0.9292, 0.9255]),
    'c_len_iou_vs_len_validation': np.array([0.960, 0.650, 0.818, 0.857, 0.871]),
    'c_len_noise_resp': np.array([
        3.023, 3.274, 0.033, 1.161, 0.212, 0.024, 0.354, 2.26 , 0.698,
        0.037, 1.719, 0.507, 0.412, 0.029, 5.434, 0.   , 0.   , 2.184,
        0.181, 2.916, 2.695, 1.106, 2.06 , 0.801, 1.528, 1.079, 1.595,
        0.141, 1.647, 0.   , 1.653, 1.333, 0.826, 1.948, 1.117, 0.017,
        0.162, 1.457, 0.531, 1.593, 2.344, 4.383, 0.541, 0.01 , 0.68 ,
        0.011, 2.028, 0.591, 0.   , 0.098, 1.332, 2.571, 1.013, 2.525,
        1.443, 0.57 , 0.12 , 0.882, 0.403, 1.008, 2.589, 3.507, 0.161,
        2.009]),
    'c_len_mean_gains': np.array([
        [1.000e+00, 9.250e-01, 9.003e-01, 9.030e-01, 9.025e-01],
        [1.000e+00, 9.961e-01, 9.993e-01, 1.000e+00, 9.993e-01],
        [9.997e-01, 6.456e-01, 0.000e+00, 0.000e+00, 0.000e+00],
        [1.000e+00, 8.052e-01, 7.821e-01, 7.837e-01, 7.794e-01],
        [1.000e+00, 3.971e+00, 4.960e+00, 5.095e+00, 4.763e+00],
        [9.996e-01, 7.479e+01, 1.453e+02, 1.876e+02, 2.033e+02],
        [1.000e+00, 3.283e+00, 5.313e+00, 6.305e+00, 6.482e+00],
        [1.000e+00, 2.881e+00, 3.942e+00, 4.432e+00, 4.458e+00],
        [1.000e+00, 2.085e+00, 2.353e+00, 2.366e+00, 2.528e+00],
        [9.997e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [1.000e+00, 9.330e-01, 9.093e-01, 9.133e-01, 9.027e-01],
        [1.000e+00, 3.181e-01, 0.000e+00, 0.000e+00, 3.959e-03],
        [1.000e+00, 8.570e-01, 1.784e+00, 2.651e+00, 3.010e+00],
        [9.997e-01, 1.378e+01, 1.891e+01, 2.086e+01, 2.148e+01],
        [1.000e+00, 9.710e-01, 9.654e-01, 9.644e-01, 9.687e-01],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [1.000e+00, 1.266e+00, 1.361e+00, 1.379e+00, 1.373e+00],
        [9.999e-01, 1.182e+00, 1.280e+00, 1.232e+00, 1.279e+00],
        [1.000e+00, 1.042e+00, 1.140e+00, 1.188e+00, 1.202e+00],
        [1.000e+00, 1.220e+00, 1.449e+00, 1.502e+00, 1.513e+00],
        [1.000e+00, 3.973e+00, 5.858e+00, 6.145e+00, 6.131e+00],
        [1.000e+00, 1.598e+00, 2.522e+00, 3.125e+00, 3.402e+00],
        [1.000e+00, 9.181e-01, 9.212e-01, 9.228e-01, 9.201e-01],
        [1.000e+00, 6.172e-01, 5.464e-01, 5.455e-01, 5.588e-01],
        [1.000e+00, 3.703e-01, 2.925e-01, 2.792e-01, 2.927e-01],
        [1.000e+00, 7.993e-01, 7.620e-01, 7.435e-01, 7.480e-01],
        [9.999e-01, 3.065e-02, 7.964e-03, 6.539e-03, 3.064e-02],
        [1.000e+00, 2.243e+00, 2.663e+00, 2.763e+00, 2.731e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [1.000e+00, 6.889e-01, 5.456e-01, 5.406e-01, 4.899e-01],
        [1.000e+00, 2.227e+00, 2.727e+00, 2.690e+00, 2.850e+00],
        [1.000e+00, 1.059e+00, 1.055e+00, 1.174e+00, 1.235e+00],
        [1.000e+00, 9.430e-01, 9.361e-01, 9.372e-01, 9.194e-01],
        [1.000e+00, 1.036e+00, 1.051e+00, 1.053e+00, 1.053e+00],
        [9.994e-01, 3.124e+00, 6.709e+00, 4.760e+00, 7.417e+00],
        [9.999e-01, 1.539e-01, 8.048e-02, 1.190e-01, 1.018e-01],
        [1.000e+00, 9.182e-01, 9.153e-01, 9.221e-01, 9.248e-01],
        [1.000e+00, 5.370e+00, 8.988e+00, 1.001e+01, 9.840e+00],
        [1.000e+00, 9.448e-01, 9.185e-01, 9.451e-01, 9.490e-01],
        [1.000e+00, 1.097e+00, 1.211e+00, 1.223e+00, 1.231e+00],
        [1.000e+00, 9.543e-01, 9.420e-01, 9.395e-01, 9.423e-01],
        [1.000e+00, 1.313e+00, 1.515e+00, 1.503e+00, 1.506e+00],
        [9.990e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [1.000e+00, 4.286e-01, 3.623e-01, 3.440e-01, 3.241e-01],
        [9.991e-01, 2.068e+01, 2.255e+01, 2.388e+01, 2.455e+01],
        [1.000e+00, 8.683e-01, 9.658e-01, 9.847e-01, 9.690e-01],
        [1.000e+00, 8.833e-02, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 4.694e+04, 1.218e+05, 1.247e+05, 1.322e+05],
        [9.999e-01, 2.089e+01, 3.241e+01, 3.796e+01, 3.776e+01],
        [1.000e+00, 1.871e+00, 1.758e+00, 1.787e+00, 1.827e+00],
        [1.000e+00, 7.165e-01, 6.374e-01, 6.208e-01, 6.280e-01],
        [1.000e+00, 1.000e+00, 1.000e+00, 1.000e+00, 1.000e+00],
        [1.000e+00, 8.742e-01, 8.395e-01, 8.311e-01, 8.360e-01],
        [1.000e+00, 7.858e-01, 7.655e-01, 7.707e-01, 7.657e-01],
        [1.000e+00, 2.729e-01, 1.880e-01, 2.060e-01, 1.805e-01],
        [9.999e-01, 4.133e+00, 6.174e+00, 7.055e+00, 7.225e+00],
        [1.000e+00, 8.894e-01, 8.378e-01, 8.312e-01, 8.349e-01],
        [1.000e+00, 1.375e+00, 1.957e+00, 2.092e+00, 2.195e+00],
        [1.000e+00, 8.875e-01, 8.309e-01, 8.435e-01, 8.459e-01],
        [1.000e+00, 9.193e-01, 7.048e-01, 7.217e-01, 7.050e-01],
        [1.000e+00, 1.921e+00, 2.645e+00, 3.004e+00, 3.187e+00],
        [9.999e-01, 5.740e-01, 6.785e-02, 5.216e-02, 7.832e-02],
        [1.000e+00, 1.032e+00, 8.422e-01, 8.831e-01, 8.630e-01]]),
    'spacing_noise_resp': np.array([
        3.0523, 3.2692, 0.0450, 1.1868, 0.2936, 0.0551, 0.3943, 2.1597, 0.7900, 0.0313,
        1.7181, 0.5829, 0.4373, 0.0168, 5.4329, 0.0000, 0.0000, 2.1809, 0.1578, 2.8375,
        2.7130, 1.1017, 2.0756, 0.7796, 1.4148, 1.0580, 1.5978, 0.1375, 1.6536, 0.0000,
        1.5723, 1.3771, 0.8405, 1.9222, 1.0762, 0.0182, 0.1565, 1.4559, 0.4287, 1.5991,
        2.3548, 4.3858, 0.5235, 0.0174, 0.6980, 0.0108, 1.9446, 0.6093, 0.0000, 0.0985,
        1.1965, 2.4873, 1.0130, 2.4951, 1.4179, 0.6247, 0.1443, 0.8756, 0.4049, 1.0147,
        2.4983, 3.5139, 0.1323, 2.0974, ]),
    'spacing_mean_gains': np.array([
        [0.8957, 0.9256, 0.9493, 0.9521, 0.9712, 0.9934, 1.0144, 1.0350],
        [0.9982, 1.0249, 1.0313, 1.0252, 1.0339, 1.0454, 1.0374, 1.0450],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0023, 0.8417, 2.3710, 4.2207],
        [0.7542, 0.8541, 0.9329, 0.9671, 1.0199, 1.0633, 1.0907, 1.1129],
        [3.4823, 5.1518, 4.7185, 4.0650, 3.9097, 2.5403, 1.9723, 1.5348],
        [80.1218, 101.2951, 79.5300, 43.4547, 21.4959, 1.8985, 0.0000, 0.0000],
        [5.4679, 5.8085, 5.9371, 4.8420, 3.8318, 3.1015, 3.0716, 3.0869],
        [4.5418, 4.2473, 3.6658, 3.0324, 2.4129, 1.6351, 1.2563, 0.9552],
        [2.0662, 2.2224, 1.7394, 1.9625, 1.4022, 1.2480, 1.1022, 1.2101],
        [0.0000, 0.0174, 0.0000, 0.0000, 0.0000, 0.6681, 1.2171, 2.0615],
        [0.8979, 1.0092, 1.1017, 1.1696, 1.2008, 1.2285, 1.2490, 1.2640],
        [0.0052, 0.0000, 0.0000, 0.0000, 0.0000, 0.1674, 0.6617, 0.8383],
        [2.3987, 3.7026, 3.8162, 3.0203, 1.6493, 1.5511, 1.5804, 1.6380],
        [37.4291, 25.9636, 25.4357, 19.2333, 18.2412, 13.6828, 11.7179, 9.0515],
        [0.9698, 0.9702, 0.9853, 0.9921, 1.0009, 1.0074, 1.0132, 1.0199],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 376.2433, 1653.2086, 6388.8468],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [1.3680, 1.3785, 1.2733, 1.2603, 1.0438, 0.9999, 1.0050, 1.0209],
        [1.4150, 2.2778, 2.7791, 3.5436, 3.9628, 4.5230, 4.9465, 5.4744],
        [1.2349, 1.1415, 1.0804, 1.0986, 1.1073, 1.1220, 1.1271, 1.1430],
        [1.4935, 1.4644, 1.4309, 1.4642, 1.3200, 1.2481, 1.2256, 1.1682],
        [6.1421, 5.6305, 4.4945, 3.7836, 3.2824, 2.4408, 1.9443, 1.6846],
        [3.0588, 2.7934, 2.6295, 2.1376, 2.0024, 1.2947, 1.0491, 0.8075],
        [0.9466, 0.9389, 0.9432, 0.9252, 0.9070, 0.8957, 0.8843, 0.8837],
        [0.6092, 0.6725, 0.7486, 0.7139, 0.8354, 0.8669, 0.9409, 0.9483],
        [0.2847, 0.2896, 0.3089, 0.3452, 0.3516, 0.3645, 0.6839, 0.6289],
        [0.7415, 0.8015, 0.8707, 0.9140, 0.9362, 0.9918, 1.0511, 1.1352],
        [0.0301, 0.0345, 0.5132, 0.4894, 0.9172, 1.5685, 1.8326, 2.0361],
        [2.7194, 3.1144, 2.6990, 2.0642, 1.6517, 1.0150, 0.9201, 0.7293],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5227, 0.0000, 0.0000, 0.0202, 0.0265, 0.0427, 0.1052, 0.1968],
        [2.7040, 2.7389, 2.5754, 2.6568, 2.1017, 1.8597, 1.6675, 1.6090],
        [1.1260, 1.1629, 1.1506, 1.0593, 0.9402, 0.9051, 0.8549, 0.8478],
        [0.9393, 1.0291, 1.0972, 1.1415, 1.1712, 1.1914, 1.2070, 1.2286],
        [1.1054, 1.2292, 1.2321, 1.3789, 1.4944, 1.5955, 1.6679, 1.7408],
        [9.2391, 0.7049, 0.8362, 1.0255, 1.4353, 1.5620, 2.9479, 3.9743],
        [0.0887, 0.5770, 1.0813, 1.7621, 2.2263, 2.8262, 3.1213, 3.3846],
        [0.9364, 0.9973, 1.0449, 1.0944, 1.1217, 1.1378, 1.1531, 1.1922],
        [12.3860, 10.1252, 6.9272, 6.4398, 3.6172, 2.2891, 1.6602, 1.7409],
        [0.9438, 1.0744, 1.1453, 1.2022, 1.2702, 1.3295, 1.3595, 1.4021],
        [1.2239, 0.9574, 0.6068, 0.6831, 0.6359, 0.6156, 0.6130, 0.5626],
        [0.9426, 0.9529, 0.9730, 0.9880, 0.9890, 1.0009, 1.0110, 1.0111],
        [1.6008, 1.6858, 1.7349, 1.6641, 1.5409, 1.4434, 1.3386, 1.3340],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.6104],
        [0.3388, 0.4350, 0.3892, 0.4104, 0.4254, 0.4027, 0.4182, 0.4394],
        [24.7520, 30.8009, 34.6097, 32.6094, 29.8831, 25.1642, 20.9332, 23.6037],
        [1.0163, 0.8294, 0.9004, 0.8754, 0.8040, 0.7530, 0.7505, 0.7400],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0048, 0.0607, 0.2122, 0.3724],
        [124168.2497, 182568.8441, 167877.2864, 113462.8209, 118995.4125, 55773.7750, 31963.1773, 28699.0088],
        [38.0145, 40.1411, 29.6086, 33.0077, 15.6718, 16.3002, 10.3849, 6.7800],
        [2.0143, 2.5764, 2.6314, 2.4399, 2.1614, 1.8526, 1.6907, 1.5300],
        [0.6537, 0.5656, 0.7490, 0.9707, 1.0353, 1.1104, 1.1571, 1.1644],
        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [0.8564, 0.9812, 1.0516, 1.0771, 1.1195, 1.1469, 1.1806, 1.2032],
        [0.7945, 0.8486, 0.9157, 1.0050, 1.0329, 1.0763, 1.1138, 1.1591],
        [0.1479, 0.7463, 1.1974, 2.2688, 2.7459, 3.4946, 3.7610, 4.2288],
        [6.0389, 4.0132, 2.6660, 2.4788, 2.1576, 1.7822, 0.9366, 0.5718],
        [0.8249, 0.8738, 0.9343, 0.9552, 0.9874, 0.9708, 0.9951, 0.9917],
        [2.1187, 1.7801, 1.5548, 1.2908, 1.3188, 1.3326, 1.4025, 1.4510],
        [0.8421, 0.7881, 0.8283, 0.8283, 0.8290, 0.8442, 0.8244, 0.8139],
        [0.7339, 0.7128, 0.7014, 0.7010, 0.7024, 0.7052, 0.7245, 0.7836],
        [3.0064, 3.0599, 2.6247, 2.1593, 1.4285, 1.0572, 0.6976, 0.6572],
        [0.1229, 0.4377, 0.7066, 0.6162, 0.9182, 1.0728, 1.4000, 1.5994],
        [0.9253, 1.1024, 1.2431, 1.3961, 1.4308, 1.4970, 1.4387, 1.3918]]),
}

# ./results/new_model_resnet_based/New - Most Recent/
# ContourIntegrationResnet50_CurrentSubtractInhibitLayer_run_3_20200926_114933
model_run_3 = {
    'train_acc': 0.8119,
    'validation_acc': 0.7910,
    'no_optimal_stimulus_neurons': np.array( [5, 57]),
    'c_len_iou_vs_len_test': np.array([0.9662, 0.5035, 0.8687, 0.9130, 0.9164]),
    'c_len_iou_vs_len_validation': np.array([0.931, 0.670, 0.809, 0.856, 0.853]),
    'c_len_noise_resp': np.array([
        1.957e+00, 3.601e+00, 6.436e-02, 2.443e+00, 2.190e+00, 2.305e+00,
        2.548e+00, 3.077e+00, 1.676e+00, 0.000e+00, 4.453e-01, 2.752e+00,
        0.000e+00, 8.120e+00, 1.343e+00, 1.723e+00, 0.000e+00, 2.385e+00,
        4.706e+00, 2.880e+00, 2.499e+00, 4.158e-01, 5.768e-01, 1.761e-01,
        1.150e+00, 4.869e+00, 3.534e+00, 1.458e+00, 8.803e-04, 1.145e+00,
        1.027e+00, 1.040e+00, 2.280e+00, 2.399e+00, 6.064e-01, 2.534e+00,
        2.202e+00, 2.071e+00, 5.783e+00, 0.000e+00, 6.611e+00, 1.007e+00,
        3.710e-01, 9.559e-01, 1.635e+00, 2.826e+00, 1.232e+00, 0.000e+00,
        2.652e+00, 1.073e+00, 2.841e+00, 1.938e-01, 1.978e+00, 1.568e+00,
        3.251e+00, 1.965e+00, 8.108e-03, 1.811e+00, 0.000e+00, 4.248e+00,
        1.268e+00, 1.181e+00]),
    'c_len_mean_gains': np.array([
        [1.000e+00, 1.828e+00, 1.966e+00, 2.017e+00, 1.999e+00],
        [1.000e+00, 1.011e+00, 1.000e+00, 1.014e+00, 1.014e+00],
        [9.998e-01, 1.211e-01, 5.450e-02, 0.000e+00, 0.000e+00],
        [1.000e+00, 6.660e-01, 4.672e-01, 3.460e-01, 2.987e-01],
        [1.000e+00, 1.034e+00, 1.035e+00, 1.034e+00, 1.029e+00],
        [1.000e+00, 9.081e-01, 8.703e-01, 8.645e-01, 8.660e-01],
        [1.000e+00, 8.826e-01, 8.915e-01, 8.796e-01, 8.820e-01],
        [1.000e+00, 1.445e+00, 1.500e+00, 1.477e+00, 1.452e+00],
        [1.000e+00, 7.277e-01, 7.112e-01, 7.045e-01, 7.111e-01],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [1.000e+00, 1.431e+00, 1.553e+00, 1.517e+00, 1.521e+00],
        [1.000e+00, 9.261e-01, 9.178e-01, 9.203e-01, 9.143e-01],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [1.000e+00, 9.821e-01, 9.819e-01, 9.827e-01, 9.837e-01],
        [1.000e+00, 1.145e+00, 1.220e+00, 1.155e+00, 1.139e+00],
        [1.000e+00, 1.586e+00, 1.760e+00, 1.814e+00, 1.861e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 1.272e+02, 8.240e+02],
        [1.000e+00, 9.397e-01, 9.332e-01, 9.286e-01, 9.336e-01],
        [1.000e+00, 8.714e-01, 7.805e-01, 7.753e-01, 7.782e-01],
        [1.000e+00, 1.000e+00, 1.098e+00, 1.102e+00, 1.119e+00],
        [1.000e+00, 1.272e+00, 1.473e+00, 1.523e+00, 1.524e+00],
        [1.000e+00, 5.442e+00, 8.504e+00, 9.168e+00, 9.105e+00],
        [1.000e+00, 2.153e-02, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.999e-01, 5.414e+00, 7.319e+00, 7.995e+00, 7.675e+00],
        [1.000e+00, 4.786e-01, 2.767e-01, 2.992e-01, 2.771e-01],
        [1.000e+00, 1.302e+00, 1.427e+00, 1.461e+00, 1.458e+00],
        [1.000e+00, 2.865e+00, 4.004e+00, 4.236e+00, 4.272e+00],
        [1.000e+00, 8.823e-01, 9.264e-01, 9.947e-01, 9.539e-01],
        [9.888e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [1.000e+00, 1.101e+00, 1.092e+00, 1.094e+00, 1.096e+00],
        [1.000e+00, 1.038e+00, 1.047e+00, 1.062e+00, 1.064e+00],
        [1.000e+00, 6.286e-01, 6.109e-01, 6.099e-01, 6.113e-01],
        [1.000e+00, 8.649e-01, 8.195e-01, 8.188e-01, 8.300e-01],
        [1.000e+00, 1.029e+00, 1.090e+00, 1.126e+00, 1.156e+00],
        [1.000e+00, 8.251e-01, 8.040e-01, 8.077e-01, 8.152e-01],
        [1.000e+00, 1.036e+00, 1.031e+00, 1.037e+00, 1.051e+00],
        [1.000e+00, 1.080e+00, 1.085e+00, 1.078e+00, 1.082e+00],
        [1.000e+00, 1.058e+00, 1.064e+00, 1.053e+00, 1.050e+00],
        [1.000e+00, 1.350e+00, 1.522e+00, 1.557e+00, 1.569e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [1.000e+00, 9.955e-01, 9.988e-01, 1.005e+00, 1.002e+00],
        [1.000e+00, 9.243e-01, 1.164e+00, 1.393e+00, 1.527e+00],
        [1.000e+00, 3.560e-01, 2.830e-01, 2.041e-01, 2.389e-01],
        [1.000e+00, 1.162e+00, 1.153e+00, 1.200e+00, 1.241e+00],
        [1.000e+00, 9.347e-01, 1.152e+00, 1.298e+00, 1.340e+00],
        [1.000e+00, 9.485e-01, 9.278e-01, 9.322e-01, 9.374e-01],
        [1.000e+00, 7.259e-01, 7.171e-01, 7.355e-01, 7.255e-01],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [1.000e+00, 9.719e-01, 9.633e-01, 9.684e-01, 9.659e-01],
        [1.000e+00, 5.104e+00, 6.679e+00, 7.309e+00, 7.287e+00],
        [1.000e+00, 9.934e-01, 9.935e-01, 9.912e-01, 9.853e-01],
        [9.999e-01, 8.828e-01, 8.398e-01, 8.485e-01, 8.401e-01],
        [1.000e+00, 6.174e-01, 5.350e-01, 5.340e-01, 5.306e-01],
        [1.000e+00, 2.350e+00, 3.118e+00, 3.232e+00, 3.265e+00],
        [1.000e+00, 1.119e+00, 1.157e+00, 1.220e+00, 1.206e+00],
        [1.000e+00, 9.550e-01, 8.833e-01, 8.680e-01, 8.649e-01],
        [9.988e-01, 4.694e+01, 1.003e+02, 1.208e+02, 1.279e+02],
        [1.000e+00, 1.486e+00, 1.559e+00, 1.551e+00, 1.531e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [1.000e+00, 1.303e+00, 1.386e+00, 1.373e+00, 1.377e+00],
        [1.000e+00, 1.119e+00, 1.198e+00, 1.174e+00, 1.177e+00],
        [1.000e+00, 8.473e-01, 9.816e-01, 1.092e+00, 1.129e+00]]),
    'spacing_noise_resp': np.array([
        1.9514, 3.5796, 0.0987, 2.4091, 2.1564, 2.3154, 2.5357, 3.0682, 1.7424, 0.0000,
        0.4688, 2.7550, 0.0000, 8.1112, 1.3540, 1.7060, 0.0000, 2.3735, 4.7209, 2.9003,
        2.3673, 0.3625, 0.6025, 0.2467, 1.1641, 4.9130, 3.6707, 1.3853, 0.0010, 1.1411,
        1.0135, 1.0350, 2.3000, 2.3884, 0.6221, 2.5359, 2.1596, 2.0753, 5.5357, 0.0000,
        6.6116, 0.9985, 0.3740, 0.9886, 1.6203, 2.7902, 1.2554, 0.0023, 2.6367, 1.1017,
        2.8254, 0.2149, 1.9899, 1.6709, 3.2039, 1.9860, 0.0263, 1.7389, 0.0000, 4.2612,
        1.2276, 1.2447, ]),
    'spacing_mean_gains': np.array([
        [1.9973, 1.8927, 1.8188, 1.8142, 1.7456, 1.5979, 1.4643, 1.3806],
        [1.0161, 1.0137, 0.9857, 0.9654, 0.9452, 0.9336, 0.9150, 0.9076],
        [0.0000, 0.0231, 0.0856, 0.8680, 0.4514, 2.3407, 1.8428, 3.3294],
        [0.3439, 0.1625, 0.1936, 0.2459, 0.2475, 0.3006, 0.3589, 0.4343],
        [1.0490, 1.0261, 1.0393, 1.0239, 1.0300, 1.0274, 1.0297, 1.0430],
        [0.8678, 0.9116, 0.9494, 0.9928, 1.0242, 1.0412, 1.0633, 1.0831],
        [0.8914, 0.9081, 0.9298, 0.9349, 0.9362, 0.9542, 0.9619, 0.9680],
        [1.4850, 1.6586, 1.7639, 1.5455, 1.4588, 1.2518, 1.1439, 1.0592],
        [0.6802, 0.7251, 0.7410, 0.7712, 0.7980, 0.8206, 0.8286, 0.8459],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [1.4499, 1.4617, 1.4588, 1.5306, 1.5859, 1.5872, 1.5620, 1.5789],
        [0.9199, 0.9152, 0.8947, 0.8834, 0.8802, 0.8805, 0.8761, 0.8729],
        [0.0000, 0.0000, 0.0000, 607.0639, 482.5146, 928.3321, 5565.0308, 9573.2174],
        [0.9842, 0.9925, 1.0064, 1.0153, 1.0239, 1.0325, 1.0411, 1.0505],
        [1.1203, 1.1965, 1.2866, 1.3899, 1.3046, 1.3111, 1.3838, 1.3264],
        [1.8658, 1.7273, 1.4621, 1.1150, 0.9489, 0.8092, 0.7243, 0.7088],
        [275.6311, 36360.0109, 71740.0882, 112399.3117, 110682.9597, 87928.9863, 90614.9038, 96339.4111],
        [0.9352, 0.9515, 0.9546, 0.9645, 0.9865, 0.9907, 1.0060, 1.0035],
        [0.7780, 0.7966, 0.8210, 0.8375, 0.8519, 0.8637, 0.8738, 0.8865],
        [1.0924, 1.2810, 1.3522, 1.4541, 1.4430, 1.4832, 1.4726, 1.4652],
        [1.6014, 1.7016, 1.7582, 1.7339, 1.7062, 1.6399, 1.5221, 1.4581],
        [10.6010, 10.2385, 8.8584, 7.9495, 7.4804, 6.3101, 5.7904, 5.4812],
        [0.0000, 0.0000, 0.0000, 0.2007, 0.2177, 0.5985, 0.7002, 0.7245],
        [5.1520, 4.5263, 5.1285, 6.2288, 4.4470, 4.7607, 4.1790, 4.0785],
        [0.2838, 0.2938, 0.2604, 0.2561, 0.3752, 0.5359, 0.6108, 0.6527],
        [1.4400, 1.3810, 1.2009, 1.1312, 0.9705, 0.9623, 0.9698, 0.9698],
        [4.0864, 3.7213, 3.2026, 3.4052, 2.6223, 2.2703, 1.9216, 1.3690],
        [0.9956, 0.9157, 0.9323, 0.9240, 0.9178, 0.9298, 0.9590, 1.0563],
        [0.0000, 0.0000, 0.1269, 7.2552, 16.4890, 26.7421, 60.9450, 76.5544],
        [1.1003, 1.0885, 1.0972, 1.1432, 1.1658, 1.1885, 1.2012, 1.2315],
        [1.0771, 1.1150, 1.1144, 1.1394, 1.1603, 1.1822, 1.1792, 1.1871],
        [0.6146, 0.6166, 0.6138, 0.6198, 0.6128, 0.8950, 0.8205, 0.8803],
        [0.8160, 0.8060, 0.8244, 0.8252, 0.8210, 0.8545, 0.8814, 0.8615],
        [1.1377, 1.1917, 1.2552, 1.2459, 1.2145, 1.1832, 1.1558, 1.1540],
        [0.7982, 0.8477, 0.9224, 0.9940, 1.0540, 1.0950, 1.1296, 1.1517],
        [1.0675, 0.9788, 0.9788, 0.9801, 0.9834, 0.9793, 0.9793, 0.9796],
        [1.0881, 1.0355, 0.9811, 0.8514, 0.7771, 0.7579, 0.7508, 0.6930],
        [1.0576, 1.0848, 1.1244, 1.1514, 1.1909, 1.2099, 1.2225, 1.2436],
        [1.6273, 1.5119, 1.3383, 1.3383, 1.1754, 1.2197, 1.1349, 1.0982],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 214.9395, 0.0000],
        [0.9979, 1.0196, 1.0302, 1.0152, 1.0145, 1.0002, 1.0002, 1.0009],
        [1.4051, 1.4032, 1.2596, 1.0728, 0.9815, 0.8421, 0.8335, 0.7753],
        [0.2711, 0.6023, 0.6690, 0.8508, 0.8760, 1.0344, 1.1404, 1.1455],
        [1.2129, 1.1437, 0.8822, 0.7969, 0.7210, 0.6367, 0.6400, 0.6381],
        [1.3337, 1.5231, 1.2550, 0.9293, 0.9373, 0.9665, 0.9925, 0.9866],
        [0.9483, 0.9638, 1.0544, 1.0794, 1.0552, 1.0337, 1.0177, 1.0146],
        [0.7070, 0.7934, 0.8566, 0.9533, 0.9976, 1.1078, 1.1610, 1.2225],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1411, 2.7536],
        [0.9838, 0.9946, 1.0180, 1.0427, 1.0644, 1.0744, 1.0816, 1.0994],
        [7.0904, 7.2515, 5.8255, 6.4419, 4.3428, 2.8680, 1.8542, 1.4488],
        [0.9995, 1.0292, 1.0661, 1.0988, 1.1304, 1.1465, 1.1600, 1.1705],
        [0.7585, 1.0067, 1.1937, 1.4234, 1.6464, 1.7639, 1.9205, 2.0144],
        [0.5268, 0.5423, 0.5934, 0.5802, 0.5758, 0.6230, 0.6510, 0.6624],
        [3.0692, 3.2566, 3.1401, 2.6796, 2.2888, 2.0305, 1.9867, 1.8213],
        [1.2292, 1.1873, 1.2811, 1.2293, 1.2160, 1.1344, 1.0743, 1.0546],
        [0.8663, 0.8222, 0.8664, 0.8979, 0.8637, 0.8603, 0.8580, 0.8626],
        [35.9098, 27.0788, 13.4194, 14.9440, 1.7921, 0.6810, 0.0000, 0.1819],
        [1.6211, 1.4810, 1.3880, 1.1440, 0.9343, 0.8570, 0.8438, 0.8217],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 5628.6224, 19364.4487],
        [1.3758, 1.3719, 1.3047, 1.1934, 1.1031, 0.9977, 0.9237, 0.8633],
        [1.2207, 1.0547, 0.9925, 0.8973, 0.7614, 0.7586, 0.7107, 0.7138],
        [1.0631, 0.8058, 0.5465, 0.5961, 0.6213, 0.6536, 0.6982, 0.7411]])
}


# End of Results ==================================================================================
def get_filtered_idx_arr(noise_resp_arr, noise_th):
    """
    Return index of all entries above or equal to noise threshold
    :param noise_resp_arr:
    :param noise_th:
    :return:
    """

    idx_arr = [idx for idx, value in enumerate(noise_resp_arr) if value >= noise_th]

    return idx_arr


def get_filtered_idx_arr_max_gain(gains_arr, max_gain=20.0):
    """
    Get all gain results that are less than 20 and also all unresponsive
    neurons (have all zero gains)

    :param
    :return:
    """
    idx_arr = []

    for idx, gains in enumerate(gains_arr):
        if np.all(gains <= max_gain) and not np.all(gains == 0):
            idx_arr.append(idx)
            # print(idx, gains)

    return idx_arr


def get_filtered_responses(results_dict, noise_th):
    """
    Return Filtered out clen and spacing entries
    :param results_dict:
    :param noise_th:
    :return:
    """
    # valid_c_len_idxs = get_filtered_idx_arr(results_dict['c_len_noise_resp'], noise_th)
    # valid_space_idxs = get_filtered_idx_arr(results_dict['spacing_noise_resp'], noise_th)

    valid_c_len_idxs = get_filtered_idx_arr_max_gain(results_dict['c_len_mean_gains'])
    valid_space_idxs = get_filtered_idx_arr_max_gain(results_dict['spacing_mean_gains'])

    f_c_len_mean_gains = results_dict['c_len_mean_gains'][valid_c_len_idxs, ]
    f_spacing_mean_gains = results_dict['spacing_mean_gains'][valid_space_idxs, ]

    return f_c_len_mean_gains, f_spacing_mean_gains


def get_all_filtered_results(result_dict_list, noise_th):
    """
    Return a list of all c_len and spacing results with a noise response above
    the noise threshold
    """
    combined_c_len_results = []
    combined_space_results = []

    for idx, result in enumerate(result_dict_list):
        c_len_result, spacing_result = get_filtered_responses(result, noise_th)
        combined_c_len_results.extend(c_len_result)
        combined_space_results.extend(spacing_result)

    combined_c_len_results = np.array(combined_c_len_results)
    combined_space_results = np.array(combined_space_results)

    return combined_c_len_results, combined_space_results


def get_all_cont_int_layer_output_results(results_dict_list):
    """ Returns the outputs of the contour integration layer not the gain """

    combined_c_len_results = []
    combined_space_results = []

    for idx, result in enumerate(results_dict_list):
        noise_resp_c_len = result['c_len_noise_resp']
        c_len_gains = result['c_len_mean_gains']

        c_len_outs = c_len_gains * noise_resp_c_len[:, np.newaxis]
        combined_c_len_results.extend(c_len_outs)

        noise_resp_space = result['spacing_noise_resp']
        space_gains = result['spacing_mean_gains']

        space_outs = space_gains * noise_resp_space[:, np.newaxis]
        combined_space_results.extend(space_outs)

    combined_c_len_results = np.array(combined_c_len_results)
    combined_space_results = np.array(combined_space_results)

    return combined_c_len_results, combined_space_results


def get_individual_run_population_averages(result_dict_list, noise_th):
    """
    Get Population averages for each RUN Individually
    :param result_dict_list:
    :param noise_th:
    :return:
    """
    p_avg_c_len_means = []
    p_avg_c_len_std = []
    p_avg_c_len_n = []

    p_avg_space_means = []
    p_avg_space_std = []
    p_avg_space_n = []

    for idx, result in enumerate(result_dict_list):
        f_c_len_results, f_spacing_results = get_filtered_responses(result, noise_th)

        c_len_p_mean = np.zeros(result['c_len_mean_gains'].shape[1])
        c_len_p_std = np.zeros(result['c_len_mean_gains'].shape[1])
        c_len_n = len(f_c_len_results)

        if c_len_n > 0:
            c_len_p_mean = np.mean(f_c_len_results, axis=0)
            c_len_p_std = np.std(f_c_len_results, axis=0)

        space_p_mean = np.zeros(result['spacing_mean_gains'].shape[1])
        space_p_std = np.zeros(result['spacing_mean_gains'].shape[1])
        space_n = len(f_spacing_results)

        if space_n > 0:
            space_p_mean = np.mean(f_spacing_results, axis=0)
            space_p_std = np.std(f_spacing_results, axis=0)

        p_avg_c_len_means.append(c_len_p_mean)
        p_avg_c_len_std.append(c_len_p_std)
        p_avg_c_len_n.append(c_len_n)

        p_avg_space_means.append(space_p_mean)
        p_avg_space_std.append(space_p_std)
        p_avg_space_n.append(space_n)

    p_avg_c_len_means = np.array(p_avg_c_len_means)
    p_avg_c_len_std = np.array(p_avg_c_len_std)

    p_avg_space_means = np.array(p_avg_space_means)
    p_avg_space_std = np.array(p_avg_space_std)

    return p_avg_c_len_means, p_avg_c_len_std, p_avg_c_len_n, \
        p_avg_space_means, p_avg_space_std, p_avg_space_n


def get_weighted_average(list_of_p_avg_means, list_of_p_avg_stds, list_of_p_neurons):

    total_n = np.sum(list_of_p_neurons)

    combined_mean = 0
    combined_var = 0

    for idx in range(len(list_of_p_avg_means)):
        combined_mean += list_of_p_neurons[idx] / total_n * list_of_p_avg_means[idx]
        combined_var += list_of_p_neurons[idx] / total_n * list_of_p_avg_stds[idx]**2

    return combined_mean, np.sqrt(combined_var), total_n


def get_overall_population_results(result_dict_list, noise_th, label=None):

    indv_run_p_avg_c_len_means, indv_p_avg_c_len_stds, indv_p_avg_c_len_n, \
        indv_p_avg_space_means, indv_p_avg_space_stds, indv_p_avg_space_n = \
        get_individual_run_population_averages(result_dict_list, noise_th)

    if label is not None:
        print("{} Valid results per run (Noise Th={:0.2f}): c_len {}, spacing {}".format(
            label, noise_th, indv_p_avg_c_len_n, indv_p_avg_space_n))

        starting_n_neurons_c_len = []
        starting_n_neurons_space = []
        for result in result_dict_list:
            starting_n_neurons_c_len.append(result['c_len_noise_resp'].shape[0])
            starting_n_neurons_space.append(result['spacing_noise_resp'].shape[0])
        print("Starting Number of neurons                   : c_len {}, spacing {}".format(
            starting_n_neurons_c_len, starting_n_neurons_space))

    all_c_len_means, all_c_len_stds, all_c_len_n = \
        get_weighted_average(indv_run_p_avg_c_len_means, indv_p_avg_c_len_stds, indv_p_avg_c_len_n)

    all_space_means, all_space_stds, all_space_n = \
        get_weighted_average(indv_p_avg_space_means, indv_p_avg_space_stds, indv_p_avg_space_n)

    return all_c_len_means, all_c_len_stds, all_c_len_n, all_space_means, all_space_stds, all_space_n


def debug_plot_individual_run_population_averages(result_dict_list, noise_th, label='None'):
    indv_run_p_avg_c_len_means, indv_p_avg_c_len_stds, indv_p_avg_c_len_n, \
        indv_p_avg_space_means, indv_p_avg_space_stds, indv_p_avg_space_n = \
        get_individual_run_population_averages(result_dict_list, noise_th)

    f_c_len, ax_c_len = plt.subplots()
    f_space, ax_space = plt.subplots()

    for idx in np.arange(len(indv_run_p_avg_c_len_means)):
        ax_c_len.plot(
            c_len_arr, indv_run_p_avg_c_len_means[idx, ],
            label='Run{}, N_{}'.format(idx, indv_p_avg_c_len_n[idx]))
        ax_c_len.fill_between(
            c_len_arr,
            indv_run_p_avg_c_len_means[idx, ] - indv_p_avg_c_len_stds[idx, ],
            indv_run_p_avg_c_len_means[idx, ] + indv_p_avg_c_len_stds[idx, ],
            alpha=0.2
        )

        ax_space.plot(
            spacing_arr, indv_p_avg_space_means[idx, ],
            label='Run{}, N_{}'.format(idx, indv_p_avg_space_n[idx]))
        ax_space.fill_between(
            spacing_arr,
            indv_p_avg_space_means[idx, ] - indv_p_avg_space_stds[idx, ],
            indv_p_avg_space_means[idx, ] + indv_p_avg_space_stds[idx, ],
            alpha=0.2
        )

    ax_c_len.plot(monkey_ma['c_len'], neuro_c_len_results, label='Neuro', c='k')
    ax_c_len.legend()
    if label is not None:
        ax_c_len.set_title('{} Noise Threshold={}'.format(label, noise_th))

    ax_space.plot(monkey_ma['rcd'], neuro_space_results, label='Neuro', c='k')
    ax_space.legend()
    if label is not None:
        ax_space.set_title('{} Noise Threshold={}'.format(label, noise_th))


def debug_plot_overall_averages(len_arr, space_arr, m_results, m_th, c_results, c_th):

    m_pop_c_len_means, m_pop_c_len_stds, m_pop_c_len_n, m_pop_space_means, m_pop_space_stds, m_pop_space_n = \
        get_overall_population_results(m_results, m_th, label='Model  ')

    c_pop_c_len_means, c_pop_c_len_stds, c_pop_c_len_n, c_pop_space_means, c_pop_space_stds, c_pop_space_n = \
        get_overall_population_results(c_results, c_th, label='Control')

    # Contour Length
    plt.plot(
        len_arr, m_pop_c_len_means,
        label='Model, N={}'.format(m_pop_c_len_n), c='b')
    plt.fill_between(
        len_arr,
        m_pop_c_len_means - m_pop_c_len_stds,
        m_pop_c_len_means + m_pop_c_len_stds,
        alpha=0.2,
        color='b'
    )

    plt.plot(
        len_arr, c_pop_c_len_means,
        label='Control, N={}'.format(c_pop_c_len_n), c='r')
    plt.fill_between(
        len_arr,
        c_pop_c_len_means - c_pop_c_len_stds,
        c_pop_c_len_means + c_pop_c_len_stds,
        alpha=0.2,
        color='r'
    )

    plt.plot(monkey_ma['c_len'], neuro_c_len_results, label='Neuro', c='k')
    plt.legend()

    # Fragment Spacing
    plt.figure()
    plt.plot(
        space_arr, m_pop_space_means,
        label='Model, N={}'.format(m_pop_space_n), c='b')
    plt.fill_between(
        space_arr,
        m_pop_space_means - m_pop_space_stds,
        m_pop_space_means + m_pop_space_stds,
        alpha=0.2,
        color='b'
    )

    plt.plot(
        space_arr, c_pop_space_means,
        label='Control, N={}'.format(c_pop_space_n), c='r')
    plt.fill_between(
        space_arr,
        c_pop_space_means - c_pop_space_stds,
        c_pop_space_means + c_pop_space_stds,
        alpha=0.2,
        color='r'
    )

    plt.plot(monkey_ma['rcd'], neuro_space_results, label='Neuro', c='k')
    plt.legend()


def get_iou_per_len(result_dict):
    # return result_dict['c_len_iou_vs_len_validation']
    return result_dict['c_len_iou_vs_len_test']


def get_population_avg_iou_results_per_len(result_dict_list):

    combined_iou_results = []

    for idx, result in enumerate(result_dict_list):
        combined_iou_results.append(get_iou_per_len(result))

    combined_iou_results = np.array(combined_iou_results)

    return np.mean(combined_iou_results, axis=0)


def get_model_average_ious(result_dict_list):
    combined_train_iou = []
    combined_val_iou = []
    combined_test_iou = []

    for idx, result in enumerate(result_dict_list):
        combined_train_iou.append(result['train_acc'])
        combined_val_iou.append(result['validation_acc'])
        combined_test_iou.append(get_iou_per_len(result))

    combined_train_iou = np.array(combined_train_iou)
    combined_val_iou = np.array(combined_val_iou)

    combined_test_iou = np.array(combined_test_iou)
    # Avg. across all lengths. Make is similar to Validation.
    combined_test_iou = np.mean(combined_test_iou, axis=1)

    return np.mean(combined_train_iou), np.std(combined_train_iou), \
        np.mean(combined_val_iou), np.std(combined_val_iou), \
        np.mean(combined_test_iou), np.std(combined_test_iou)


def get_gradients_of_linear_fits(x, gain_arr):
    gradients = []

    for ch_idx in range(len(gain_arr)):
        ch_gains = gain_arr[ch_idx, ]
        m_out, b_out = np.polyfit(x, ch_gains, deg=1)

        gradients.append(m_out)

    return np.array(gradients)


# =================================================================================================
if __name__ == "__main__":
    plt.ion()

    c_len_arr = np.array([1, 3, 5, 7, 9])  # Units of contour fragments
    # Units of relative co-linear distance (RCD)
    spacing_arr = np.array([1.00, 1.14, 1.29, 1.43, 1.57, 1.71, 1.86, 2.00])

    control_results = [
        control_run_1,
        control_run_2,
        control_run_3,
    ]
    control_noise_th = 0.01

    model_results = [
        model_run_1,
        model_run_2,
        model_run_3,
    ]
    model_noise_th = 0.1

    # ---------------------------------------------------------------------------------------------
    #  Process Results
    # ---------------------------------------------------------------------------------------------
    # model_c_len_results, model_space_results = get_all_filtered_results(model_results, model_noise_th)
    model_c_len_results, model_space_results = get_all_cont_int_layer_output_results(model_results)

    model_pop_c_len_means, model_pop_c_len_stds, model_pop_c_len_n, \
        model_pop_space_means, model_pop_space_stds, model_pop_space_n = \
        get_overall_population_results(model_results, model_noise_th, label='Model  ')

    model_pop_c_len_iou = get_population_avg_iou_results_per_len(model_results)
    model_iou_arr = get_model_average_ious(model_results)
    print("Model IoUs: Train mu={:0.4f}, sigma={:0.4f}, val mu={:0.4f}, sigma={:0.4f}, "
          "test mu={:0.4f},sigma={:0.4f}".format(
            model_iou_arr[0], model_iou_arr[1], model_iou_arr[2],
            model_iou_arr[3], model_iou_arr[4], model_iou_arr[5]))

    # control_c_len_results, control_space_results = get_all_filtered_results(control_results, control_noise_th)
    control_c_len_results, control_space_results = get_all_cont_int_layer_output_results(control_results)

    control_pop_c_len_means, control_pop_c_len_stds, control_pop_c_len_n, \
        control_pop_space_means, control_pop_space_stds, control_pop_space_n = \
        get_overall_population_results(control_results, control_noise_th, label='Control')

    control_pop_c_len_iou = get_population_avg_iou_results_per_len(control_results)
    control_iou_arr = get_model_average_ious(control_results)
    print("Control IoUs: Train mu={:0.4f}, sigma={:0.4f}, val mu={:0.4f}, sigma={:0.4f}, "
          "test mu={:0.4f},sigma={:0.4f}".format(
            control_iou_arr[0], control_iou_arr[1], control_iou_arr[2],
            control_iou_arr[3], control_iou_arr[4], control_iou_arr[5]))

    # ---------------------------------------------------------------------------------------------
    # Debug Plots
    # ---------------------------------------------------------------------------------------------
    # debug_plot_individual_run_population_averages(control_results, control_noise_th, label='Control')
    # debug_plot_individual_run_population_averages(model_results, model_noise_th, label='Model')
    # debug_plot_overall_averages(
    #     c_len_arr, spacing_arr, model_results, model_noise_th, control_results, control_noise_th)

    # -----------------------------------------------------------------------------------
    # Figure
    # -----------------------------------------------------------------------------------
    f = plt.figure(constrained_layout=True, figsize=(13, 5))
    gs = f.add_gridspec(2, 12)

    # Behavioral IoU vs contour length
    # --------------------------------
    ax1 = f.add_subplot(gs[0, 0:4])
    ax1.plot(c_len_arr, model_pop_c_len_iou, label='model', color='b', marker='x')
    ax1.plot(c_len_arr, control_pop_c_len_iou, label='control', color='r', marker='o')
    ax1.text(1, 0.1, 'A', fontsize=30)
    ax1.set_yticks([0, 0.5, 1])
    ax1.set_ylabel('IoU')
    ax1.set_xticks(c_len_arr)
    ax1.set_xlabel("Length (fragments)")
    ax1.legend(loc='lower right')

    # Gain vs contour length
    # ----------------------
    ax2 = f.add_subplot(gs[0, 4:8])

    if model_pop_c_len_n > 0:
        ax2.plot(
            c_len_arr, control_pop_c_len_means,
            # label='Control (N={})'.format(control_pop_c_len_n),
            color='r', marker='o'
        )
        ax2.fill_between(
            c_len_arr,
            control_pop_c_len_means - control_pop_c_len_stds,
            control_pop_c_len_means + control_pop_c_len_stds,
            alpha=0.2, color='r')

    ax2.plot(
        c_len_arr, model_pop_c_len_means,
        # label='Model (N={})'.format(model_pop_c_len_n),
        color='b', marker='x'
    )
    ax2.fill_between(
        c_len_arr,
        model_pop_c_len_means - model_pop_c_len_stds,
        model_pop_c_len_means + model_pop_c_len_stds,
        alpha=0.2, color='b')

    ax2.plot(monkey_ma['c_len'], neuro_c_len_results, color='black', marker='s', markersize=5, label='Measured')

    ax2.text(1, 4, 'B', fontsize=30)
    ax2.set_xticks(c_len_arr)
    ax2.set_xlabel("Length (fragments)")
    ax2.set_ylabel("Gain")
    ax2.set_ylim(bottom=-0.2)
    ax2.legend()

    # Gain Vs Fragment Spacing
    # ------------------------
    ax3 = f.add_subplot(gs[0, 8:12], sharey=ax2)

    if control_pop_space_n > 0:
        ax3.plot(
            spacing_arr,
            control_pop_space_means,
            label='Control (N={})'.format(control_pop_space_n),
            color='r', marker='o'
        )
        ax3.fill_between(
            spacing_arr,
            control_pop_space_means - control_pop_space_stds,
            control_pop_space_means + control_pop_space_stds,
            alpha=0.2, color='r')

    ax3.plot(
        spacing_arr, model_pop_space_means,
        label='Model (N={})'.format(model_pop_space_n),
        color='b', marker='x'
    )

    ax3.fill_between(
        spacing_arr,
        model_pop_space_means - model_pop_space_stds,
        model_pop_space_means + model_pop_space_stds,
        alpha=0.2, color='b')

    ax3.plot(monkey_ma['rcd'], neuro_space_results, color='black', marker='s', markersize=5)

    ax3.text(1, 4, 'C', fontsize=30)
    ax3.set_xlabel("Spacing (RCD)")
    # ax3.set_ylabel("Gain")
    # ax3.set_xlim([0.99, 2.01])
    # ax3.legend()

    # histogram Gain vs Length - Model
    # --------------------------------
    c_len_bin_max = 1.5
    c_len_bin_min = -0.2
    c_len_bins = np.arange(c_len_bin_min, c_len_bin_max + 0.1, 0.1)
    model_c_len_grads = get_gradients_of_linear_fits(c_len_arr, model_c_len_results)

    ax4 = f.add_subplot(gs[1, 0:3])

    ax4.hist(
        model_c_len_grads.clip(min=c_len_bin_min, max=c_len_bin_max),  # Include all data points
        label="Model", color='blue', bins=c_len_bins, edgecolor='black', linewidth=1.2)

    ax4.text(c_len_bin_min - 0.2, 60, 'D', fontsize=30)
    ax4.set_ylabel("Freq")
    ax4.set_xlabel("gradients - length")
    ax4.legend()
    ax4.set_xlim([c_len_bin_min-0.2, c_len_bin_max+0.3])

    # histogram Gain vs Spacing - Model
    # --------------------------------
    spacing_bin_max = 5
    spacing_bin_min = -10
    spacing_bins = np.arange(spacing_bin_min, spacing_bin_max + 1, 1)
    model_spacing_grads = get_gradients_of_linear_fits(spacing_arr, model_space_results)

    ax6 = f.add_subplot(gs[1, 3:6])

    ax6.hist(
        model_spacing_grads.clip(min=spacing_bin_min, max=spacing_bin_max),  # Include all data points
        label="Contour Int. (N={})".format(model_pop_space_n), color='blue', bins=spacing_bins,
        edgecolor='black', linewidth=1.2)

    ax6.text(spacing_bin_min, 85, 'E', fontsize=30)
    # ax6.set_ylabel("Freq")
    ax6.set_xlabel("gradients - spacing")
    # ax6.legend()

    # histogram Gain vs Length - Control
    # --------------------------------
    ax5 = f.add_subplot(gs[1, 6:9], sharex=ax4)
    if len(control_c_len_results) > 0:
        control_c_len_grads = get_gradients_of_linear_fits(c_len_arr, control_c_len_results)

        ax5.hist(
            control_c_len_grads.clip(min=c_len_bin_min, max=c_len_bin_max),  # Include all data points
            label="Control", color='red', bins=c_len_bins, edgecolor='black', linewidth=1.2)

    ax5.text(c_len_bin_min - 0.1, 32, 'F', fontsize=30)
    # ax5.set_ylabel("Freq")
    ax5.legend()
    ax5.set_xlabel("gradients - length")

    # histogram Gain vs Spacing - Control
    # --------------------------------
    # ax7 = f.add_subplot(gs[1, 9:12], sharex=ax6)
    ax7 = f.add_subplot(gs[1, 9:12])
    if control_pop_space_n > 0:
        control_spacing_grads = get_gradients_of_linear_fits(spacing_arr, control_space_results)

        z = ax7.hist(
            control_spacing_grads.clip(min=spacing_bin_min, max=spacing_bin_max),  # Include all data points
            label="Control (N={})".format(control_pop_space_n), color='red',
            bins=spacing_bins, edgecolor='black', linewidth=1.2)

    ax7.text(spacing_bin_min, 34, 'G', fontsize=30)
    # ax7.set_ylabel("Freq")
    # ax7.legend()
    ax7.set_xlabel("gradients - spacing")

    # ---------------------------------------------------------------------------------------------
    # End
    # ---------------------------------------------------------------------------------------------
    import pdb
    pdb.set_trace()
