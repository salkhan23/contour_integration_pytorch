# ---------------------------------------------------------------------------------------
# Compare Iou Vs Epoch for different Edge Detection Models
# ---------------------------------------------------------------------------------------
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

mpl.rcParams.update({
    'font.size': 18,
    'lines.linewidth': 3,
    'lines.markersize': 10,
})


# Dir: results/edge_detection/EdgeDetectionCSIResnet50_20200221_183717_6layer_edge_extract_lr_1e-3
EdgeDetectionCSIResnet50_6_post_layers = np.array([
    [0, 0.2393, 0.4047, 0.0682, 0.7172, 0.001],
    [1, 0.0509, 0.7424, 0.0413, 0.7675, 0.001],
    [2, 0.0389, 0.7677, 0.0363, 0.7781, 0.001],
    [3, 0.0346, 0.7817, 0.0338, 0.7820, 0.001],
    [4, 0.0327, 0.7896, 0.0326, 0.7872, 0.001],
    [5, 0.0313, 0.7954, 0.0321, 0.7892, 0.001],
    [6, 0.0306, 0.7999, 0.0321, 0.7892, 0.001],
    [7, 0.0307, 0.8009, 0.0371, 0.7775, 0.001],
    [8, 0.0301, 0.8057, 0.0297, 0.8050, 0.001],
    [9, 0.0293, 0.8085, 0.0299, 0.8035, 0.001],
    [10, 0.0295, 0.8090, 0.0290, 0.8107, 0.001],
    [11, 0.0286, 0.8126, 0.0285, 0.8122, 0.001],
    [12, 0.0282, 0.8142, 0.0279, 0.8167, 0.001],
    [13, 0.0280, 0.8156, 0.0278, 0.8181, 0.001],
    [14, 0.0277, 0.8169, 0.0277, 0.8180, 0.001],
    [15, 0.0275, 0.8182, 0.0275, 0.8188, 0.001],
    [16, 0.0274, 0.8191, 0.0273, 0.8192, 0.001],
    [17, 0.0274, 0.8199, 0.0273, 0.8198, 0.001],
    [18, 0.0271, 0.8210, 0.0269, 0.8220, 0.001],
    [19, 0.0269, 0.8219, 0.0268, 0.8227, 0.001],
    [20, 0.0268, 0.8227, 0.0266, 0.8230, 0.001],
    [21, 0.0267, 0.8234, 0.0267, 0.8233, 0.001],
    [22, 0.0266, 0.8241, 0.0267, 0.8231, 0.001],
    [23, 0.0267, 0.8245, 0.0265, 0.8244, 0.001],
    [24, 0.0264, 0.8252, 0.0260, 0.8272, 0.001],
    [25, 0.0263, 0.8258, 0.0262, 0.8258, 0.001],
    [26, 0.0263, 0.8260, 0.0261, 0.8273, 0.001],
    [27, 0.0262, 0.8268, 0.0259, 0.8276, 0.001],
    [28, 0.0261, 0.8271, 0.0257, 0.8320, 0.001],
    [29, 0.0261, 0.8276, 0.0256, 0.8302, 0.001],
    [30, 0.0260, 0.8281, 0.0257, 0.8291, 0.001],
    [31, 0.0232, 0.8407, 0.0228, 0.8414, 0.0001],
    [32, 0.0231, 0.8412, 0.0228, 0.8413, 0.0001],
    [33, 0.0230, 0.8415, 0.0228, 0.8414, 0.0001],
    [34, 0.0230, 0.8418, 0.0227, 0.8416, 0.0001],
    [35, 0.0229, 0.8420, 0.0227, 0.8417, 0.0001],
    [36, 0.0229, 0.8422, 0.0227, 0.8418, 0.0001],
    [37, 0.0229, 0.8424, 0.0227, 0.8419, 0.0001],
    [38, 0.0228, 0.8427, 0.0226, 0.8421, 0.0001],
    [39, 0.0228, 0.8428, 0.0226, 0.8422, 0.0001],
    [40, 0.0228, 0.8430, 0.0226, 0.8423, 0.0001],
    [41, 0.0227, 0.8432, 0.0226, 0.8424, 0.0001],
    [42, 0.0227, 0.8434, 0.0225, 0.8425, 0.0001],
    [43, 0.0227, 0.8435, 0.0225, 0.8425, 0.0001],
    [44, 0.0226, 0.8437, 0.0225, 0.8427, 0.0001],
    [45, 0.0226, 0.8439, 0.0225, 0.8428, 0.0001],
    [46, 0.0226, 0.8441, 0.0225, 0.8429, 0.0001],
    [47, 0.0226, 0.8442, 0.0224, 0.8430, 0.0001],
    [48, 0.0225, 0.8444, 0.0224, 0.8431, 0.0001],
    [49, 0.0225, 0.8446, 0.0224, 0.8431, 0.0001],
])

# Dir: results/edge_detection/EdgeDetectionCSIResnet50_20200221_183104_4layer_edge_extract_lr1e-3
EdgeDetectionCSIResnet50_4_post_layers = np.array([
    [0, 0.1433, 0.3252, 0.0492, 0.7292, 0.001],
    [1, 0.0433, 0.7444, 0.0384, 0.7655, 0.001],
    [2, 0.0380, 0.7692, 0.0357, 0.7770, 0.001],
    [3, 0.0344, 0.7832, 0.0327, 0.7907, 0.001],
    [4, 0.0329, 0.7910, 0.0318, 0.7930, 0.001],
    [5, 0.0317, 0.7968, 0.0307, 0.7990, 0.001],
    [6, 0.0309, 0.8010, 0.0299, 0.8045, 0.001],
    [7, 0.0311, 0.8013, 0.0298, 0.8053, 0.001],
    [8, 0.0299, 0.8070, 0.0293, 0.8085, 0.001],
    [9, 0.0294, 0.8096, 0.0287, 0.8123, 0.001],
    [10, 0.0290, 0.8119, 0.0279, 0.8172, 0.001],
    [11, 0.0287, 0.8137, 0.0277, 0.8187, 0.001],
    [12, 0.0285, 0.8152, 0.0274, 0.8212, 0.001],
    [13, 0.0284, 0.8167, 0.0274, 0.8221, 0.001],
    [14, 0.0281, 0.8180, 0.0272, 0.8227, 0.001],
    [15, 0.0278, 0.8195, 0.0270, 0.8233, 0.001],
    [16, 0.0278, 0.8207, 0.0269, 0.8243, 0.001],
    [17, 0.0279, 0.8204, 0.0268, 0.8293, 0.001],
    [18, 0.0273, 0.8230, 0.0263, 0.8283, 0.001],
    [19, 0.0271, 0.8241, 0.0261, 0.8302, 0.001],
    [20, 0.0270, 0.8249, 0.0259, 0.8310, 0.001],
    [21, 0.0269, 0.8259, 0.0256, 0.8336, 0.001],
    [22, 0.0267, 0.8268, 0.0255, 0.8344, 0.001],
    [23, 0.0266, 0.8274, 0.0254, 0.8354, 0.001],
    [24, 0.0265, 0.8282, 0.0255, 0.8343, 0.001],
    [25, 0.0264, 0.8290, 0.0250, 0.8385, 0.001],
    [26, 0.0264, 0.8296, 0.0251, 0.8379, 0.001],
    [27, 0.0262, 0.8304, 0.0251, 0.8369, 0.001],
    [28, 0.0260, 0.8312, 0.0249, 0.8389, 0.001],
    [29, 0.0259, 0.8319, 0.0253, 0.8372, 0.001],
    [30, 0.0259, 0.8322, 0.0249, 0.8388, 0.001],
    [31, 0.0229, 0.8458, 0.0221, 0.8519, 0.0001],
    [32, 0.0228, 0.8464, 0.0220, 0.8525, 0.0001],
    [33, 0.0227, 0.8468, 0.0219, 0.8529, 0.0001],
    [34, 0.0227, 0.8471, 0.0218, 0.8533, 0.0001],
    [35, 0.0226, 0.8475, 0.0218, 0.8538, 0.0001],
    [36, 0.0226, 0.8477, 0.0217, 0.8541, 0.0001],
    [37, 0.0225, 0.8480, 0.0217, 0.8543, 0.0001],
    [38, 0.0225, 0.8482, 0.0216, 0.8545, 0.0001],
    [39, 0.0224, 0.8484, 0.0216, 0.8547, 0.0001],
    [40, 0.0224, 0.8486, 0.0216, 0.8549, 0.0001],
    [41, 0.0224, 0.8488, 0.0215, 0.8551, 0.0001],
    [42, 0.0223, 0.8490, 0.0215, 0.8553, 0.0001],
    [43, 0.0223, 0.8492, 0.0215, 0.8555, 0.0001],
    [44, 0.0223, 0.8494, 0.0214, 0.8557, 0.0001],
    [45, 0.0222, 0.8495, 0.0214, 0.8558, 0.0001],
    [46, 0.0222, 0.8497, 0.0214, 0.8560, 0.0001],
    [47, 0.0222, 0.8498, 0.0214, 0.8561, 0.0001],
    [48, 0.0222, 0.8500, 0.0213, 0.8562, 0.0001],
    [49, 0.0221, 0.8501, 0.0213, 0.8564, 0.0001],
])

# Dir: results/edge_detection/EdgeDetectionCSIResnet50_20200222_164015_3layer_edge_extract_lr_1e-3
EdgeDetectionCSIResnet50_3_post_layers = np.array([
    [0, 0.1920, 0.2381, 0.0603, 0.6847, 0.001],
    [1, 0.0516, 0.7145, 0.0451, 0.7248, 0.001],
    [2, 0.0426, 0.7448, 0.0398, 0.7518, 0.001],
    [3, 0.0400, 0.7577, 0.0386, 0.7672, 0.001],
    [4, 0.0372, 0.7705, 0.0365, 0.7725, 0.001],
    [5, 0.0368, 0.7746, 0.0349, 0.7782, 0.001],
    [6, 0.0341, 0.7823, 0.0332, 0.7854, 0.001],
    [7, 0.0338, 0.7857, 0.0326, 0.7911, 0.001],
    [8, 0.0328, 0.7894, 0.0318, 0.7954, 0.001],
    [9, 0.0323, 0.7920, 0.0314, 0.7989, 0.001],
    [10, 0.0319, 0.7942, 0.0310, 0.8013, 0.001],
    [11, 0.0315, 0.7961, 0.0308, 0.8033, 0.001],
    [12, 0.0313, 0.7977, 0.0305, 0.8054, 0.001],
    [13, 0.0310, 0.7993, 0.0301, 0.8078, 0.001],
    [14, 0.0308, 0.8007, 0.0297, 0.8098, 0.001],
    [15, 0.0306, 0.8021, 0.0294, 0.8114, 0.001],
    [16, 0.0303, 0.8034, 0.0292, 0.8127, 0.001],
    [17, 0.0302, 0.8046, 0.0289, 0.8135, 0.001],
    [18, 0.0300, 0.8057, 0.0288, 0.8142, 0.001],
    [19, 0.0298, 0.8067, 0.0286, 0.8156, 0.001],
    [20, 0.0297, 0.8078, 0.0286, 0.8158, 0.001],
    [21, 0.0295, 0.8088, 0.0285, 0.8164, 0.001],
    [22, 0.0294, 0.8098, 0.0283, 0.8178, 0.001],
    [23, 0.0292, 0.8108, 0.0280, 0.8191, 0.001],
    [24, 0.0291, 0.8116, 0.0281, 0.8194, 0.001],
    [25, 0.0289, 0.8125, 0.0281, 0.8195, 0.001],
    [26, 0.0288, 0.8132, 0.0278, 0.8208, 0.001],
    [27, 0.0287, 0.8139, 0.0280, 0.8201, 0.001],
    [28, 0.0289, 0.8144, 0.0280, 0.8217, 0.001],
    [29, 0.0286, 0.8153, 0.0277, 0.8222, 0.001],
    [30, 0.0286, 0.8157, 0.0278, 0.8228, 0.001],
    [31, 0.0257, 0.8288, 0.0248, 0.8350, 0.0001],
    [32, 0.0255, 0.8294, 0.0247, 0.8353, 0.0001],
    [33, 0.0254, 0.8298, 0.0245, 0.8358, 0.0001],
    [34, 0.0253, 0.8301, 0.0245, 0.8362, 0.0001],
    [35, 0.0253, 0.8305, 0.0244, 0.8365, 0.0001],
    [36, 0.0252, 0.8307, 0.0243, 0.8367, 0.0001],
    [37, 0.0252, 0.8310, 0.0243, 0.8370, 0.0001],
    [38, 0.0251, 0.8312, 0.0243, 0.8373, 0.0001],
    [39, 0.0251, 0.8314, 0.0242, 0.8375, 0.0001],
    [40, 0.0250, 0.8317, 0.0242, 0.8378, 0.0001],
    [41, 0.0250, 0.8319, 0.0242, 0.8380, 0.0001],
    [42, 0.0250, 0.8320, 0.0241, 0.8381, 0.0001],
    [43, 0.0249, 0.8322, 0.0241, 0.8383, 0.0001],
    [44, 0.0249, 0.8324, 0.0241, 0.8385, 0.0001],
    [45, 0.0249, 0.8326, 0.0240, 0.8386, 0.0001],
    [46, 0.0248, 0.8328, 0.0240, 0.8388, 0.0001],
    [47, 0.0248, 0.8329, 0.0240, 0.8390, 0.0001],
    [48, 0.0248, 0.8331, 0.0240, 0.8391, 0.0001],
    [49, 0.0248, 0.8332, 0.0239, 0.8392, 0.0001],
])

# Dir : results/edge_detection/EdgeDetectionCSIResnet50_20200223_111512_2layer_edge_extract_lr_1e-3
EdgeDetectionCSIResnet50_2_post_layers = np.array([
    [0, 0.2204, 0.2986, 0.0639, 0.6749, 0.001],
    [1, 0.0532, 0.6978, 0.0462, 0.7265, 0.001],
    [2, 0.0458, 0.7290, 0.0413, 0.7500, 0.001],
    [3, 0.0409, 0.7487, 0.0380, 0.7600, 0.001],
    [4, 0.0380, 0.7610, 0.0358, 0.7681, 0.001],
    [5, 0.0363, 0.7702, 0.0348, 0.7727, 0.001],
    [6, 0.0352, 0.7770, 0.0340, 0.7778, 0.001],
    [7, 0.0342, 0.7822, 0.0335, 0.7788, 0.001],
    [8, 0.0335, 0.7861, 0.0333, 0.7792, 0.001],
    [9, 0.0330, 0.7895, 0.0329, 0.7812, 0.001],
    [10, 0.0326, 0.7923, 0.0325, 0.7836, 0.001],
    [11, 0.0336, 0.7915, 0.0332, 0.7829, 0.001],
    [12, 0.0322, 0.7967, 0.0323, 0.7861, 0.001],
    [13, 0.0316, 0.7988, 0.0321, 0.7853, 0.001],
    [14, 0.0313, 0.8007, 0.0317, 0.7882, 0.001],
    [15, 0.0310, 0.8026, 0.0317, 0.7886, 0.001],
    [16, 0.0307, 0.8042, 0.0314, 0.7901, 0.001],
    [17, 0.0305, 0.8055, 0.0309, 0.7940, 0.001],
    [18, 0.0303, 0.8069, 0.0307, 0.7953, 0.001],
    [19, 0.0301, 0.8080, 0.0305, 0.7968, 0.001],
    [20, 0.0299, 0.8091, 0.0304, 0.7978, 0.001],
    [21, 0.0298, 0.8100, 0.0303, 0.7978, 0.001],
    [22, 0.0297, 0.8108, 0.0301, 0.7995, 0.001],
    [23, 0.0295, 0.8116, 0.0299, 0.8021, 0.001],
    [24, 0.0300, 0.8117, 0.0301, 0.8026, 0.001],
    [25, 0.0298, 0.8126, 0.0298, 0.8047, 0.001],
    [26, 0.0294, 0.8135, 0.0295, 0.8047, 0.001],
    [27, 0.0292, 0.8141, 0.0294, 0.8051, 0.001],
    [28, 0.0291, 0.8147, 0.0292, 0.8066, 0.001],
    [29, 0.0290, 0.8153, 0.0291, 0.8075, 0.001],
    [30, 0.0293, 0.8152, 0.0291, 0.8097, 0.001],
    [31, 0.0263, 0.8293, 0.0255, 0.8340, 0.0001],
    [32, 0.0261, 0.8298, 0.0253, 0.8342, 0.0001],
    [33, 0.0260, 0.8301, 0.0252, 0.8345, 0.0001],
    [34, 0.0259, 0.8305, 0.0251, 0.8348, 0.0001],
    [35, 0.0258, 0.8308, 0.0250, 0.8350, 0.0001],
    [36, 0.0257, 0.8310, 0.0249, 0.8353, 0.0001],
    [37, 0.0256, 0.8313, 0.0249, 0.8356, 0.0001],
    [38, 0.0256, 0.8315, 0.0249, 0.8358, 0.0001],
    [39, 0.0256, 0.8317, 0.0248, 0.8359, 0.0001],
    [40, 0.0255, 0.8319, 0.0248, 0.8361, 0.0001],
    [41, 0.0255, 0.8321, 0.0248, 0.8363, 0.0001],
    [42, 0.0254, 0.8323, 0.0247, 0.8365, 0.0001],
    [43, 0.0254, 0.8325, 0.0247, 0.8366, 0.0001],
    [44, 0.0254, 0.8327, 0.0247, 0.8368, 0.0001],
    [45, 0.0253, 0.8328, 0.0246, 0.8369, 0.0001],
    [46, 0.0253, 0.8330, 0.0246, 0.8371, 0.0001],
    [47, 0.0253, 0.8331, 0.0246, 0.8372, 0.0001],
    [48, 0.0253, 0.8333, 0.0246, 0.8372, 0.0001],
    [49, 0.0252, 0.8334, 0.0245, 0.8374, 0.0001],
])

# Control Models
# Dir: results/edge_detection/EdgeDetectionControlResnet50_20200225_174141
EdgeDetectionControlResnet50_6_post_layers = np.array([
    [0, 0.3173, 0.4552, 0.0927, 0.6211, 0.001],
    [1, 0.0672, 0.6521, 0.0549, 0.6663, 0.001],
    [2, 0.0517, 0.6790, 0.0492, 0.6824, 0.001],
    [3, 0.0477, 0.6897, 0.0478, 0.6848, 0.001],
    [4, 0.0459, 0.6960, 0.0460, 0.6911, 0.001],
    [5, 0.0447, 0.7012, 0.0450, 0.6971, 0.001],
    [6, 0.0438, 0.7056, 0.0441, 0.7018, 0.001],
    [7, 0.0432, 0.7087, 0.0431, 0.7074, 0.001],
    [8, 0.0428, 0.7110, 0.0428, 0.7080, 0.001],
    [9, 0.0424, 0.7129, 0.0432, 0.7039, 0.001],
    [10, 0.0421, 0.7146, 0.0431, 0.7030, 0.001],
    [11, 0.0418, 0.7163, 0.0430, 0.7047, 0.001],
    [12, 0.0414, 0.7181, 0.0429, 0.7062, 0.001],
    [13, 0.0411, 0.7201, 0.0426, 0.7105, 0.001],
    [14, 0.0408, 0.7220, 0.0425, 0.7115, 0.001],
    [15, 0.0405, 0.7237, 0.0424, 0.7133, 0.001],
    [16, 0.0402, 0.7253, 0.0425, 0.7139, 0.001],
    [17, 0.0400, 0.7266, 0.0426, 0.7148, 0.001],
    [18, 0.0398, 0.7277, 0.0418, 0.7184, 0.001],
    [19, 0.0396, 0.7288, 0.0420, 0.7184, 0.001],
    [20, 0.0394, 0.7299, 0.0426, 0.7132, 0.001],
    [21, 0.0393, 0.7308, 0.0423, 0.7144, 0.001],
    [22, 0.0391, 0.7316, 0.0428, 0.7115, 0.001],
    [23, 0.0390, 0.7323, 0.0435, 0.7080, 0.001],
    [24, 0.0389, 0.7330, 0.0437, 0.7073, 0.001],
    [25, 0.0388, 0.7336, 0.0431, 0.7096, 0.001],
    [26, 0.0387, 0.7341, 0.0411, 0.7187, 0.001],
    [27, 0.0386, 0.7346, 0.0420, 0.7135, 0.001],
    [28, 0.0385, 0.7351, 0.0425, 0.7108, 0.001],
    [29, 0.0385, 0.7355, 0.0429, 0.7088, 0.001],
    [30, 0.0384, 0.7359, 0.0427, 0.7096, 0.001],
    [31, 0.0376, 0.7412, 0.0372, 0.7437, 0.0001],
    [32, 0.0375, 0.7413, 0.0372, 0.7441, 0.0001],
    [33, 0.0375, 0.7414, 0.0372, 0.7442, 0.0001],
    [34, 0.0375, 0.7415, 0.0372, 0.7443, 0.0001],
    [35, 0.0375, 0.7416, 0.0372, 0.7445, 0.0001],
    [36, 0.0375, 0.7417, 0.0372, 0.7445, 0.0001],
    [37, 0.0374, 0.7418, 0.0371, 0.7447, 0.0001],
    [38, 0.0374, 0.7419, 0.0371, 0.7448, 0.0001],
    [39, 0.0374, 0.7420, 0.0371, 0.7448, 0.0001],
    [40, 0.0374, 0.7420, 0.0371, 0.7449, 0.0001],
    [41, 0.0374, 0.7421, 0.0371, 0.7449, 0.0001],
    [42, 0.0374, 0.7422, 0.0371, 0.7450, 0.0001],
    [43, 0.0374, 0.7423, 0.0371, 0.7450, 0.0001],
    [44, 0.0373, 0.7423, 0.0371, 0.7451, 0.0001],
    [45, 0.0373, 0.7424, 0.0370, 0.7451, 0.0001],
    [46, 0.0373, 0.7425, 0.0370, 0.7452, 0.0001],
    [47, 0.0373, 0.7425, 0.0370, 0.7452, 0.0001],
    [48, 0.0373, 0.7426, 0.0370, 0.7452, 0.0001],
    [49, 0.0373, 0.7427, 0.0370, 0.7453, 0.0001],
])


if __name__ == "__main__":
    plt.ion()

    # -----------------------------------------------------------------------
    # Collectively IOU in one figure
    # ----------------------------------------------------------------------

    plt.figure()
    plt.plot(
        EdgeDetectionCSIResnet50_6_post_layers[:, 0],
        EdgeDetectionCSIResnet50_6_post_layers[:, 2],
        label='train_6_post_layers',
        linestyle='--',
        color='blue',
        marker='+'
    )
    plt.plot(
        EdgeDetectionCSIResnet50_6_post_layers[:, 0],
        EdgeDetectionCSIResnet50_6_post_layers[:, 4],
        label='val_6_post_layers',
        linestyle='-',
        color='blue',
        marker='+'
    )

    plt.plot(
        EdgeDetectionCSIResnet50_4_post_layers[:, 0],
        EdgeDetectionCSIResnet50_4_post_layers[:, 2],
        label='train_4_post_layers',
        linestyle='--',
        color='red',
        marker='x'
    )
    plt.plot(
        EdgeDetectionCSIResnet50_4_post_layers[:, 0],
        EdgeDetectionCSIResnet50_4_post_layers[:, 4],
        label='val_4_post_layers',
        linestyle='-',
        color='red',
        marker='x'
    )

    plt.plot(
        EdgeDetectionCSIResnet50_3_post_layers[:, 0],
        EdgeDetectionCSIResnet50_3_post_layers[:, 2],
        label='train_3_post_layers',
        linestyle='--',
        color='green',
        marker='d',

    )
    plt.plot(
        EdgeDetectionCSIResnet50_3_post_layers[:, 0],
        EdgeDetectionCSIResnet50_3_post_layers[:, 4],
        label='val_3_post_layers',
        linestyle='-',
        color='green',
        marker='d',
    )

    plt.plot(
        EdgeDetectionCSIResnet50_2_post_layers[:, 0],
        EdgeDetectionCSIResnet50_2_post_layers[:, 2],
        label='train_2_post_layers',
        linestyle='--',
        color='magenta',
        marker='o'
    )
    plt.plot(
        EdgeDetectionCSIResnet50_2_post_layers[:, 0],
        EdgeDetectionCSIResnet50_2_post_layers[:, 4],
        label='val_2_post_layers',
        linestyle='-',
        color='magenta',
        marker='o'
    )

    plt.plot(
        EdgeDetectionControlResnet50_6_post_layers[:, 0],
        EdgeDetectionControlResnet50_6_post_layers[:, 2],
        label='train_control_6_post_layers',
        linestyle='--',
        color='black',
        marker='o'
    )
    plt.plot(
        EdgeDetectionControlResnet50_6_post_layers[:, 0],
        EdgeDetectionControlResnet50_6_post_layers[:, 4],
        label='val_control_2_post_layers',
        linestyle='-',
        color='black',
        marker='o'
    )

    plt.xlabel("Epoch")
    plt.ylabel("IoU")
    plt.legend()
    plt.grid(True)

    # ---------------------------------------------------------
    import pdb
    pdb.set_trace()
