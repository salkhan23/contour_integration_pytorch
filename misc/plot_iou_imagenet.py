# ---------------------------------------------------------------------------------------
# Plot Results of Classification task on Imagenet.
# Data below is for a contour/control model embedded into a pretrained resnet 50 model
# ---------------------------------------------------------------------------------------

import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np


mpl.rcParams.update({
    'font.size': 18,
    'lines.linewidth': 3}
)

# Epoch, train_loss, train_accTop1, train_accTop5, val_loss val_accTop1, val_accTop5
resnet50 = np.array([
    [0, np.nan, np.nan, np.nan, 99.7150, 0.0880, 0.5240],
    [1, 1.3778, 67.1625, 86.6148, 1.1696, 71.0980, 90.4900],
    [2, 1.3723, 67.3913, 86.6757, 1.1576, 71.6500, 90.6480],
    [3, 1.3605, 67.6246, 86.8548, 1.1490, 71.6420, 90.6760],
    [4, 1.3531, 67.7990, 86.9541, 1.1414, 71.7460, 90.5920],
    [5, 1.3477, 67.9132, 87.0081, 1.1361, 72.0000, 90.9420],
    [6, 1.3426, 68.0838, 87.0499, 1.1365, 71.8140, 90.9320],
    [7, 1.3358, 68.1866, 87.1630, 1.1368, 71.9040, 90.8940],
    [8, 1.3313, 68.3145, 87.2512, 1.1248, 71.8900, 90.9760],
    [9, 1.3260, 68.4054, 87.2633, 1.1326, 72.1260, 90.8840],
    [10, 1.3229, 68.4846, 87.3188, 1.1312, 72.0360, 91.0220],
    [11, 1.3219, 68.4811, 87.3444, 1.1304, 71.9520, 90.8920],
    [12, 1.3149, 68.6619, 87.4211, 1.1190, 72.3380, 91.0880],
    [13, 1.3138, 68.6875, 87.4344, 1.1222, 72.2320, 90.9280],
    [14, 1.3106, 68.7527, 87.4928, 1.1191, 72.3620, 91.1580],
    [15, 1.3090, 68.7693, 87.4792, 1.1219, 72.4220, 91.0840],
    [16, 1.3045, 68.8677, 87.5595, 1.1238, 72.2320, 91.1240],
])

resnet50_with_contour_integration = np.array([

    [0, np.nan, np.nan, np.nan, 111.5272, 0.0940, 0.5140],
    [1, 1.0255, 75.2473, 90.8658, 0.9665, 75.9240, 92.8420],
    [2, 0.9979, 75.8195, 91.1970, 0.9702, 75.9820, 92.8560],
    [3, 0.9878, 76.0187, 91.3287, 0.9623, 76.0160, 92.9500],
    [4, 0.9846, 76.0830, 91.3633, 0.9603, 76.1500, 92.9040],
    [5, 0.9810, 76.1705, 91.3917, 0.9641, 76.0440, 92.8500],
    [6, 0.9782, 76.2934, 91.4149, 0.9611, 76.2480, 92.9080],
    [7, 0.9739, 76.3745, 91.4758, 0.9629, 76.1900, 92.9880],
    [8, 0.9686, 76.4634, 91.5284, 0.9618, 76.2000, 92.9440],
    [9, 0.9678, 76.4795, 91.5498, 0.9680, 76.1620, 92.9300],
    [10, 0.9646, 76.5743, 91.5787, 0.9620, 76.2480, 92.9640],
    [11, 0.9613, 76.6184, 91.6250, 0.9589, 76.1960, 92.9660],
    [12, 0.9593, 76.6541, 91.6233, 0.9588, 76.1920, 92.9580],
    [13, 0.9554, 76.7677, 91.6793, 0.9575, 76.2560, 92.9980],
    [14, 0.9536, 76.7869, 91.6748, 0.9639, 76.1800, 92.9880],
    [15, 0.9512, 76.8647, 91.7389, 0.9661, 76.3660, 93.0140],
    [16, 0.9490, 76.9125, 91.7620, 0.9648, 76.3120, 93.0140],
    [17, 0.9477, 76.9639, 91.7836, 0.9623, 76.2320, 93.0160],
    [18, 0.9453, 77.0120, 91.7896, 0.9633, 76.3160, 93.0380],
    [19, 0.9408, 77.1097, 91.8602, 0.9670, 76.1420, 92.9220],
    [20, 0.9403, 77.1261, 91.8407, 0.9690, 76.1140, 92.8960],
])

resnet50_with_control = np.array([
    [0, np.nan, np.nan, np.nan, 111.2465, 0.0940, 0.5080],
    [1, 1.4543, 66.2405, 85.4627, 1.1655, 71.1600, 90.4180],
    [2, 1.3679, 67.4306, 86.7561, 1.1575, 71.3660, 90.6160],
    [3, 1.3567, 67.7494, 86.9013, 1.1449, 71.7160, 90.6960],
    [4, 1.3492, 67.8949, 87.0052, 1.1605, 71.3760, 90.7060],
    [5, 1.3422, 68.0682, 87.0793, 1.1342, 71.8220, 90.8120],
    [6, 1.3368, 68.1745, 87.1363, 1.1436, 71.7800, 90.7720],
    [7, 1.3329, 68.2649, 87.1969, 1.1378, 71.6440, 90.8660],
    [8, 1.3281, 68.3910, 87.2972, 1.1330, 71.9140, 90.8720],
    [9, 1.3255, 68.4101, 87.2781, 1.1288, 72.1720, 90.8520],
    [10, 1.3197, 68.5493, 87.3718, 1.1390, 72.1060, 90.8700],
    [11, 1.3165, 68.5976, 87.4439, 1.1267, 72.4960, 91.0860],
    [12, 1.3132, 68.6213, 87.4550, 1.1263, 72.2880, 90.9400],
])

alexnet_with_contour_integration = np.array([
    [0, np.nan, np.nan, np.nan, 6.7912, 4.7520, 12.0100],
    [1, 2.2111, 50.3333, 73.9547, 1.9361, 55.9980, 78.7700],
    [2, 2.1870, 50.7287, 74.3358, 1.9246, 56.0560, 78.9660],
    [3, 2.1782, 50.8859, 74.4587, 1.9206, 56.3040, 78.9220],
    [4, 2.1746, 50.9885, 74.4796, 1.9146, 56.3520, 79.0520],
    [5, 2.1681, 51.1189, 74.6372, 1.9168, 56.3960, 79.0200],
    [6, 2.1640, 51.2181, 74.7049, 1.9194, 56.2460, 79.0220],
    [7, 2.1607, 51.2864, 74.7601, 1.9082, 56.4660, 79.1080],
    [8, 2.1596, 51.2619, 74.8080, 1.9121, 56.3920, 79.0680],
    [9, 2.1538, 51.3415, 74.8045, 1.9128, 56.3360, 79.1000],
    [10, 2.1530, 51.3334, 74.8983, 1.9176, 56.0660, 79.0700],
    [11, 2.1491, 51.4519, 74.9516, 1.9138, 56.2600, 79.0540],
    [12, 2.1457, 51.4970, 74.9886, 1.9052, 56.6300, 79.1740],
])

# Dir: /results/imagenet_classification/ResNet_20200212_202439_untrained_gaussian_reg_epochs_12_momentum_0.9_lr_0.1
resnet50_with_contour_integration_untrained = np.array([
    [0, np.nan, np.nan, np.nan, 155.2347, 0.1080, 0.5060],
    [1, 6.2025, 2.1861, 7.1014, 5.2557, 6.9660, 19.3040],
    [2, 5.0548, 9.4469, 23.9605, 4.9335, 10.9460, 26.6400],
    [3, 4.6422, 13.7444, 31.6541, 4.6087, 14.3720, 33.2400],
    [4, 4.4529, 15.8833, 35.1979, 4.3310, 16.7820, 37.7920],
    [5, 4.3391, 17.2767, 37.4412, 4.9650, 12.6180, 30.3060],
    [6, 4.2691, 18.1023, 38.7575, 4.0826, 19.9400, 42.0500],
    [7, 4.2165, 18.7585, 39.7686, 3.9239, 21.9760, 45.1260],
    [8, 4.1734, 19.3142, 40.5751, 4.0668, 20.4340, 42.8840],
    [9, 4.1296, 19.8879, 41.3948, 4.0417, 20.4360, 43.4140],
    [10, 4.1010, 20.2645, 41.9001, 3.8762, 21.8620, 46.0000],
    [11, 4.0791, 20.5215, 42.3861, 3.8791, 22.4600, 46.4040],
    [12, 4.0634, 20.8013, 42.6405, 4.0823, 20.5000, 43.3500],
    [13, 4.0482, 20.9582, 42.9298, 4.0047, 21.2560, 44.0820],
    [14, 4.0393, 21.0336, 43.0581, 3.8974, 22.8420, 46.4700],
    [15, 4.0330, 21.1315, 43.1974, 4.2419, 18.4720, 40.0620],
    [16, 4.0202, 21.3123, 43.4473, 3.7601, 23.3960, 48.4480],
    [17, 3.9991, 21.5835, 43.8011, 3.8021, 24.1440, 48.5200],
    [18, 3.9834, 21.7542, 44.1605, 3.8147, 23.3800, 47.4800],
    [19, 3.9746, 21.9165, 44.2940, 3.8055, 23.8760, 48.0080],
    [20, 3.9719, 21.8748, 44.3225, 3.8545, 22.2520, 46.3780],
    [21, 3.9693, 21.9384, 44.3986, 3.7129, 24.7680, 49.8840],
    [22, 3.9646, 22.0390, 44.5302, 3.7680, 24.0380, 49.0780],
    [23, 3.9628, 22.0604, 44.5495, 3.6810, 25.1520, 50.1920],
    [24, 3.9577, 22.1150, 44.6320, 3.8347, 23.6400, 47.4560],
    [25, 3.9528, 22.1359, 44.7388, 3.7852, 23.6420, 48.5320],
    [26, 3.9474, 22.3193, 44.8596, 4.1715, 20.0820, 41.9040],
    [27, 3.9393, 22.3111, 44.9439, 3.8238, 23.6680, 47.1040],
    [28, 3.9406, 22.3056, 44.9578, 3.6995, 25.0900, 49.8080],
    [29, 3.9376, 22.3520, 45.0160, 3.8341, 23.3440, 47.2040],
    [30, 3.9370, 22.4639, 45.0161, 3.7189, 24.2940, 49.2340],
    [31, 2.8417, 39.6779, 64.1812, 2.2826, 48.1440, 74.0840],
    [32, 2.7065, 41.8616, 66.5296, 2.2673, 48.5480, 74.3560],
    [33, 2.6733, 42.4137, 67.1246, 2.2117, 49.4700, 75.2680],
    [34, 2.6377, 43.0456, 67.6871, 2.2851, 48.2360, 74.1600],
    [35, 2.6075, 43.5760, 68.2402, 2.1709, 50.4720, 75.9280],
    [36, 2.5819, 44.0622, 68.6876, 2.2351, 49.4580, 75.0640],
    [37, 2.5608, 44.4491, 69.0208, 2.1353, 51.0200, 76.4280],
    [38, 2.5448, 44.6673, 69.2565, 2.1136, 51.4000, 76.9500],
    [39, 2.5294, 44.9861, 69.4951, 2.1209, 51.4620, 76.7120],
    [40, 2.5212, 45.1513, 69.6492, 2.0952, 51.7660, 77.2140],
    [41, 2.5105, 45.3428, 69.8145, 2.0706, 52.5100, 77.7140],
    [42, 2.5032, 45.3911, 69.9667, 2.1097, 51.5460, 76.8240],
    [43, 2.4947, 45.6047, 70.0612, 2.1012, 51.8060, 77.1420],
    [44, 2.4895, 45.7009, 70.1895, 2.0804, 51.9400, 77.5400],
    [45, 2.4843, 45.7617, 70.2858, 2.0829, 52.0080, 77.4240],
    [46, 2.4759, 45.9056, 70.3809, 2.0742, 52.2780, 77.5660],
    [47, 2.4741, 46.0036, 70.4840, 2.1084, 51.5920, 77.0320],
    [48, 2.4677, 46.0759, 70.5433, 2.0588, 52.8120, 77.9120],
    [49, 2.4644, 46.1376, 70.5649, 2.0672, 52.6800, 77.6100],
    [50, 2.4607, 46.1702, 70.6516, 2.0829, 52.5020, 77.6480],
    [51, 2.4573, 46.2383, 70.7055, 2.0576, 52.8820, 77.8820],
    [52, 2.4544, 46.3189, 70.7619, 2.0853, 52.3800, 77.2520],
    [53, 2.4514, 46.3880, 70.7697, 2.0565, 52.3760, 77.9580],
    [54, 2.4471, 46.4253, 70.8619, 2.0513, 52.8880, 78.0160],
    [55, 2.4454, 46.4814, 70.9209, 2.1075, 51.9500, 77.0820],
    [56, 2.4464, 46.5363, 70.8767, 2.0609, 52.5780, 77.6960],
    [57, 2.4416, 46.5649, 70.9631, 2.0523, 52.7360, 77.7860],
    [58, 2.4384, 46.6237, 71.0504, 2.0327, 53.2360, 78.2780],
    [59, 2.4385, 46.5543, 71.0358, 2.0463, 53.0180, 78.2480],
    [60, 2.4336, 46.6851, 71.0707, 2.0315, 53.3280, 78.2020],
    [61, 1.9349, 56.4741, 78.6584, 1.5309, 63.4740, 85.3560],
    [62, 1.8190, 58.6918, 80.3277, 1.4801, 64.5980, 86.0340],
    [63, 1.7725, 59.6559, 81.0189, 1.4504, 65.1600, 86.4020],
    [64, 1.7412, 60.1870, 81.4417, 1.4418, 65.2240, 86.6900],
    [65, 1.7180, 60.6717, 81.8248, 1.4241, 65.5760, 86.8420],
    [66, 1.7029, 60.9820, 82.0093, 1.4134, 65.8600, 86.9840],
    [67, 1.6919, 61.1721, 82.1957, 1.4015, 66.0960, 87.1220],
    [68, 1.6817, 61.4057, 82.3617, 1.4031, 66.3260, 87.0980],
    [69, 1.6701, 61.6191, 82.4967, 1.3997, 66.4200, 87.1040],
    [70, 1.6722, 61.5658, 82.4785, 1.4153, 66.0360, 86.8660],
    [71, 1.6667, 61.7066, 82.5358, 1.4069, 66.2520, 87.0940],
    [72, 1.6635, 61.7601, 82.5964, 1.4043, 66.1020, 87.0880],
    [73, 1.6611, 61.7444, 82.6051, 1.4030, 66.3020, 87.2160],
    [74, 1.6613, 61.7760, 82.6443, 1.3973, 66.2920, 87.0480],
    [75, 1.6591, 61.7758, 82.6913, 1.3985, 66.1840, 87.1960],
    [76, 1.6570, 61.8267, 82.6975, 1.4029, 66.1360, 87.0860],
    [77, 1.6540, 61.8545, 82.7472, 1.4092, 66.2900, 87.0060],
    [78, 1.6571, 61.8103, 82.7392, 1.4000, 66.4460, 87.1960],
    [79, 1.6524, 61.9317, 82.8038, 1.4016, 66.3600, 87.2040],
    [80, 1.6502, 61.9442, 82.8036, 1.4044, 66.2260, 87.0940],
    [81, 1.6482, 61.9951, 82.8187, 1.3960, 66.4720, 87.1760],
    [82, 1.6477, 62.0007, 82.8549, 1.4065, 66.1520, 87.0760],
    [83, 1.6436, 62.0968, 82.9009, 1.4020, 66.2020, 87.2460],
    [84, 1.6440, 62.0738, 82.9028, 1.3962, 66.2840, 87.1760],
    [85, 1.6405, 62.1261, 82.9592, 1.4140, 66.1420, 87.2160],
    [86, 1.6373, 62.1782, 82.9897, 1.4000, 66.3720, 87.2320],
    [87, 1.6350, 62.2500, 83.0179, 1.3863, 66.7400, 87.4880],
    [88, 1.6315, 62.2562, 83.0732, 1.3984, 66.5780, 87.2640],
    [89, 1.6293, 62.3449, 83.0958, 1.3987, 66.5220, 87.1600],
    [90, 1.6266, 62.3952, 83.1398, 1.3901, 66.7380, 87.3540],
])

# ---------------------------------------------------------------------------------------
plt.ion()

# Resnet50 Pre-trained Results
# -----------------------------
f, ax_arr = plt.subplots(2, 1, sharex=True)
ax_arr[0].plot(resnet50[:, 2], label='train - resnet50')
ax_arr[0].plot(resnet50_with_contour_integration[:, 2], label='+ contour integration')
ax_arr[0].plot(resnet50_with_control[:, 2], label='+ control')
ax_arr[0].set_title("Train")
ax_arr[0].legend()
ax_arr[0].set_ylabel("Accuracy")
ax_arr[0].grid()

ax_arr[1].plot(resnet50[:, 5], label='val - resnet50')
ax_arr[1].plot(resnet50_with_contour_integration[:, 5], label='+ contour integration')
ax_arr[1].plot(resnet50_with_control[:, 5], label='val + control')
ax_arr[1].axhline((100 - 23.85), linestyle='--', color='black')
ax_arr[1].text(0, (100 - 23.85), 'Published', color='black')
ax_arr[1].set_xlabel("Epoch")
ax_arr[1].set_ylabel("Accuracy")
ax_arr[1].set_title("Validation")
ax_arr[1].legend()
ax_arr[1].grid()

f.suptitle("Top1 Accuracy")


f, ax_arr = plt.subplots(2, 1, sharex=True)
ax_arr[0].plot(resnet50[:, 3], label='resnet50')
ax_arr[0].plot(resnet50_with_contour_integration[:, 3], label='+ contour integration')
ax_arr[0].plot(resnet50_with_control[:, 3], label='+ control')
ax_arr[0].set_title("Train")
ax_arr[0].legend()
ax_arr[0].set_ylabel("Accuracy")
ax_arr[0].grid()

ax_arr[1].plot(resnet50[:, 6], label='resnet50')
ax_arr[1].plot(resnet50_with_contour_integration[:, 6], label='+ contour control')
ax_arr[1].plot(resnet50_with_control[:, 6], label='+ control')
ax_arr[1].axhline((100 - 7.13), linestyle='--', color='black')
ax_arr[1].text(0, (100 - 7.13), 'Published', color='black')
ax_arr[1].set_xlabel("Epoch")
ax_arr[1].set_ylabel("Accuracy")
ax_arr[1].set_title("Validation")
ax_arr[1].legend()
ax_arr[1].grid()

f.suptitle("Top5 Accuracy")

# Alexnet Results
# ---------------------------------------------------------------------------------------
f, ax_arr = plt.subplots(2, 1, sharex=True)
# ax_arr[0].plot(resnet50[:, 2], label='train - resnet50')
ax_arr[0].plot(alexnet_with_contour_integration[:, 2], label='alexnet + contour integration')
# ax_arr[0].plot(resnet50_with_control[:, 2], label='+ control')
ax_arr[0].set_title("Train")
ax_arr[0].legend()
ax_arr[0].set_ylabel("Accuracy")
ax_arr[0].grid()

# ax_arr[1].plot(resnet50[:, 5], label='val - resnet50')
ax_arr[1].plot(alexnet_with_contour_integration[:, 5], label='alexnet + contour integration')
# ax_arr[1].plot(resnet50_with_control[:, 5], label='val + control')
ax_arr[1].axhline((100 - 43.45), linestyle='--', color='black')
ax_arr[1].text(0, (100 - 43.45), 'Published', color='black')
ax_arr[1].set_xlabel("Epoch")
ax_arr[1].set_ylabel("Accuracy")
ax_arr[1].set_title("Validation")
ax_arr[1].legend()
ax_arr[1].grid()

f.suptitle("Top1 Accuracy")


f, ax_arr = plt.subplots(2, 1, sharex=True)
# ax_arr[0].plot(resnet50[:, 3], label='resnet50')
ax_arr[0].plot(alexnet_with_contour_integration[:, 3], label='alexnet + contour integration')
# ax_arr[0].plot(resnet50_with_control[:, 3], label='+ control')
ax_arr[0].set_title("Train")
ax_arr[0].legend()
ax_arr[0].set_ylabel("Accuracy")
ax_arr[0].grid()

# ax_arr[1].plot(resnet50[:, 6], label='resnet50')
ax_arr[1].plot(alexnet_with_contour_integration[:, 6], label='alexnet + contour control')
# ax_arr[1].plot(resnet50_with_control[:, 6], label='+ control')
ax_arr[1].axhline((100 - 20.91), linestyle='--', color='black')
ax_arr[1].text(0, (100 - 20.91), 'Published', color='black')
ax_arr[1].set_xlabel("Epoch")
ax_arr[1].set_ylabel("Accuracy")
ax_arr[1].set_title("Validation")
ax_arr[1].legend()
ax_arr[1].grid()

f.suptitle("Top5 Accuracy")

# ---------------------------------------------------------------------------------------
# Untrained Model
# ---------------------------------------------------------------------------------------
f, ax_arr = plt.subplots(1, 1)
# ax_arr[0].plot(resnet50[:, 3], label='resnet50')
ax_arr.plot(resnet50_with_contour_integration_untrained[:, 3], label='Train_top5')
ax_arr.plot(resnet50_with_contour_integration_untrained[:, 2], label='Train_top1')
ax_arr.plot(resnet50_with_contour_integration_untrained[:, 6], label='val_top5')
ax_arr.plot(resnet50_with_contour_integration_untrained[:, 5], label='val_top1')
ax_arr.axhline((100 - 7.13), linestyle='--', color='black')
ax_arr.text(0, (100 - 7.13), 'Published_top5', color='black')
ax_arr.axhline((100 - 23.85), linestyle='--', color='black')
ax_arr.text(0, (100 - 23.85), 'Published_top1', color='black')

ax_arr.set_title("Untrained Resnet 50 with Contour Integration")
ax_arr.legend()
ax_arr.set_ylabel("Accuracy")
ax_arr.grid()

input("Press any key to exit")
