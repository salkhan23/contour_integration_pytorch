# -------------------------------------------------------------------------------------------------
#  Similar to fig_exp_1_results_v3, but contains more results.
# -------------------------------------------------------------------------------------------------
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

mpl.rcParams.update({
    'font.size': 18, 'lines.linewidth': 3,
    'lines.markersize': 10,
    'lines.markeredgewidth': 3
})

INVALID_RESULTS = -1000

# -------------------------------------------------------------------------------------------------
# Neurophysiological Data
# -------------------------------------------------------------------------------------------------
monkey_ma = {
    'c_len': np.array([1, 3, 5, 7, 9]),
    'c_len_results': np.array([1.05, 1.41, 1.85, 2.09, 2.26]),
    'rcd': np.array([1.0, 1.2, 1.4, 1.6, 1.9]),
    'spacing_results': np.array([1.97, 1.69, 1.29, 1.17, 1.16])
}

monkey_mb = {
    'c_len': np.array([1, 3, 5, 7, 9]),
    'c_len_results': np.array([1.05, 1.69, 2.14, 2.41, 2.72]),
    'rcd': np.array([1.0, 1.2, 1.4, 1.6, 1.9]),
    'spacing_results': np.array([2.24, 2.19, 1.7, 1.23, 0.98])
}

# Weighted avg results (MA=30 neurons, MB=24 neurons)
neuro_c_len_results = (30 / 54. * monkey_ma['c_len_results']) + (24 / 50. * monkey_mb['c_len_results'])
neuro_space_results = (30 / 54. * monkey_ma['spacing_results']) + (24 / 50. * monkey_mb['spacing_results'])

# -------------------------------------------------------------------------------------------------
# Simulation Results
# -------------------------------------------------------------------------------------------------

# Control -----------------------------------------------------------------------------------------
# ./results/new_model_resnet_based/New - Most Recent/
# ContourIntegrationResnet50_ControlMatchParametersLayer_run_3_20200926_115550
control_run_1 = {
    'train_acc': 0.7102,
    'validation_acc': 0.7278,
    'no_optimal_stimulus_neurons': np.array([
         1,  2,  3,  4,  6,  8, 10, 11, 12, 13,
        14, 15, 16, 18, 19, 20, 22, 24, 26, 27,
        28, 29, 30, 32, 33, 35, 37, 38, 39, 40,
        42, 43, 46, 49, 50, 51, 52, 53, 54, 55,
        56, 59, 61, 62, 63]),
    'c_len_iou_vs_len_test': np.array([0.9779, 0.2256, 0.7876, 0.8269, 0.8543]),
    'c_len_iou_vs_len_validation': np.array([0.961, 0.611, 0.717, 0.740, 0.743]),
    'c_len_noise_resp': np.array([
        0.006, 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   , 0.   ,
        0.   , 0.   , 0.026, 0.003, 0.   , 0.   , 0.012, 0.   , 0.   ,
       0.   ]),
    'c_len_mean_gains': np.array([
        [9.982e-01, 8.867e-01, 1.036e+01, 1.958e+01, 1.907e+01],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 7.932e+01, 5.127e+02, 7.662e+02, 1.787e+02],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 2.011e+01],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 2.512e+03, 7.562e+03, 9.497e+03, 9.335e+03],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 2.180e+02, 1.020e+03, 1.635e+03, 2.505e+03],
        [9.996e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.965e-01, 0.000e+00, 2.624e-01, 4.924e-01, 1.052e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.991e-01, 2.578e+01, 2.665e+01, 2.920e+01, 3.099e+01],
        [0.000e+00, 1.154e+02, 9.860e+02, 5.844e+02, 9.645e+02],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00]]),
    'spacing_noise_resp': np.array([
        0.0055, 0.0000, 0.0000, 0.0000, 0.0064, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0021, 0.0075, 0.0134, 0.0000, 0.0000, 0.0109, 0.0000, 0.0000, 0.0008, ]),
    'spacing_mean_gains': np.array([
        [18.8893, 71.9665, 63.1547, 26.6041, 5.5154, 12.9115, 42.7667, 59.7363],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 137.6247, 72.9031, 623.2192],
        [0.0000, 0.0000, 0.0000, 0.0000, 155.7641, 280.9805, 3860.7419, 20707.7347],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 648.9137],
        [0.0000, 0.0000, 0.0000, 0.4571, 0.2475, 3.3525, 6.2148, 14.0709],
        [849.0488, 15075.2083, 30961.9136, 46185.3407, 47547.2676, 47623.3493, 39056.4811, 46810.9109],
        [0.0000, 342.8955, 1141.3872, 11553.6938, 7914.1451, 5231.3330, 5786.4025, 11562.6612],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 788.7446, 0.0000, 0.0000],
        [10301.1870, 8370.3603, 1673.9035, 1056.5312, 1930.2379, 1670.7341, 1494.7849, 4939.6991],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 43.5807, 66.8004],
        [4.7512, 8.2777, 31.3677, 41.6225, 42.2069, 64.3483, 77.2484, 81.4297],
        [0.0000, 0.0000, 0.0000, 0.1511, 8.5466, 7.4464, 6.4206, 6.8669],
        [0.0159, 0.0000, 0.0063, 0.8183, 1.6284, 1.3931, 2.3387, 1.1746],
        [0.0000, 0.0000, 0.0000, 0.0000, 3882.3660, 6742.5792, 23346.0783, 38316.3138],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 222.3090],
        [30.1550, 16.0246, 3.1816, 0.2519, 0.5598, 0.4892, 1.2913, 1.7103],
        [660.6771, 426.3972, 1487.3780, 725.3130, 200.7205, 380.9683, 890.5923, 1656.6606],
        [0.0000, 0.0000, 0.0000, 356.5696, 3355.6575, 2115.8969, 1983.2827, 1001.6341],
        [0.0000, 0.0000, 0.0000, 0.0000, 1.2995, 11.7326, 130.7769, 311.7770]]),
}

# ./results/new_model_resnet_based/New - Most Recent/
# ContourIntegrationResnet50_ControlMatchParametersLayer_run_2_20200928_113617
control_run_2 = {
    'train_acc': 0.7082,
    'validation_acc': 0.7233,
    'no_optimal_stimulus_neurons': np.array([
         0,  1,  4,  6,  7,  8,  9, 10, 11, 12,
        15, 16, 17, 18, 19, 22, 23, 24, 25, 28,
        29, 30, 31, 33, 34, 35, 36, 37, 38, 39,
        40, 41, 42, 43, 44, 45, 46, 48, 49, 51,
        52, 53, 54, 55, 57, 58, 60, 62]),
    'c_len_iou_vs_len_test': np.array([0.9775, 0.4752, 0.9091, 0.9140, 0.9097]),
    'c_len_iou_vs_len_validation': np.array([0.952, 0.612, 0.726, 0.749, 0.751]),
    'c_len_noise_resp': np.array([
        0.006, 0., 0., 0., 0., 0., 0., 0., 0.037, 0., 0.001, 0., 0.008, 0.04, 0., 0.027]),
    'c_len_mean_gains': np.array([
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.995e-01, 2.077e-01, 0.000e+00, 0.000e+00, 8.430e-02],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.997e-01, 2.949e-02, 0.000e+00, 0.000e+00, 4.288e-02],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.990e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.992e-01, 2.437e+00, 1.720e+00, 3.187e-01, 1.575e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 1.032e+04, 1.655e+04, 1.859e+04, 1.557e+04],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00]]),
    'spacing_noise_resp': np.array([
        0.0056, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0365, 0.0000,
        0.0009, 0.0000, 0.0090, 0.0508, 0.0000, 0.0146, ]),
    'spacing_mean_gains': np.array([
        [0.0000, 0.0000, 0.0000, 0.0189, 0.2795, 1.7154, 4.0466, 1.8272],
        [0.0000, 0.0000, 0.0000, 428.5500, 1675.5839, 6344.1958, 16565.9683, 24812.5650],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 212.1145, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 3.1281],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 74.2008],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0232, 0.0108, 0.0000, 0.0000, 0.0128, 0.0000, 0.1131, 0.3381],
        [0.0000, 3660.5587, 2229.0076, 2097.1554, 1160.4519, 3793.3932, 15548.5794, 21201.3332],
        [0.0000, 0.0000, 0.0000, 0.9786, 24.2767, 62.8442, 67.2305, 48.7180],
        [36.2024, 0.0000, 17.2960, 61.2693, 0.0000, 111.1080, 83.0542, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [6.0107, 6.3013, 5.7646, 4.7691, 4.0663, 4.8335, 5.8156, 5.5444],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [24.5513, 23.3883, 17.1379, 13.1244, 4.1320, 3.6638, 2.7367, 3.0777]]),
}

# ./results/new_model_resnet_based/New - Most Recent/
# ContourIntegrationResnet50_ControlMatchParametersLayer_run_3_20200926_115550
control_run_3 = {
    'train_acc': 0.7129,
    'validation_acc': 0.7306,
    'no_optimal_stimulus_neurons': np.array([
         0,  1,  3,  5,  8, 10, 11, 12, 13, 14,
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31, 32, 34, 35,
        37, 38, 39, 40, 41, 43, 44, 47, 48, 49,
        50, 51, 52, 53, 54, 55, 56, 57, 59, 60,
        61, 62, 63]),
    'c_len_iou_vs_len_test': np.array([0.9655, 0.3896, 0.8353, 0.8921, 0.8870]),
    'c_len_iou_vs_len_validation': np.array([0.935, 0.629, 0.724, 0.755, 0.761]),
    'c_len_noise_resp': np.array([0.   , 0.   , 0.016, 0.009, 0.   , 0.   , 0.   , 0.   , 0.001, 0.   , 0.023]),
    'c_len_mean_gains': np.array([
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.529e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.994e-01, 5.007e-03, 1.132e+00, 7.917e-01, 3.983e-01],
        [9.989e-01, 0.000e+00, 7.258e-01, 1.911e-01, 0.000e+00],
        [9.237e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 5.837e+01, 2.138e+02, 2.347e+02, 1.128e+02],
        [9.929e-01, 1.735e+01, 7.227e+01, 9.028e+01, 9.217e+01],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.996e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00]]),
    'spacing_noise_resp': np.array([
        0.0000, 0.0000, 0.0206, 0.0250, 0.0027, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0307]),
    'spacing_mean_gains': np.array([
        [0.0000, 0.0000, 498.9996, 2033.1490, 8166.7994, 8924.6373, 3777.2517, 2588.3449],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 320.5112],
        [0.2947, 0.0000, 0.5065, 2.0988, 3.4011, 3.1080, 3.6992, 3.9110],
        [0.2535, 1.0541, 0.3880, 0.2796, 0.0311, 0.1512, 0.5491, 1.1727],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 610.8384, 3145.4692, 13312.7907],
        [569.6304, 0.0000, 0.0000, 0.0000, 0.0000, 150.2889, 0.0000, 0.0000],
        [14904.6912, 26079.9079, 13734.9162, 6015.4031, 3860.7724, 3530.3847, 9998.5288, 18728.2013],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.3380, 0.0220, 0.1853, 0.3923, 1.2770, 2.5879, 5.7904]]),
}

# ./results/new_model_resnet_based/New - Most Recent/
# ContourIntegrationResnet50_ControlMatchParametersLayer_run_4_20200928_112208
control_run_4 = {
    'train_acc': 0.7140,
    'validation_acc': 0.7305,
    'no_optimal_stimulus_neurons': np.array([
         1,  3,  5,  6,  8, 10, 11, 12, 13, 14,
        16, 17, 18, 19, 20, 21, 22, 23, 25, 26,
        27, 28, 29, 30, 31, 32, 35, 36, 37, 39,
        40, 41, 42, 43, 44, 47, 48, 49, 50, 51,
        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]),
    'c_len_iou_vs_len_test': np.array([0.9655, 0.3896, 0.8353, 0.8921, 0.8870]),
    'c_len_iou_vs_len_validation': np.array([0.970, 0.620, 0.726, 0.749, 0.752]),
    'c_len_noise_resp': np.array(
        [0.005, 0.   , 0.   , 0.065, 0.036, 0.   , 0.016, 0.   , 0.   , 0.002, 0.   , 0.   , 0.   ]),
    'c_len_mean_gains': np.array([
        [9.979e-01, 4.349e-01, 2.086e-01, 1.961e+00, 6.496e-01],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.998e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.997e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 1.810e+02, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.994e-01, 5.475e+00, 8.952e+00, 6.486e+00, 5.446e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 6.891e+01, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.945e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 1.584e+02, 7.639e+02, 4.500e+01],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 3.942e+02, 0.000e+00, 4.184e+02]]),
    'spacing_noise_resp': np.array([
        0.0000, 0.0000, 0.0000, 0.0663, 0.0197, 0.0000, 0.0109, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]),
    'spacing_mean_gains': np.array([
        [329.5513, 9089.6695, 9870.3578, 4414.2146, 3082.6949, 3623.9468, 4581.9202, 7945.6327],
        [0.0000, 0.0000, 194.6647, 1170.5456, 1653.5832, 1632.5032, 301.1711, 548.2589],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 309.3008, 632.3660, 2478.4341],
        [0.0000, 0.0000, 0.3217, 0.2948, 0.4971, 0.5547, 1.2475, 1.6671],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 407.7449, 3527.0368],
        [10.0989, 12.5005, 2.8170, 1.2502, 0.2169, 0.0000, 1.4609, 0.0000],
        [0.0000, 0.0000, 259.1835, 0.0000, 1143.8743, 1234.3918, 3480.1280, 3404.8889],
        [209.1719, 675.0990, 6584.3950, 12768.1017, 5276.5686, 8517.8906, 12261.2942, 8096.0669],
        [0.0000, 0.0000, 0.0000, 126.8786, 3590.9443, 10919.1348, 11054.0900, 15962.2084],
        [1080.2419, 7437.8855, 2924.8218, 4006.2102, 2187.5594, 7656.3462, 13216.8873, 21609.4275],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [696.5058, 4639.4747, 3028.1857, 3504.5496, 7818.6165, 12992.3382, 16982.3293, 30651.8139]]),
}

# ./results/new_model_resnet_based/New - Most Recent/
# ContourIntegrationResnet50_ControlMatchParametersLayer_run_5_20200925_215055
control_run_5 = {
    'train_acc': 0.7072,
    'validation_acc': 0.7222,
    'no_optimal_stimulus_neurons': np.array([
         0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
        10, 11, 12, 13, 15, 16, 17, 19, 20, 21,
        22, 23, 24, 25, 26, 27, 28, 30, 31, 32,
        33, 34, 36, 37, 39, 40, 41, 43, 44, 45,
        46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
        57, 58, 59, 60, 62, 63]),
    'c_len_iou_vs_len_test': np.array([0.9775, 0.2226, 0.6967, 0.7951, 0.8453]),
    'c_len_iou_vs_len_validation': np.array([0.9775, 0.2226, 0.6967, 0.7951, 0.8453]),
    'c_len_noise_resp': np.array([0.   , 0.   , 0.   , 0.005, 0.   , 0.   , 0.   , 0.   ]),
    'c_len_mean_gains': np.array([
        [0.000e+00, 3.407e+01, 2.610e+03, 2.887e+03, 2.259e+03],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.980e-01, 5.754e+01, 7.062e+01, 7.291e+01, 6.568e+01],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00]]),
    'spacing_noise_resp': np.array([0.0000, 0.0000, 0.0000, 0.0090, 0.0000, 0.0024, 0.0000, 0.0000] ),
    'spacing_mean_gains': np.array([
        [4056.9235, 11492.9699, 17967.3338, 24297.8439, 23678.7829, 25582.7655, 22637.8219, 28520.7290],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 203.2195],
        [39.5063, 32.0029, 32.4587, 34.8307, 35.2713, 31.9257, 20.9758, 9.6855],
        [0.0000, 0.0000, 43.0697, 144.9618, 1353.0465, 528.1976, 995.9942, 185.0894],
        [0.0000, 0.0000, 0.0000, 5.6931, 16.0964, 16.2884, 34.8737, 71.0965],
        [0.0000, 73.7865, 0.0000, 0.0000, 0.0000, 0.0000, 153.9706, 975.6875],
        [0.0000, 0.0000, 0.0000, 2582.6884, 2737.0253, 6902.7288, 12037.6916, 26182.7749]]),
}

# ./results/new_model_resnet_based/New - Most Recent/
# ContourIntegrationResnet50_ControlMatchParametersLayer_run_6_20201116_215211
control_run_6 = {
    'train_acc': 0.7226,
    'validation_acc': 0.7387,
    'no_optimal_stimulus_neurons': np.array([
         0,  1,  2,  3,  4,  5,  6,  7,  9, 10,
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 24, 25, 26, 27, 28, 29, 30, 31,
        32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
        42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
        53, 54, 55, 56, 57, 58, 60, 61, 62, 63]),
    'c_len_iou_vs_len_test': np.array([0.9950, 0.4985, 0.9571, 0.9581, 0.9225]),
    'c_len_iou_vs_len_validation': np.array(
        [0.9484799091943387, 0.6310158035499626, 0.7324786075443626, 0.7543340287013734, 0.7576873472422221]),
    'c_len_noise_resp': np.array(([
        0.  , 0.  , 0.  , 0.12])),
    'c_len_mean_gains': np.array([
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 1.140e+02, 9.016e+02, 2.105e+03],
        [9.463e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.999e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00]]),
    'spacing_noise_resp': np.array(
        [0.0000, 0.0000, 0.0000, 0.0938]),
    'spacing_mean_gains': np.array([
        [0.0000, 0.0000, 505.8231, 8214.5494, 11323.7730, 26480.5233, 29849.6537, 41876.6692],
        [1282.1575, 5344.0198, 4992.0081, 3919.5215, 2271.4761, 3110.5449, 5071.8342, 5288.6335],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]]),
}

# ./results/new_model_resnet_based/New - Most Recent/
# ContourIntegrationResnet50_ControlMatchParametersLayer_run_7_20201116_215537
control_run_7 = {
    'train_acc': 0.7088,
    'validation_acc': 0.7264,
    'no_optimal_stimulus_neurons': np.array([
         0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
        10, 11, 15, 16, 17, 18, 19, 21, 23, 24,
        25, 27, 30, 31, 32, 33, 34, 35, 36, 37,
        38, 39, 40, 42, 43, 44, 46, 47, 48, 49,
        50, 51, 53, 54, 55, 56, 58, 59, 60, 62,
        63]),
    'c_len_iou_vs_len_test': np.array([0.9846, 0.2937, 0.7714, 0.8048, 0.8355]),
    'c_len_iou_vs_len_validation': np.array([
        0.9594077831002323, 0.6116651062049641, 0.7125128722325826, 0.749531616749232, 0.7536453510151204]),
    'c_len_noise_resp': np.array([
        0.   , 0.   , 0.   , 0.038, 0.   , 0.   , 0.   , 0.   , 0.   ,
        0.   , 0.035, 0.005, 0.013]),
    'c_len_mean_gains': np.array([
        [0.000e+00, 0.000e+00, 5.942e+02, 5.185e+02, 3.517e+02],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [9.997e-01, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00],
        [0.000e+00, 8.606e+01, 9.057e+02, 2.774e+03, 3.452e+03],
        [0.000e+00, 5.830e+03, 9.259e+03, 7.322e+03, 6.306e+03],
        [9.997e-01, 3.748e+00, 4.804e+00, 4.659e+00, 4.717e+00],
        [9.979e-01, 1.314e-01, 1.183e-01, 0.000e+00, 2.372e-01],
        [9.993e-01, 4.973e-01, 5.754e-01, 1.506e+00, 4.381e-01]]),
    'spacing_noise_resp': np.array([
        0.0000, 0.0000, 0.0000, 0.0658, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0009,
        0.0286, 0.0021, 0.0139, ]),
    'spacing_mean_gains': np.array([
        [3.1289, 2785.0381, 12151.0033, 18211.4622, 19309.2741, 29944.3988, 31026.6926, 34113.0495],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 68.8553, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 148.5408, 549.3552, 123.8791, 97.0553],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0265, 0.1659, 0.5508],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 171.7752, 581.3344, 9662.2718, 15719.5538, 20158.8762, 15686.7701, 30886.8707],
        [0.0000, 0.0000, 0.0000, 10.9541, 1635.7523, 1344.1581, 1115.0340, 336.2203],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 267.4873, 35.7868],
        [1669.9160, 2266.8290, 2072.9995, 3083.3157, 713.3677, 1447.1658, 1020.3799, 3733.0966],
        [102.9863, 69.7429, 19.9022, 2.0083, 0.2509, 0.2178, 0.8240, 0.6144],
        [5.2728, 11.7367, 10.5567, 19.6425, 24.8806, 28.6960, 30.3470, 27.2226],
        [0.0000, 0.0000, 0.0000, 0.2111, 3.3609, 4.6435, 31.1059, 25.7237],
        [0.3460, 1.2822, 3.5170, 8.1645, 11.2566, 19.5371, 28.7506, 34.2110]]),
}

# Model ---------------------------------------------------------------------------------
# Results from
# ./results/contour_dataset_multiple_runs/positive_lateral_weights_with_BN_best_gain_curves

model_run_1 = {
    'train_acc': 0.8755,
    'validation_acc': 0.8481,
    'no_optimal_stimulus_neurons': np.array([11, 12, 13, 19, 24, 31, 40, 45, 47, 56, 57, 59, 60, 62, 63]),
    'c_len_iou_vs_len_test': np.array([0.9747, 0.4611, 0.8491, 0.9005, 0.9162]),
    'c_len_noise_resp': np.array([
        1.369,     3.125,     0.607,     2.016,     0.685,     1.411,     0.151,     1.525,     0.246,     3.104,
        0.99 ,     -1000,     -1000,     -1000,     2.875,     1.304,     1.354,     1.212,     1.523,     -1000,
        1.235,     1.776,     1.367,     0.225,     -1000,     0.649,     2.311,     2.038,     0.034,     3.026,
        1.821,     -1000,     0.665,     2.275,     2.243,     1.525,     0.69 ,     2.253,     1.602,     0.003,
        -1000,     1.988,     3.085,     1.275,     1.103,     -1000,     0.002,     -1000,     1.783,     1.143,
        0.265,     0.755,     1.239,     0.061,     1.787,     2.188,     -1000,     -1000,     0.993,     -1000,
        -1000,     1.465,     -1000,    -1000]),
    'c_len_mean_gains': np.array([
        [    1.   ,     1.543,     2.83 ,     3.146,     3.172],
        [    1.   ,     1.067,     1.148,     1.164,     1.163],
        [    1.   ,     0.681,     1.355,     1.565,     1.582],
        [    1.   ,     2.131,     3.484,     4.173,     4.312],
        [    1.   ,     2.259,     4.189,     5.135,     5.728],
        [    1.   ,     2.641,     4.467,     4.912,     5.044],
        [    1.   ,     4.738,    19.118,    29.065,    32.   ],
        [    1.   ,     0.619,     0.59 ,     0.565,     0.566],
        [    1.   ,     0.07 ,     5.951,     8.268,     8.674],
        [    1.   ,     1.162,     1.364,     1.42 ,     1.389],
        [    1.   ,     1.648,     2.361,     2.697,     2.739],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.175,     1.352,     1.415,     1.395],
        [    1.   ,     0.823,     0.861,     0.938,     0.898],
        [    1.   ,     1.261,     1.783,     1.986,     1.965],
        [    1.   ,     1.707,     2.952,     3.615,     3.563],
        [    1.   ,     0.931,     1.344,     1.491,     1.508],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.826,     3.782,     4.95 ,     4.978],
        [    1.   ,     1.62 ,     3.016,     3.562,     3.807],
        [    1.   ,     0.331,     0.4  ,     0.482,     0.506],
        [    1.   ,     0.63 ,     2.155,     2.594,     2.845],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     3.449,     5.939,     6.437,     6.407],
        [    1.   ,     0.738,     0.838,     1.024,     0.994],
        [    1.   ,     1.405,     1.634,     1.658,     1.713],
        [    1.   ,     0.963,    10.044,    23.358,    29.038],
        [    1.   ,     1.188,     1.7  ,     1.988,     2.015],
        [    1.   ,     1.632,     2.347,     2.617,     2.737],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     0.215,     0.925,     1.839,     1.965],
        [    1.   ,     0.797,     0.941,     1.041,     1.106],
        [    1.   ,     1.137,     1.246,     1.35 ,     1.39 ],
        [    1.   ,     0.637,     0.9  ,     0.949,     0.954],
        [    1.   ,     1.894,     2.869,     3.165,     3.204],
        [    1.   ,     1.085,     1.435,     1.556,     1.579],
        [    1.   ,     1.142,     1.539,     1.759,     1.892],
        [    0.996,   377.847,  1051.226,  1168.808,  1166.792],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     0.708,     0.776,     0.834,     0.837],
        [    1.   ,     1.086,     1.184,     1.298,     1.413],
        [    1.   ,     0.876,     0.958,     0.989,     0.99 ],
        [    1.   ,     0.899,     1.063,     1.205,     1.26 ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    0.994,     0.   ,     0.   ,     0.   ,     0.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.125,     1.504,     1.636,     1.592],
        [    1.   ,     2.114,     4.325,     5.39 ,     5.666],
        [    1.   ,     1.524,     3.684,     4.982,     5.203],
        [    1.   ,     0.61 ,     1.421,     2.447,     2.709],
        [    1.   ,     1.176,     1.77 ,     1.987,     1.989],
        [    1.   ,     0.106,     5.963,    37.128,    58.776],
        [    1.   ,     0.368,     0.665,     0.988,     1.095],
        [    1.   ,     0.38 ,     0.681,     0.91 ,     0.967],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     0.781,     0.815,     0.679,     0.653],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.292,     2.704,     4.188,     4.705],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ]]),
    'spacing_noise_resp': np.array([
        1.394,     3.152,     0.627,     2.042,     0.704,     1.437,     0.154,     1.545,     0.244,     3.003,
        1.08 ,     -1000,     -1000,     -1000,     2.828,     1.388,     1.365,     1.259,     1.563,     -1000,
        1.283,     1.826,     1.359,     0.187,     -1000,     0.617,     2.341,     2.062,     0.077,     3.096,
        1.837,     -1000,     0.644,     2.308,     2.322,     1.556,     0.692,     2.238,     1.663,     0.   ,
        -1000,      2.01,     3.155,     1.302,     1.15 ,     -1000,     0.006,     -1000,     1.75 ,     1.098,
        0.258,     0.703,     1.22 ,     0.072,     1.776,     2.116,     -1000,     -1000,     0.997,     -1000,
        -1000,     1.481,    -1000,     -1000]),
    'spacing_mean_gains': np.array([
        [     3.11 ,      2.247,      1.43 ,      1.573,      1.089,      0.996,      0.934,      0.906],
        [     1.153,      0.81 ,      0.647,      0.563,      0.499,      0.488,      0.498,      0.498],
        [     1.507,      0.499,      0.241,      0.484,      0.749,      1.053,      1.289,      1.417],
        [     4.1  ,      1.977,      1.798,      1.35 ,      1.152,      0.721,      0.665,      0.654],
        [     5.068,      4.662,      1.415,      0.356,      0.335,      0.466,      0.47 ,      0.353],
        [     4.831,      2.501,      1.844,      2.103,      0.595,      0.328,      0.073,      0.002],
        [    28.371,     18.885,     14.975,     10.429,      5.347,      2.062,      2.33 ,      2.217],
        [     0.563,      0.18 ,      0.268,      0.492,      0.72 ,      0.81 ,      0.866,      0.859],
        [     8.122,      2.247,      0.489,      0.54 ,      0.   ,      0.041,      0.25 ,      1.579],
        [     1.474,      0.687,      0.11 ,      0.164,      0.017,      0.01 ,      0.003,      0.002],
        [     2.517,      1.597,      1.021,      0.784,      0.538,      0.377,      0.211,      0.137],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.443,      0.476,      0.363,      0.346,      0.203,      0.153,      0.077,      0.052],
        [     0.896,      0.   ,      0.   ,      0.   ,      0.   ,      0.   ,      0.   ,      0.   ],
        [     1.94 ,      1.234,      0.409,      0.014,      0.009,      0.001,      0.   ,      0.   ],
        [     3.456,      2.541,      1.196,      0.995,      1.274,      1.03 ,      1.011,      1.005],
        [     1.441,      0.626,      0.03 ,      0.189,      0.088,      0.024,      0.002,      0.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     4.777,      3.936,      2.9  ,      1.592,      1.273,      1.043,      0.887,      0.86 ],
        [     3.507,      1.912,      1.687,      1.41 ,      1.423,      0.971,      1.045,      1.019],
        [     0.485,      0.245,      0.614,      0.837,      0.937,      0.849,      0.938,      0.993],
        [     3.144,      2.688,      3.637,      4.176,      4.358,      4.798,      4.715,      4.601],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     6.778,      3.995,      2.305,      0.367,      0.396,      0.109,      0.004,      0.   ],
        [     0.969,      0.461,      0.403,      0.611,      0.338,      0.559,      0.597,      0.616],
        [     1.667,      0.804,      0.181,      0.243,      0.175,      0.105,      0.023,      0.01 ],
        [     9.65 ,      3.237,      8.524,      4.924,      3.6  ,      5.315,      4.605,      3.134],
        [     1.945,      0.898,      0.323,      0.35 ,      0.023,      0.015,      0.002,      0.001],
        [     2.651,      1.324,      0.881,      1.08 ,      0.455,      0.507,      0.348,      0.352],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.895,      0.748,      0.977,      1.695,      1.069,      1.435,      1.389,      1.506],
        [     1.025,      0.006,      0.   ,      0.018,      0.067,      0.128,      0.125,      0.045],
        [     1.276,      0.407,      0.103,      0.307,      0.34 ,      0.362,      0.312,      0.269],
        [     0.919,      0.244,      0.043,      0.109,      0.044,      0.043,      0.025,      0.027],
        [     3.116,      1.996,      0.351,      0.35 ,      0.206,      0.018,      0.014,      0.   ],
        [     1.549,      0.788,      0.449,      0.333,      0.246,      0.207,      0.154,      0.208],
        [     1.755,      1.295,      1.219,      1.117,      0.887,      0.674,      0.648,      0.626],
        [310963.068, 279441.785, 254081.034, 191738.613, 151563.616, 133972.565, 116807.292, 109080.603],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     0.838,      0.716,      0.748,      0.701,      0.687,      0.74 ,      0.792,      0.793],
        [     1.276,      0.316,      0.037,      0.114,      0.188,      0.208,      0.138,      0.106],
        [     0.956,      0.761,      0.821,      0.961,      0.917,      0.903,      0.84 ,      0.807],
        [     1.135,      0.424,      0.054,      0.413,      0.726,      0.922,      0.895,      0.96 ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     0.025,      0.187,      6.766,     32.547,     89.956,    175.938,    204.784,    216.891],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.596,      1.007,      0.681,      0.417,      0.287,      0.201,      0.235,      0.198],
        [     5.622,      2.44 ,      1.055,      0.272,      0.263,      0.002,      0.004,      0.   ],
        [     4.964,      6.951,      5.77 ,      6.318,      6.446,      6.572,      6.872,      7.223],
        [     2.452,      1.34 ,      1.655,      1.467,      0.893,      1.059,      0.973,      0.886],
        [     1.999,      0.592,      0.115,      0.3  ,      0.347,      0.642,      0.608,      1.089],
        [    33.677,     24.522,     28.407,     17.008,     20.054,     11.426,     11.455,      9.444],
        [     0.989,      0.002,      0.   ,      0.008,      0.004,      0.058,      0.035,      0.04 ],
        [     0.924,      0.421,      0.146,      0.128,      0.255,      0.241,      0.234,      0.269],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     0.812,      0.289,      0.396,      0.248,      0.149,      0.041,      0.002,      0.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     4.206,      2.727,      2.314,      1.719,      1.578,      1.336,      1.2  ,      1.075],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ]])
}

model_run_2 = {
    'train_acc': 0.8735,
    'validation_acc': 0.8420,
    'no_optimal_stimulus_neurons': np.array([0, 2, 9, 10, 11, 12, 13, 14, 15, 20, 23, 24, 27, 30, 33, 36, 37, 39, 42, 43, 44, 47, 48, 52, 57, 58, 59]),
    'c_len_iou_vs_len_test': np.array( [0.9072, 0.7903, 0.8912, 0.9265, 0.9335]),
    'c_len_noise_resp': np.array([
        -1000.   ,     2.645, -1000.   ,     0.673,     1.254,     0.092,     0.99 ,     0.   ,     0.528, -1000.   ,
        -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ,     0.418,     0.765,     1.022,     1.332,
        -1000.   ,     0.617,     0.997, -1000.   , -1000.   ,     0.   ,     0.245, -1000.   ,     1.716,     0.543,
        -1000.   ,     0.581,     1.203, -1000.   ,     0.748,     0.   , -1000.   , -1000.   ,     1.502, -1000.   ,
           1.164,     0.418, -1000.   , -1000.   , -1000.   ,     2.281,     0.317, -1000.   , -1000.   ,     1.011,
           1.321,     1.473, -1000.   ,     2.954,     0.872,     1.162,     1.074, -1000.   , -1000.   , -1000.   ,
           0.008,     3.593,     0.362,     0.019]),
    'c_len_mean_gains': np.array([
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.   ,      1.399,      1.799,      1.847,      1.835],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.   ,      1.963,      3.329,      3.823,      3.811],
        [     1.   ,      1.701,      2.545,      2.733,      2.675],
        [     1.   ,     11.743,     42.724,     70.409,     85.73 ],
        [     1.   ,      2.185,      5.231,      6.897,      7.297],
        [     0.861,    273.211,   3486.534,   3782.585,   4030.018],
        [     1.   ,      0.   ,      0.   ,      0.   ,      0.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.   ,      2.254,      5.685,      6.312,      6.526],
        [     1.   ,      0.002,      0.022,      0.048,      0.068],
        [     1.   ,      0.524,      0.403,      0.549,      0.537],
        [     1.   ,      1.495,      2.59 ,      2.887,      2.918],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.   ,      5.368,     12.709,     16.376,     16.792],
        [     1.   ,      0.   ,      0.   ,      0.003,      0.002],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     0.   ,  22593.705, 116284.805, 139115.09 , 153244.406],
        [     1.   ,      0.876,      3.849,      5.707,      6.342],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.   ,      1.837,      2.381,      2.423,      2.426],
        [     1.   ,      6.547,     10.74 ,     11.889,     11.934],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.   ,      0.193,      0.578,      0.771,      0.82 ],
        [     1.   ,      0.752,      1.54 ,      1.849,      2.013],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.   ,      0.015,      0.019,      0.058,      0.057],
        [     0.   ,  64428.754, 187069.152, 190514.685, 182925.853],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.   ,      3.994,      6.835,      7.735,      7.828],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.   ,      0.694,      1.031,      1.179,      1.283],
        [     1.   ,      0.003,      0.095,      0.368,      0.314],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.   ,      1.345,      1.736,      1.847,      1.813],
        [     1.   ,      0.   ,      0.   ,      0.016,      0.044],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.   ,      0.03 ,      0.852,      1.468,      1.55 ],
        [     1.   ,      0.349,      0.595,      0.64 ,      0.594],
        [     1.   ,      1.694,      2.776,      3.18 ,      3.252],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.   ,      0.936,      1.352,      1.493,      1.457],
        [     1.   ,      0.083,      0.221,      0.412,      0.292],
        [     1.   ,      1.875,      3.46 ,      3.847,      3.876],
        [     1.   ,      0.095,      0.037,      0.055,      0.048],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     0.999,      0.   ,      2.712,    152.407,    192.805],
        [     1.   ,      0.659,      0.788,      0.968,      0.977],
        [     1.   ,     10.435,     15.921,     17.278,     17.838],
        [     0.999,     13.708,     73.42 ,     83.13 ,     92.535]]),
    'spacing_noise_resp': np.array([
        -1000.   ,     2.613, -1000.   ,     0.747,     1.304,     0.109,     0.981,     0.   ,     0.509, -1000.   ,
        -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ,     0.388,     0.757,     1.032,     1.317,
        -1000.   ,     0.687,     0.983, -1000.   , -1000.   ,     0.   ,     0.209, -1000.   ,     1.736,     0.557,
        -1000.   ,     0.603,     1.254, -1000.   ,     0.793,     0.001, -1000.   , -1000.   ,     1.589, -1000.   ,
           1.172,     0.447, -1000.   , -1000.   , -1000.   ,     2.283,     0.321, -1000.   , -1000.   ,     1.008,
           1.358,     1.486, -1000.   ,     2.916,     0.764,     1.179,     1.082, -1000.   , -1000.   , -1000.   ,
           0.007,     3.555,     0.341,     0.025]),
    'spacing_mean_gains': np.array([
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.864,      1.103,      1.035,      0.837,      0.747,      0.678,      0.671,      0.659],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     3.432,      2.653,      2.571,      1.925,      1.565,      1.386,      1.224,      1.151],
        [     2.601,      1.961,      1.222,      0.825,      0.741,      0.364,      0.27 ,      0.153],
        [    60.357,     51.701,     37.641,     30.426,     12.631,      9.017,      6.529,      6.913],
        [     6.839,      4.93 ,      3.093,      2.665,      2.24 ,      1.815,      1.612,      1.567],
        [ 28008.071,  79811.95 , 130527.906, 113696.087,  98388.086,  88032.41 , 105553.096, 123119.668],
        [     0.   ,      0.   ,      0.025,      0.261,      0.25 ,      0.966,      1.115,      1.088],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     6.903,      3.856,      1.837,      2.617,      0.931,      0.902,      1.26 ,      1.265],
        [     0.034,      0.114,      0.163,      0.048,      0.223,      0.578,      0.753,      0.781],
        [     0.529,      0.742,      1.036,      1.061,      0.845,      0.729,      0.665,      0.64 ],
        [     2.889,      0.914,      0.386,      0.425,      0.48 ,      0.382,      0.428,      0.499],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [    14.868,      7.049,      5.127,      2.682,      1.698,      1.361,      1.101,      1.068],
        [     0.002,      0.   ,      0.053,      0.593,      0.968,      1.171,      1.217,      1.24 ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [143705.804, 142380.351,  95102.281,  29003.547,  11457.482,  10382.458,   1637.545,   1431.667],
        [     6.375,      6.817,      7.146,      4.096,      2.578,      2.514,      2.51 ,      2.742],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     2.425,      1.622,      1.178,      0.986,      0.775,      0.516,      0.456,      0.38 ],
        [    11.45 ,     10.158,      6.723,      3.853,      2.46 ,      1.578,      1.444,      1.269],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     0.859,      0.722,      0.378,      0.931,      1.036,      0.895,      0.634,      0.487],
        [     1.723,      0.758,      0.234,      0.13 ,      0.229,      0.263,      0.372,      0.407],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     0.049,      0.539,      1.112,      1.337,      1.597,      1.728,      1.79 ,      1.863],
        [  3614.457,   2191.407,   2440.634,   2224.925,   2115.744,   1544.619,   1122.481,   1120.497],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     7.293,      5.686,      4.407,      2.749,      1.852,      1.772,      1.579,      1.513],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.185,      0.613,      0.413,      0.299,      0.317,      0.288,      0.254,      0.209],
        [     0.203,      0.081,      1.351,      2.549,      3.279,      3.206,      2.898,      2.812],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.785,      1.327,      0.865,      0.748,      0.623,      0.401,      0.324,      0.272],
        [     0.013,      0.286,      0.512,      0.963,      1.327,      1.708,      1.825,      2.388],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.455,      1.685,      0.983,      1.38 ,      1.295,      1.123,      1.455,      1.457],
        [     0.638,      0.685,      0.582,      0.658,      0.628,      0.665,      0.711,      0.73 ],
        [     3.212,      1.801,      0.862,      0.572,      0.333,      0.064,      0.061,      0.092],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.51 ,      0.479,      0.448,      0.278,      0.202,      0.157,      0.195,      0.179],
        [     0.428,      0.449,      0.   ,      0.   ,      0.   ,      0.   ,      0.   ,      0.   ],
        [     3.752,      2.982,      1.988,      1.549,      1.33 ,      1.332,      1.391,      1.432],
        [     0.063,      0.048,      0.052,      0.152,      0.12 ,      0.158,      0.17 ,      0.15 ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [   162.612,    174.728,     87.11 ,     78.151,     37.626,     62.312,     81.465,    111.716],
        [     0.972,      0.468,      0.4  ,      0.474,      0.371,      0.416,      0.386,      0.349],
        [    18.45 ,     10.57 ,      6.18 ,      3.522,      2.141,      0.243,      0.001,      0.   ],
        [    65.129,     61.823,     67.109,     26.065,     34.919,     36.413,     47.813,     52.661]])
}

model_run_3 = {
    'train_acc': 0.8695,
    'validation_acc': 0.8419,
    'no_optimal_stimulus_neurons': np.array([0, 1, 4, 5, 10, 11, 13, 14, 15, 24, 25, 28, 29, 31, 32, 33, 34, 35, 37, 42, 44, 45, 48, 50, 52, 54, 56, 57, 58, 59, 60, 62]),
    'c_len_iou_vs_len_test': np.array([0.9224, 0.6365, 0.9003, 0.9369, 0.9402]),
    'c_len_noise_resp': np.array([
        -1000.   , -1000.   ,     1.313,     0.342, -1000.   , -1000.   ,     1.485,     0.   ,     1.185,     0.72 ,
        -1000.   , -1000.   ,     1.331, -1000.   , -1000.   , -1000.   ,     2.046,     1.377,     1.569,     2.682,
           1.135,     0.746,     1.425,     1.237, -1000.   , -1000.   ,     1.953,     2.489, -1000.   , -1000.   ,
           0.903, -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ,     1.977, -1000.   ,     1.548,     0.002,
           1.707,     1.543, -1000.   ,     0.475, -1000.   , -1000.   ,     0.625,     1.909, -1000.   ,     1.543,
        -1000.   ,     2.521, -1000.   ,     1.219, -1000.   ,     1.033, -1000.   , -1000.   , -1000.   , -1000.   ,
        -1000.   ,     1.367, -1000.   ,     0.319]),
    'c_len_mean_gains': np.array([
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.121,     1.357,     1.457,     1.464],
        [    1.   ,     0.547,     2.09 ,     4.562,     5.122],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.615,     2.593,     2.972,     3.051],
        [    0.   ,     0.   ,     0.   ,     0.   ,     0.   ],
        [    1.   ,     0.574,     0.82 ,     0.843,     0.863],
        [    1.   ,     0.173,     0.084,     0.055,     0.062],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.082,     1.23 ,     1.279,     1.341],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.047,     1.185,     1.271,     1.263],
        [    1.   ,     0.432,     0.451,     0.507,     0.473],
        [    1.   ,     1.742,     2.602,     2.938,     3.053],
        [    1.   ,     1.402,     1.697,     1.767,     1.779],
        [    1.   ,     1.349,     2.303,     3.065,     3.182],
        [    1.   ,     0.719,     0.906,     0.987,     0.998],
        [    1.   ,     1.086,     1.448,     1.63 ,     1.65 ],
        [    1.   ,     1.164,     1.443,     1.468,     1.48 ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     0.749,     1.268,     1.548,     1.56 ],
        [    1.   ,     1.091,     1.661,     2.002,     2.071],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     3.85 ,     6.518,     7.375,     7.51 ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     0.911,     1.169,     1.35 ,     1.372],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     0.604,     0.477,     0.514,     0.512],
        [    0.995,   845.626,  2884.117,  3568.933,  3688.661],
        [    1.   ,     1.752,     2.788,     3.151,     3.203],
        [    1.   ,     0.443,     0.788,     0.895,     0.842],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     2.238,     3.448,     3.651,     3.684],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.154,     3.187,     4.102,     4.29 ],
        [    1.   ,     1.313,     1.545,     1.607,     1.607],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.852,     2.437,     2.444,     2.446],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     0.953,     1.091,     1.114,     1.107],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.707,     2.662,     3.054,     3.083],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.48 ,     1.905,     2.014,     2.062],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     0.809,     1.808,     2.468,     2.621],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.247,     1.7  ,     2.769,     2.732]]),
    'spacing_noise_resp': np.array([
        -1000.   , -1000.   ,     1.311,     0.389, -1000.   , -1000.   ,     1.481,     0.   ,     1.171,     0.746,
       -1000.   , -1000.   ,     1.326, -1000.   , -1000.   , -1000.   ,     2.073,     1.351,     1.555,     2.658,
        1.119,     0.766,     1.443,     1.229, -1000.   , -1000.   ,     1.886,     2.514, -1000.   , -1000.   ,
        0.914, -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ,     1.983, -1000.   ,     1.651,     0.002,
        1.711,     1.513, -1000.   ,     0.487, -1000.   , -1000.   ,     0.644,     1.92 , -1000.   ,     1.511,
        -1000.   ,     2.546, -1000.   ,     1.243, -1000.   ,     1.1  , -1000.   , -1000.   , -1000.   , -1000.   ,
        -1000.   ,     1.383, -1000.   ,     0.354]),
    'spacing_mean_gains': np.array([
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.451,     0.892,     0.571,     0.463,     0.355,     0.309,     0.31 ,     0.29 ],
        [    3.686,     0.22 ,     1.055,     1.887,     1.102,     0.582,     0.377,     0.295],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    2.98 ,     2.184,     1.7  ,     1.341,     1.146,     1.051,     1.084,     1.148],
        [    0.   ,     0.   ,     0.   ,   121.892,  2264.283,  4134.77 ,  6578.282,  7643.491],
        [    0.862,     0.369,     0.092,     0.128,     0.212,     0.252,     0.378,     0.466],
        [    0.064,     0.296,     0.002,     0.   ,     0.   ,     0.   ,     0.   ,     0.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.309,     1.045,     0.957,     0.894,     0.833,     0.806,     0.795,     0.788],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.246,     0.721,     0.609,     0.581,     0.56 ,     0.529,     0.519,     0.522],
        [    0.475,     0.322,     0.264,     0.32 ,     0.441,     0.511,     0.597,     0.595],
        [    3.005,     1.442,     0.568,     0.304,     0.123,     0.03 ,     0.07 ,     0.072],
        [    1.782,     1.203,     0.894,     0.685,     0.624,     0.575,     0.527,     0.514],
        [    3.089,     2.323,     2.114,     2.28 ,     1.327,     1.262,     1.296,     1.137],
        [    0.96 ,     1.116,     1.274,     1.408,     1.252,     1.233,     1.282,     1.311],
        [    1.581,     1.21 ,     0.537,     0.41 ,     0.236,     0.162,     0.148,     0.167],
        [    1.476,     1.229,     1.115,     1.099,     1.151,     1.192,     1.167,     1.16 ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.575,     0.877,     0.641,     0.629,     0.601,     0.574,     0.595,     0.693],
        [    2.007,     1.411,     0.845,     0.58 ,     0.751,     0.64 ,     0.677,     0.656],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    7.21 ,     6.295,     2.955,     1.192,     0.802,     0.598,     0.328,     0.207],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.315,     0.602,     0.388,     0.506,     0.369,     0.361,     0.272,     0.21 ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    0.459,     0.592,     0.696,     0.783,     0.857,     0.955,     1.029,     1.07 ],
        [ 3167.361,  1410.699,  1193.24 ,   494.32 ,   415.883,   361.806,   360.994,   369.15 ],
        [    3.139,     1.409,     1.13 ,     0.594,     0.414,     0.247,     0.237,     0.248],
        [    0.827,     0.439,     0.207,     0.272,     0.272,     0.295,     0.35 ,     0.382],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    3.496,     3.313,     3.812,     3.285,     2.608,     2.13 ,     1.896,     1.658],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    3.94 ,     2.813,     2.319,     1.676,     0.931,     0.893,     1.042,     1.101],
        [    1.606,     1.029,     0.713,     0.568,     0.365,     0.237,     0.203,     0.195],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    2.531,     1.652,     0.736,     0.819,     0.281,     0.185,     0.13 ,     0.118],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.087,     0.715,     0.458,     0.428,     0.245,     0.197,     0.187,     0.187],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    2.997,     2.236,     1.526,     0.826,     0.771,     0.385,     0.387,     0.396],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.899,     1.315,     1.52 ,     1.283,     1.183,     1.146,     1.138,     1.063],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    2.509,     1.367,     1.022,     0.987,     0.584,     0.443,     0.394,     0.395],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    2.28 ,     2.111,     3.333,     3.041,     2.966,     2.685,     2.942,     2.744]])
}

model_run_4 = {
    'train_acc': 0.8772,
    'validation_acc': 0.8489,
    'no_optimal_stimulus_neurons': np.array([0, 3, 10, 11, 12, 13, 16, 17, 18, 19, 20, 23, 24, 25, 31, 35, 36, 37, 40, 42, 43, 44, 47, 48, 50, 52, 56, 58, 59, 62, 63]),
    'c_len_iou_vs_len_test': np.array([0.9662, 0.7163, 0.9123, 0.9334, 0.9189]),
    'c_len_noise_resp': np.array([
        -1000.   ,     3.308,     1.22 , -1000.   ,     0.723,     0.472,     1.692,     1.334,     2.411,     2.385,
        -1000.   , -1000.   , -1000.   , -1000.   ,     2.607,     1.142, -1000.   , -1000.   , -1000.   , -1000.   ,
        -1000.   ,     0.792,     1.328, -1000.   , -1000.   , -1000.   ,     1.391,     3.235,     1.495,     0.774,
           1.218, -1000.   ,     1.085,     0.96 ,     1.515, -1000.   , -1000.   , -1000.   ,     1.908,     1.724,
        -1000.   ,     0.525, -1000.   , -1000.   , -1000.   ,     1.195,     0.871, -1000.   , -1000.   ,     1.338,
        -1000.   ,     1.83 , -1000.   ,     1.142,     0.38 ,     0.088, -1000.   ,     1.743, -1000.   , -1000.   ,
           0.   ,     1.41 , -1000.   , -1000.   ]),
    'c_len_mean_gains': np.array([
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     0.538,     0.523,     0.631,     0.694],
        [    1.   ,     1.26 ,     1.651,     1.888,     1.961],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     4.943,     9.17 ,     9.958,    10.011],
        [    1.   ,     0.402,     1.255,     1.653,     1.676],
        [    1.   ,     1.412,     3.136,     4.367,     4.874],
        [    1.   ,     4.13 ,     8.22 ,    11.059,    12.105],
        [    1.   ,     0.497,     0.543,     0.566,     0.562],
        [    1.   ,     1.106,     1.732,     2.524,     2.999],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     2.097,     3.588,     4.132,     4.21 ],
        [    1.   ,     0.031,     0.574,     1.136,     1.138],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.883,     5.095,     6.752,     7.269],
        [    1.   ,     0.75 ,     1.027,     1.203,     1.211],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.318,     2.021,     2.277,     2.427],
        [    1.   ,     0.834,     1.22 ,     1.628,     1.784],
        [    1.   ,     2.809,     4.114,     4.67 ,     4.812],
        [    1.   ,     1.001,     1.517,     1.788,     1.848],
        [    1.   ,     0.516,     0.531,     0.444,     0.425],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.332,     2.303,     2.976,     3.154],
        [    1.   ,     0.926,     1.76 ,     2.18 ,     2.257],
        [    1.   ,     0.82 ,     0.941,     1.022,     1.039],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     0.456,     0.744,     0.951,     1.063],
        [    1.   ,     0.935,     1.906,     3.231,     4.248],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.684,     5.049,     6.949,     7.429],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     2.193,     4.267,     4.837,     5.077],
        [    1.   ,     0.46 ,     0.758,     0.885,     0.963],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     2.37 ,     6.213,     7.268,     7.712],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     3.287,     5.431,     6.646,     7.055],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     2.143,     3.467,     4.115,     4.219],
        [    1.   ,     0.352,     5.249,     7.751,     8.342],
        [    1.   ,    38.699,    83.483,   105.342,   113.197],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     0.914,     0.922,     1.001,     1.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    0.   ,     0.   ,     0.   ,     0.   ,     0.   ],
        [    1.   ,     1.679,     3.47 ,     4.338,     4.857],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ]]),
    'spacing_noise_resp': np.array([
        -1000.   , -1000.   ,     1.311,     0.389, -1000.   , -1000.   ,     1.481,     0.   ,     1.171,     0.746,
        -1000.   , -1000.   ,     1.326, -1000.   , -1000.   , -1000.   ,     2.073,     1.351,     1.555,     2.658,
           1.119,     0.766,     1.443,     1.229, -1000.   , -1000.   ,     1.886,     2.514, -1000.   , -1000.   ,
           0.914, -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ,     1.983, -1000.   ,     1.651,     0.002,
           1.711,     1.513, -1000.   ,     0.487, -1000.   , -1000.   ,     0.644,     1.92 , -1000.   ,     1.511,
        -1000.   ,     2.546, -1000.   ,     1.243, -1000.   ,     1.1  , -1000.   , -1000.   , -1000.   , -1000.   ,
        -1000.   ,     1.383, -1000.   ,     0.354]),
    'spacing_mean_gains': np.array([
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.451,     0.892,     0.571,     0.463,     0.355,     0.309,     0.31 ,     0.29 ],
        [    3.686,     0.22 ,     1.055,     1.887,     1.102,     0.582,     0.377,     0.295],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    2.98 ,     2.184,     1.7  ,     1.341,     1.146,     1.051,     1.084,     1.148],
        [    0.   ,     0.   ,     0.   ,   121.892,  2264.283,  4134.77 ,  6578.282,  7643.491],
        [    0.862,     0.369,     0.092,     0.128,     0.212,     0.252,     0.378,     0.466],
        [    0.064,     0.296,     0.002,     0.   ,     0.   ,     0.   ,     0.   ,     0.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.309,     1.045,     0.957,     0.894,     0.833,     0.806,     0.795,     0.788],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.246,     0.721,     0.609,     0.581,     0.56 ,     0.529,     0.519,     0.522],
        [    0.475,     0.322,     0.264,     0.32 ,     0.441,     0.511,     0.597,     0.595],
        [    3.005,     1.442,     0.568,     0.304,     0.123,     0.03 ,     0.07 ,     0.072],
        [    1.782,     1.203,     0.894,     0.685,     0.624,     0.575,     0.527,     0.514],
        [    3.089,     2.323,     2.114,     2.28 ,     1.327,     1.262,     1.296,     1.137],
        [    0.96 ,     1.116,     1.274,     1.408,     1.252,     1.233,     1.282,     1.311],
        [    1.581,     1.21 ,     0.537,     0.41 ,     0.236,     0.162,     0.148,     0.167],
        [    1.476,     1.229,     1.115,     1.099,     1.151,     1.192,     1.167,     1.16 ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.575,     0.877,     0.641,     0.629,     0.601,     0.574,     0.595,     0.693],
        [    2.007,     1.411,     0.845,     0.58 ,     0.751,     0.64 ,     0.677,     0.656],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    7.21 ,     6.295,     2.955,     1.192,     0.802,     0.598,     0.328,     0.207],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.315,     0.602,     0.388,     0.506,     0.369,     0.361,     0.272,     0.21 ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    0.459,     0.592,     0.696,     0.783,     0.857,     0.955,     1.029,     1.07 ],
        [ 3167.361,  1410.699,  1193.24 ,   494.32 ,   415.883,   361.806,   360.994,   369.15 ],
        [    3.139,     1.409,     1.13 ,     0.594,     0.414,     0.247,     0.237,     0.248],
        [    0.827,     0.439,     0.207,     0.272,     0.272,     0.295,     0.35 ,     0.382],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    3.496,     3.313,     3.812,     3.285,     2.608,     2.13 ,     1.896,     1.658],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    3.94 ,     2.813,     2.319,     1.676,     0.931,     0.893,     1.042,     1.101],
        [    1.606,     1.029,     0.713,     0.568,     0.365,     0.237,     0.203,     0.195],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    2.531,     1.652,     0.736,     0.819,     0.281,     0.185,     0.13 ,     0.118],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.087,     0.715,     0.458,     0.428,     0.245,     0.197,     0.187,     0.187],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    2.997,     2.236,     1.526,     0.826,     0.771,     0.385,     0.387,     0.396],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.899,     1.315,     1.52 ,     1.283,     1.183,     1.146,     1.138,     1.063],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    2.509,     1.367,     1.022,     0.987,     0.584,     0.443,     0.394,     0.395],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    2.28 ,     2.111,     3.333,     3.041,     2.966,     2.685,     2.942,     2.744]])
}

model_run_5 = {
    'train_acc': 0.8710,
    'validation_acc': 0.8432,
    'no_optimal_stimulus_neurons': np.array([0, 3, 4, 10, 11, 13, 16, 17, 19, 30, 31, 32, 33, 35, 36, 37, 42, 43, 45, 48, 49, 52, 56, 57, 58, 59, 62]),
    'c_len_iou_vs_len_test': np.array([0.9604, 0.5166, 0.8404, 0.8850, 0.9119]),
    'c_len_noise_resp': np.array([
        -1000.   ,     2.322,     1.221, -1000.   , -1000.   ,     0.902,     0.441,     1.128,     2.08 ,     0.815,
        -1000.   , -1000.   ,     1.233, -1000.   ,     1.449,     1.115, -1000.   , -1000.   ,     0.513, -1000.   ,
           0.477,     2.111,     1.417,     0.061,     3.426,     1.77 ,     1.37 ,     0.   ,     0.033,     0.24 ,
        -1000.   , -1000.   , -1000.   , -1000.   ,     1.498, -1000.   , -1000.   , -1000.   ,     1.875,     0.274,
           2.097,     2.388, -1000.   , -1000.   ,     0.664, -1000.   ,     1.303,     0.015, -1000.   , -1000.   ,
           0.828,     0.056, -1000.   ,     0.632,     2.419,     1.598, -1000.   , -1000.   , -1000.   , -1000.   ,
           0.51 ,     1.561, -1000.   ,     0.004]),
    'c_len_mean_gains': np.array([
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     0.967,     1.033,     1.071,     1.065],
        [    1.   ,     0.846,     1.226,     1.292,     1.302],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.815,     2.483,     2.674,     2.719],
        [    1.   ,     0.057,     1.607,     3.351,     3.992],
        [    1.   ,     0.941,     1.388,     1.649,     1.683],
        [    1.   ,     1.   ,     1.366,     1.467,     1.463],
        [    1.   ,     2.048,     3.184,     3.893,     4.004],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.025,     1.251,     1.378,     1.374],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.325,     1.916,     1.979,     2.055],
        [    1.   ,     1.414,     2.828,     3.35 ,     3.452],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     2.52 ,     4.522,     6.692,     7.01 ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     2.707,     5.312,     5.72 ,     5.959],
        [    1.   ,     1.118,     2.424,     3.361,     3.629],
        [    1.   ,     1.269,     1.781,     1.94 ,     1.987],
        [    1.   ,     0.016,     8.464,    42.2  ,    56.557],
        [    1.   ,     1.151,     1.321,     1.394,     1.446],
        [    1.   ,     1.339,     2.025,     2.253,     2.304],
        [    1.   ,     0.006,     0.358,     0.753,     0.85 ],
        [    0.975,     0.   ,     0.   ,     0.   ,     0.   ],
        [    1.   ,     4.388,    29.426,    33.897,    30.659],
        [    1.   ,     4.376,    12.423,    14.686,    15.022],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.239,     1.735,     1.965,     2.102],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     0.796,     1.242,     1.472,     1.484],
        [    1.   ,     1.909,     5.982,     7.228,     7.506],
        [    1.   ,     1.271,     1.774,     1.871,     1.871],
        [    1.   ,     1.238,     1.85 ,     2.032,     2.034],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     0.615,     1.241,     1.456,     1.451],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     0.38 ,     0.556,     0.884,     0.936],
        [    0.999,    12.083,    55.729,    76.656,    79.835],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     0.659,     1.864,     2.462,     2.427],
        [    1.   ,     0.678,    16.365,    32.82 ,    41.329],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     0.182,     2.173,     3.224,     3.362],
        [    1.   ,     1.094,     1.515,     1.666,     1.692],
        [    1.   ,     1.232,     1.935,     2.418,     2.511],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    1.   ,     1.775,     6.753,     9.108,     9.289],
        [    1.   ,     1.319,     2.782,     4.087,     4.442],
        [-1000.   , -1000.   , -1000.   , -1000.   , -1000.   ],
        [    0.997,   361.205,   926.721,  1124.718,  1116.109]]),
    'spacing_noise_resp': np.array([
        -1000.   ,     2.336,     1.17 , -1000.   , -1000.   ,     0.902,     0.407,     1.158,     2.198,     0.862,
        -1000.   , -1000.   ,     1.232, -1000.   ,     1.439,     1.046, -1000.   , -1000.   ,     0.562, -1000.   ,
           0.515,     2.027,     1.417,     0.037,     3.43 ,     1.74 ,     1.372,     0.   ,     0.028,     0.233,
        -1000.   , -1000.   , -1000.   , -1000.   ,     1.533, -1000.   , -1000.   , -1000.   ,     1.905,     0.283,
           2.083,     2.37 , -1000.   , -1000.   ,     0.622, -1000.   ,     1.372,     0.012, -1000.   , -1000.   ,
           0.841,     0.055, -1000.   ,     0.643,     2.314,     1.584, -1000.   , -1000.   , -1000.   , -1000.   ,
           0.508,     1.448, -1000.   ,     0.   ]),
    'spacing_mean_gains': np.array([
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.073,      0.78 ,      0.626,      0.574,      0.584,      0.598,      0.608,      0.616],
        [     1.332,      0.675,      0.32 ,      0.413,      0.494,      0.471,      0.474,      0.478],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     2.671,      1.787,      1.303,      1.041,      0.959,      0.901,      0.882,      0.881],
        [     3.791,      3.667,      2.724,      2.335,      2.288,      2.505,      2.928,      3.596],
        [     1.626,      1.205,      1.349,      1.438,      1.48 ,      1.524,      1.579,      1.657],
        [     1.385,      0.576,      0.069,      0.13 ,      0.105,      0.123,      0.097,      0.084],
        [     3.685,      2.102,      1.118,      0.47 ,      0.271,      0.173,      0.179,      0.185],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.354,      1.251,      1.135,      1.075,      1.044,      1.07 ,      1.137,      1.154],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.981,      1.85 ,      1.207,      1.05 ,      0.842,      0.885,      0.82 ,      0.772],
        [     3.47 ,      2.574,      1.651,      0.963,      0.998,      0.971,      0.956,      0.985],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     6.1  ,      4.179,      4.   ,      3.   ,      2.035,      2.288,      2.152,      2.204],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     5.416,      2.299,      0.874,      0.983,      0.388,      0.83 ,      1.296,      1.588],
        [     3.441,      2.095,      1.712,      1.438,      1.056,      0.856,      0.833,      0.843],
        [     1.959,      1.45 ,      1.156,      1.154,      0.929,      0.88 ,      0.886,      0.91 ],
        [    69.751,     46.948,     32.986,     26.551,      1.   ,      6.153,      2.707,      2.957],
        [     1.413,      0.524,      0.156,      0.108,      0.027,      0.023,      0.017,      0.013],
        [     2.239,      1.195,      0.768,      0.199,      0.024,      0.   ,      0.   ,      0.   ],
        [     0.756,      0.549,      0.393,      0.671,      0.959,      1.179,      1.217,      1.228],
        [     0.   ,      0.   ,      0.   ,      0.   ,      0.   ,  91746.316, 120537.168, 133302.288],
        [    37.309,     48.305,     43.452,      1.368,      5.107,      1.725,      1.845,      1.069],
        [    15.199,     11.574,      6.145,      7.691,      4.062,      2.927,      2.542,      3.185],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.971,      1.171,      0.655,      0.591,      0.426,      0.438,      0.462,      0.509],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.429,      1.234,      1.063,      1.17 ,      1.07 ,      1.013,      1.066,      1.084],
        [     7.155,      5.559,      4.48 ,      0.862,      0.95 ,      1.406,      1.937,      2.429],
        [     1.863,      0.926,      0.506,      0.595,      0.219,      0.146,      0.112,      0.083],
        [     2.03 ,      1.572,      1.272,      1.056,      1.123,      0.894,      0.972,      1.029],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     1.569,      0.825,      1.158,      1.371,      0.676,      0.619,      0.749,      0.91 ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     0.804,      0.074,      0.02 ,      0.   ,      0.   ,      0.003,      0.136,      0.25 ],
        [   100.196,     88.547,    111.598,    101.869,     88.037,     95.323,    101.045,     99.352],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     2.427,      2.061,      0.658,      0.715,      0.842,      0.681,      0.918,      1.013],
        [    34.121,     21.715,     27.957,     32.062,     27.612,     30.58 ,     29.595,     27.253],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     2.974,      2.889,      0.929,      0.809,      0.003,      0.   ,      0.004,      0.161],
        [     1.75 ,      0.581,      0.15 ,      0.241,      0.303,      0.343,      0.332,      0.334],
        [     2.438,      1.951,      1.574,      1.343,      1.514,      1.276,      1.229,      1.204],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [     9.054,      0.823,      0.885,      1.138,      1.675,      1.713,      1.64 ,      1.665],
        [     4.486,      3.479,      1.601,      0.778,      0.742,      0.745,      0.818,      0.782],
        [ -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ,  -1000.   ],
        [404659.905, 384661.943, 317206.172, 205694.121, 134455.447, 136037.688, 128622.146, 112848.379]])
}

# Model with experiments on Curved Contours ---------------------------------------------
curved_model_run_1 = {
    'train_acc': 0.8755,
    'validation_acc': 0.8481,
    'no_optimal_stimulus_neurons': np.array([11, 12, 13, 19, 24, 31, 40, 45, 47, 56, 57, 59, 60, 62, 63]),
    'c_len_iou_vs_len_test': np.array([0.9689, 0.2162, 0.6263, 0.7723, 0.8165]),
    'c_len_noise_resp': np.array([
        4.246e-01,  2.771e+00,  7.749e-01,  1.700e+00,  2.123e-01,
        1.549e+00,  7.843e-02,  5.965e-01,  7.234e-02,  2.194e+00,
        9.548e-01, -1.000e+03, -1.000e+03, -1.000e+03,  2.581e+00,
        1.292e+00,  1.281e+00,  2.731e-01,  1.525e+00, -1.000e+03,
        2.147e-01,  4.586e-01,  1.834e-01,  4.821e-01, -1.000e+03,
        4.626e-01,  1.407e+00,  1.404e+00,  0.000e+00,  2.650e+00,
        1.605e+00, -1.000e+03,  7.725e-01,  2.697e+00,  2.547e+00,
        1.383e+00,  5.265e-01,  1.562e+00,  5.407e-01,  3.614e-02,
       -1.000e+03,  1.162e+00,  3.304e+00,  9.694e-01,  6.008e-01,
        1.178e+00,  2.188e-02, -1.000e+03,  1.635e+00,  5.471e-01,
        4.712e-02,  1.228e-01,  9.171e-01,  8.442e-03,  1.592e+00,
        1.703e+00, -1.000e+03, -1.000e+03,  6.860e-01, -1.000e+03,
       -1.000e+03,  3.025e-01, -1.000e+03, -1.000e+03]),
    'c_len_mean_gains': np.array([
        [ 1.000e+00,  2.959e+00,  5.111e+00,  6.085e+00,  6.420e+00],
           [ 1.000e+00,  1.361e+00,  1.396e+00,  1.437e+00,  1.469e+00],
           [ 1.000e+00,  1.839e-01,  2.855e-01,  3.921e-01,  4.065e-01],
           [ 1.000e+00,  1.711e+00,  2.224e+00,  2.445e+00,  2.503e+00],
           [ 1.000e+00,  3.562e+00,  5.856e+00,  7.340e+00,  7.258e+00],
           [ 1.000e+00,  1.443e+00,  1.980e+00,  2.128e+00,  2.203e+00],
           [ 9.999e-01,  1.129e+01,  2.594e+01,  3.624e+01,  4.017e+01],
           [ 1.000e+00,  2.323e+00,  2.260e+00,  2.445e+00,  2.331e+00],
           [ 9.999e-01,  0.000e+00,  1.108e-01,  2.141e-02,  2.064e-01],
           [ 1.000e+00,  1.301e+00,  1.455e+00,  1.482e+00,  1.518e+00],
           [ 1.000e+00,  1.445e+00,  2.202e+00,  2.519e+00,  2.610e+00],
           [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
           [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
           [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
           [ 1.000e+00,  1.362e+00,  1.569e+00,  1.603e+00,  1.525e+00],
           [ 1.000e+00,  1.029e+00,  1.016e+00,  1.064e+00,  1.108e+00],
           [ 1.000e+00,  1.222e+00,  1.547e+00,  1.586e+00,  1.604e+00],
           [ 1.000e+00,  4.875e+00,  7.449e+00,  8.507e+00,  8.471e+00],
           [ 1.000e+00,  8.003e-01,  9.606e-01,  9.014e-01,  8.780e-01],
           [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
           [ 1.000e+00,  9.576e+00,  1.767e+01,  1.920e+01,  1.945e+01],
           [ 1.000e+00,  3.932e+00,  5.509e+00,  6.279e+00,  6.802e+00],
           [ 9.999e-01,  4.071e+00,  3.635e+00,  3.658e+00,  3.046e+00],
           [ 1.000e+00,  2.900e-01,  6.876e-01,  1.058e+00,  1.052e+00],
           [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
           [ 1.000e+00,  3.773e+00,  5.159e+00,  5.294e+00,  5.799e+00],
           [ 1.000e+00,  1.168e+00,  1.312e+00,  1.385e+00,  1.507e+00],
           [ 1.000e+00,  1.506e+00,  1.599e+00,  1.694e+00,  1.681e+00],
           [ 0.000e+00,  0.000e+00,  0.000e+00,  4.628e+03,  8.436e+03],
           [ 1.000e+00,  9.604e-01,  1.044e+00,  1.089e+00,  1.097e+00],
           [ 1.000e+00,  1.208e+00,  1.452e+00,  1.508e+00,  1.535e+00],
           [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
           [ 1.000e+00,  1.790e-01,  1.562e-01,  2.166e-01,  3.021e-01],
           [ 1.000e+00,  8.917e-01,  9.061e-01,  9.201e-01,  8.749e-01],
           [ 1.000e+00,  1.112e+00,  1.111e+00,  1.091e+00,  1.062e+00],
           [ 1.000e+00,  6.557e-01,  7.834e-01,  8.075e-01,  8.894e-01],
           [ 1.000e+00,  2.102e+00,  2.640e+00,  2.967e+00,  2.740e+00],
           [ 1.000e+00,  1.663e+00,  2.206e+00,  2.335e+00,  2.287e+00],
           [ 1.000e+00,  3.032e+00,  3.809e+00,  4.163e+00,  4.209e+00],
           [ 9.997e-01,  2.765e+01,  5.216e+01,  5.263e+01,  5.049e+01],
           [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
           [ 1.000e+00,  1.416e+00,  1.456e+00,  1.474e+00,  1.552e+00],
           [ 1.000e+00,  1.062e+00,  9.851e-01,  1.050e+00,  1.072e+00],
           [ 1.000e+00,  1.130e+00,  1.272e+00,  1.295e+00,  1.352e+00],
           [ 1.000e+00,  5.468e-01,  4.133e-01,  5.236e-01,  5.691e-01],
           [ 1.000e+00,  1.150e+00,  1.155e+00,  1.251e+00,  1.132e+00],
           [ 9.995e-01,  7.316e+00,  1.378e+01,  1.594e+01,  1.854e+01],
           [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
           [ 1.000e+00,  1.104e+00,  1.382e+00,  1.404e+00,  1.547e+00],
           [ 1.000e+00,  2.405e+00,  4.154e+00,  4.660e+00,  5.456e+00],
           [ 9.998e-01,  1.031e+01,  1.428e+01,  1.873e+01,  1.857e+01],
           [ 9.999e-01,  3.709e+00,  8.680e+00,  1.126e+01,  1.356e+01],
           [ 1.000e+00,  1.022e+00,  1.272e+00,  1.268e+00,  1.175e+00],
           [ 9.988e-01,  1.119e+00,  5.448e+01,  1.772e+02,  2.610e+02],
           [ 1.000e+00,  7.949e-01,  8.282e-01,  9.976e-01,  9.530e-01],
           [ 1.000e+00,  1.065e+00,  1.451e+00,  1.683e+00,  1.717e+00],
           [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
           [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
           [ 1.000e+00,  5.249e-01,  4.524e-01,  2.125e-01,  2.787e-01],
           [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
           [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
           [ 1.000e+00,  1.308e+01,  1.720e+01,  2.215e+01,  2.545e+01],
           [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
           [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03]]),
    'spacing_noise_resp': np.array([
        1.243e+00,  3.388e+00,  5.722e-01,  1.969e+00,  3.338e-01,  1.490e+00,  1.562e-01,  1.638e+00,  4.138e-02,
        2.610e+00,  9.795e-01, -1.000e+03, -1.000e+03, -1.000e+03,  3.113e+00,  1.515e+00,  1.342e+00,  1.188e+00,
        1.689e+00, -1.000e+03,  1.107e+00,  1.607e+00,  1.342e+00,  3.096e-01, -1.000e+03,  4.722e-01,  2.119e+00,
        1.974e+00,  2.475e-03,  2.736e+00,  1.919e+00, -1.000e+03,  6.781e-01,  2.669e+00,  2.792e+00,  1.115e+00,
        8.059e-01,  2.224e+00,  1.606e+00,  8.468e-03, -1.000e+03,  2.167e+00,  3.858e+00,  1.269e+00,  1.179e+00,
        1.628e+00,  4.731e-01, -1.000e+03,  1.638e+00,  1.097e+00,  3.817e-01,  8.327e-01,  9.499e-01,  1.168e-01,
        1.823e+00,  2.032e+00, -1.000e+03, -1.000e+03,  7.086e-01, -1.000e+03, -1.000e+03,  1.328e+00, -1.000e+03,
       -1.000e+03]),
    'spacing_mean_gains': np.array([
        [ 2.179e+00,  1.805e+00,  1.550e+00,  1.494e+00,  1.281e+00,  1.301e+00,  1.254e+00,  1.255e+00],
        [ 1.175e+00,  8.370e-01,  6.363e-01,  5.919e-01,  5.026e-01,  4.722e-01,  4.691e-01,  4.705e-01],
        [ 5.048e-01,  1.989e-01,  3.826e-01,  6.195e-01,  9.870e-01,  1.283e+00,  1.423e+00,  1.626e+00],
        [ 2.022e+00,  1.342e+00,  6.388e-01,  6.930e-01,  5.616e-01,  6.318e-01,  6.988e-01,  6.712e-01],
        [ 4.509e+00,  3.074e+00,  2.011e+00,  1.029e+00,  7.567e-01,  8.891e-01,  7.531e-01,  6.228e-01],
        [ 2.297e+00,  1.215e+00,  6.013e-01,  3.524e-01,  1.116e-01,  7.667e-02,  3.902e-02,  4.729e-03],
        [ 1.556e+01,  1.146e+01,  6.777e+00,  2.506e+00,  2.169e+00,  2.057e+00,  2.098e+00,  1.828e+00],
        [ 8.678e-01,  4.431e-01,  2.906e-01,  6.098e-01,  5.996e-01,  7.178e-01,  7.824e-01,  7.744e-01],
        [ 6.128e-02,  0.000e+00,  4.781e-02,  6.090e-01,  3.084e+00,  6.227e+00,  1.046e+01,  1.041e+01],
        [ 1.278e+00,  7.066e-01,  1.234e-01,  2.305e-01,  8.784e-02,  4.601e-02,  4.079e-02,  1.603e-02],
        [ 2.616e+00,  8.005e-01,  4.618e-01,  5.414e-01,  2.829e-01,  2.130e-01,  1.379e-01,  6.625e-02],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.189e+00,  4.076e-01,  3.689e-01,  3.405e-01,  3.027e-01,  2.633e-01,  1.878e-01,  1.479e-01],
        [ 9.429e-01,  9.877e-02,  3.310e-02,  2.655e-02,  9.728e-03,  9.140e-04,  0.000e+00,  0.000e+00],
        [ 1.551e+00,  1.078e+00,  3.380e-01,  4.374e-02,  5.016e-02,  1.147e-02,  7.869e-03,  0.000e+00],
        [ 1.971e+00,  1.606e+00,  9.708e-01,  1.107e+00,  9.007e-01,  9.106e-01,  1.043e+00,  1.109e+00],
        [ 8.355e-01,  1.744e-01,  2.776e-02,  5.052e-02,  1.406e-02,  1.703e-02,  2.347e-02,  2.460e-02],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 3.693e+00,  2.805e+00,  2.161e+00,  1.544e+00,  1.220e+00,  1.112e+00,  1.040e+00,  9.802e-01],
        [ 1.992e+00,  1.300e+00,  8.482e-01,  7.091e-01,  1.079e+00,  1.072e+00,  1.092e+00,  1.119e+00],
        [ 4.922e-01,  3.471e-01,  5.175e-01,  8.086e-01,  8.390e-01,  8.732e-01,  9.306e-01,  9.795e-01],
        [ 1.614e+00,  1.652e+00,  2.189e+00,  2.735e+00,  2.093e+00,  2.202e+00,  2.117e+00,  2.104e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 5.164e+00,  4.316e+00,  3.207e+00,  9.971e-01,  5.029e-01,  1.870e-01,  1.414e-01,  9.438e-03],
        [ 9.259e-01,  4.346e-01,  3.723e-01,  5.202e-01,  5.729e-01,  6.595e-01,  6.643e-01,  6.611e-01],
        [ 1.230e+00,  5.173e-01,  1.050e-01,  1.519e-01,  1.164e-01,  6.181e-02,  5.078e-02,  4.767e-02],
        [ 9.784e+00,  5.591e+00,  2.885e+01,  9.582e+01,  1.452e+02,  1.554e+02,  1.784e+02,  1.924e+02],
        [ 1.069e+00,  3.812e-01,  3.338e-02,  9.668e-03,  9.584e-03,  2.267e-03,  9.443e-04,  4.282e-05],
        [ 1.241e+00,  6.257e-01,  2.882e-01,  3.036e-01,  2.881e-01,  3.286e-01,  3.465e-01,  3.535e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 2.393e-01,  1.297e-01,  5.508e-01,  9.772e-01,  1.116e+00,  1.249e+00,  1.302e+00,  1.333e+00],
        [ 9.445e-01,  2.405e-02,  1.957e-03,  4.036e-02,  4.444e-02,  5.080e-02,  6.677e-02,  5.380e-02],
        [ 9.899e-01,  2.673e-01,  1.074e-01,  2.173e-01,  1.915e-01,  1.881e-01,  1.942e-01,  2.017e-01],
        [ 1.078e+00,  4.706e-01,  6.296e-02,  1.334e-01,  1.421e-01,  1.713e-01,  1.594e-01,  1.492e-01],
        [ 1.880e+00,  1.190e+00,  3.263e-01,  2.433e-01,  1.988e-01,  3.573e-02,  2.030e-03,  0.000e+00],
        [ 1.626e+00,  5.332e-01,  2.356e-01,  2.509e-01,  2.498e-01,  2.598e-01,  2.426e-01,  2.660e-01],
        [ 1.418e+00,  1.016e+00,  9.971e-01,  8.604e-01,  8.151e-01,  7.704e-01,  7.911e-01,  7.829e-01],
        [ 2.343e+02,  2.742e+02,  2.407e+02,  1.569e+02,  1.496e+02,  1.329e+02,  1.215e+02,  1.142e+02],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 7.574e-01,  6.921e-01,  6.891e-01,  7.359e-01,  7.255e-01,  7.521e-01,  7.290e-01,  7.245e-01],
        [ 8.962e-01,  1.887e-01,  2.985e-02,  5.940e-02,  7.804e-02,  9.581e-02,  7.570e-02,  4.513e-02],
        [ 9.881e-01,  9.365e-01,  8.410e-01,  8.864e-01,  8.659e-01,  9.005e-01,  8.903e-01,  8.715e-01],
        [ 3.279e-01,  1.062e-01,  1.439e-01,  2.085e-01,  4.267e-01,  5.660e-01,  7.765e-01,  8.111e-01],
        [ 9.303e-01,  2.836e-01,  3.376e-03,  1.426e-03,  1.334e-03,  0.000e+00,  0.000e+00,  1.638e-03],
        [ 6.859e-01,  9.697e-01,  2.395e+00,  3.062e+00,  3.517e+00,  3.420e+00,  3.592e+00,  3.562e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.443e+00,  5.919e-01,  3.545e-01,  4.061e-01,  2.003e-01,  1.049e-01,  1.265e-01,  9.899e-02],
        [ 2.531e+00,  1.619e+00,  5.396e-01,  3.437e-01,  2.288e-01,  5.052e-02,  1.306e-02,  3.265e-03],
        [ 2.093e+00,  3.523e+00,  3.756e+00,  4.216e+00,  4.493e+00,  4.273e+00,  4.790e+00,  5.186e+00],
        [ 1.833e+00,  9.874e-01,  1.309e+00,  1.227e+00,  9.190e-01,  1.038e+00,  9.336e-01,  8.023e-01],
        [ 1.194e+00,  6.246e-01,  4.739e-01,  8.240e-01,  9.770e-01,  1.118e+00,  1.481e+00,  1.607e+00],
        [ 1.262e+01,  1.084e+01,  6.842e+00,  9.471e+00,  5.244e+00,  4.637e+00,  4.587e+00,  5.887e+00],
        [ 8.106e-01,  1.350e-01,  6.034e-03,  1.017e-03,  3.244e-02,  2.766e-02,  1.277e-01,  8.488e-02],
        [ 1.467e+00,  7.775e-01,  2.002e-01,  1.321e-01,  1.850e-01,  1.672e-01,  2.265e-01,  2.360e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 4.436e-01,  4.944e-02,  1.098e-01,  4.591e-01,  1.703e-01,  3.921e-02,  6.878e-03,  5.530e-03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 5.132e+00,  3.105e+00,  2.170e+00,  1.353e+00,  1.416e+00,  1.145e+00,  1.099e+00,  1.079e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03]])
}

curved_model_run_2 = {
    'train_acc': 0.8735,
    'validation_acc': 0.8420,
    'no_optimal_stimulus_neurons': np.array([0, 2, 9, 10, 11, 12, 13, 14, 15, 20, 23, 24, 27, 30, 33, 36, 37, 39, 42, 43, 44, 47, 48, 52, 57, 58, 59]),
    'c_len_iou_vs_len_test': np.array([0.9129, 0.4583, 0.8323, 0.8619, 0.8778]),
    'c_len_noise_resp': np.array([
        -1.000e+03,  2.051e+00, -1.000e+03,  1.535e-01,  5.681e-01,
        4.394e-01,  1.846e-01,  0.000e+00,  1.006e-01, -1.000e+03,
       -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03,
       -1.000e+03,  5.868e-02,  1.598e-01,  1.047e-01,  2.005e+00,
       -1.000e+03,  6.309e-02,  1.486e-01, -1.000e+03, -1.000e+03,
        0.000e+00,  2.748e-03, -1.000e+03,  1.123e+00,  5.429e-01,
        7.441e-01,  2.048e-01,  1.058e+00, -1.000e+03,  2.733e-01,
        4.709e-02, -1.000e+03, -1.000e+03,  2.225e-01, -1.000e+03,
        1.016e+00,  5.629e-01, -1.000e+03, -1.000e+03, -1.000e+03,
        1.577e+00,  0.000e+00, -1.000e+03, -1.000e+03,  7.105e-02,
        4.143e-01,  1.237e+00, -1.000e+03,  2.180e+00,  2.476e-01,
        2.915e-01,  1.039e+00, -1.000e+03, -1.000e+03, -1.000e+03,
        9.614e-04,  2.516e+00,  5.822e-01,  9.427e-02]),
    'c_len_mean_gains': np.array([
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  1.934e+00,  2.303e+00,  2.355e+00,  2.389e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 9.999e-01,  4.646e+00,  8.047e+00,  9.890e+00,  1.058e+01],
        [ 1.000e+00,  2.417e+00,  3.437e+00,  3.981e+00,  3.687e+00],
        [ 1.000e+00,  3.646e+00,  6.271e+00,  9.896e+00,  1.062e+01],
        [ 9.999e-01,  1.529e+01,  2.365e+01,  2.676e+01,  2.695e+01],
        [ 0.000e+00,  0.000e+00,  1.698e+02,  2.186e+02,  1.823e+03],
        [ 9.999e-01,  0.000e+00,  9.883e-02,  3.177e-01,  5.808e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 9.998e-01,  4.623e+00,  9.889e+00,  1.200e+01,  1.204e+01],
        [ 9.999e-01,  8.200e-01,  1.521e+00,  1.971e+00,  2.528e+00],
        [ 9.999e-01,  6.726e+00,  7.606e+00,  7.306e+00,  8.069e+00],
        [ 1.000e+00,  9.414e-01,  1.322e+00,  1.368e+00,  1.334e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 9.998e-01,  1.446e+01,  3.102e+01,  3.682e+01,  3.857e+01],
        [ 9.999e-01,  2.089e+00,  2.711e+00,  3.275e+00,  2.605e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 0.000e+00,  9.725e+02,  2.318e+04,  4.559e+04,  4.204e+04],
        [ 9.964e-01,  4.902e+01,  1.941e+02,  2.940e+02,  3.417e+02],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  1.991e+00,  2.622e+00,  2.654e+00,  2.697e+00],
        [ 1.000e+00,  3.947e+00,  6.169e+00,  7.168e+00,  6.731e+00],
        [ 1.000e+00,  1.007e+00,  2.270e+00,  2.385e+00,  2.710e+00],
        [ 1.000e+00,  1.317e+00,  2.047e+00,  1.716e+00,  2.560e+00],
        [ 1.000e+00,  8.568e-01,  1.044e+00,  1.185e+00,  1.100e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  1.230e+00,  1.548e+00,  1.211e+00,  1.292e+00],
        [ 9.998e-01,  5.311e+00,  1.959e+01,  2.248e+01,  2.205e+01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  1.487e+01,  2.588e+01,  3.112e+01,  3.247e+01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  9.454e-01,  9.499e-01,  1.027e+00,  1.030e+00],
        [ 1.000e+00,  1.023e-01,  2.195e-02,  1.864e-02,  3.800e-02],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  1.733e+00,  2.138e+00,  2.277e+00,  2.277e+00],
        [ 0.000e+00,  0.000e+00,  1.297e+03,  2.871e+03,  1.035e+04],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 9.999e-01,  5.542e-01,  1.610e+00,  2.357e+00,  4.408e+00],
        [ 1.000e+00,  9.722e-01,  1.850e+00,  1.686e+00,  2.205e+00],
        [ 1.000e+00,  1.870e+00,  2.626e+00,  2.891e+00,  2.899e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  1.491e+00,  1.833e+00,  1.939e+00,  1.932e+00],
        [ 1.000e+00,  4.729e-01,  1.387e+00,  1.370e+00,  1.808e+00],
        [ 1.000e+00,  7.864e+00,  1.430e+01,  1.683e+01,  1.714e+01],
        [ 1.000e+00,  7.271e-01,  8.389e-01,  8.979e-01,  8.939e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 9.897e-01,  0.000e+00,  1.122e+01,  2.703e+02,  4.734e+02],
        [ 1.000e+00,  9.576e-01,  1.034e+00,  1.112e+00,  1.102e+00],
        [ 1.000e+00,  3.950e+00,  6.677e+00,  7.308e+00,  7.296e+00],
        [ 9.999e-01,  1.825e+00,  7.832e+00,  1.209e+01,  1.452e+01]]),
    'spacing_noise_resp': np.array([
        -1.000e+03,  2.754e+00, -1.000e+03,  5.997e-01,  1.216e+00,  8.462e-01,  1.263e+00,  0.000e+00,  5.175e-01,
       -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03,  3.395e-01,  7.882e-01,
        1.009e+00,  1.476e+00, -1.000e+03,  4.279e-01,  9.181e-01, -1.000e+03, -1.000e+03,  0.000e+00,  1.594e-01,
       -1.000e+03,  1.596e+00,  3.970e-01,  1.316e+00,  6.239e-01,  1.149e+00, -1.000e+03,  8.342e-01,  2.104e-02,
       -1.000e+03, -1.000e+03,  1.302e+00, -1.000e+03,  1.884e+00,  4.208e-01, -1.000e+03, -1.000e+03, -1.000e+03,
        2.216e+00,  2.868e-02, -1.000e+03, -1.000e+03,  8.797e-01,  8.026e-01,  2.060e+00, -1.000e+03,  2.870e+00,
        5.748e-01,  1.216e+00,  9.036e-01, -1.000e+03, -1.000e+03, -1.000e+03,  2.330e-03,  3.612e+00,  5.027e-01,
        2.146e-02]),
    'spacing_mean_gains': np.array([
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.705e+00,  1.147e+00,  8.513e-01,  7.213e-01,  6.806e-01,  6.041e-01,  6.100e-01,  5.961e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 2.562e+00,  1.933e+00,  2.377e+00,  2.188e+00,  1.936e+00,  1.858e+00,  1.716e+00,  1.551e+00],
        [ 1.855e+00,  1.349e+00,  5.641e-01,  6.176e-01,  4.235e-01,  3.020e-01,  1.768e-01,  2.163e-01],
        [ 4.753e+00,  4.204e+00,  2.790e+00,  2.324e+00,  1.066e+00,  8.460e-01,  6.529e-01,  7.440e-01],
        [ 4.210e+00,  3.576e+00,  2.923e+00,  2.179e+00,  1.677e+00,  1.332e+00,  1.204e+00,  1.185e+00],
        [ 0.000e+00,  3.571e+04,  1.354e+05,  1.197e+05,  1.214e+05,  1.218e+05,  1.311e+05,  1.411e+05],
        [ 5.579e-02,  3.944e-02,  3.573e-03,  9.918e-02,  9.255e-01,  1.101e+00,  1.279e+00,  1.371e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 2.180e+00,  4.497e-01,  4.467e-01,  1.289e+00,  1.417e+00,  1.410e+00,  1.337e+00,  1.263e+00],
        [ 3.442e-01,  7.644e-01,  6.444e-01,  5.093e-01,  4.834e-01,  5.468e-01,  6.596e-01,  7.292e-01],
        [ 7.934e-01,  7.568e-01,  9.677e-01,  9.610e-01,  7.823e-01,  7.572e-01,  7.210e-01,  7.306e-01],
        [ 1.747e+00,  7.434e-01,  5.897e-01,  4.822e-01,  4.867e-01,  4.396e-01,  4.912e-01,  5.710e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 5.140e+00,  1.859e+00,  6.197e-01,  7.909e-01,  1.101e+00,  1.346e+00,  1.447e+00,  1.446e+00],
        [ 5.363e-01,  4.241e-01,  5.486e-01,  9.727e-01,  1.052e+00,  1.185e+00,  1.256e+00,  1.291e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 3.457e+04,  4.281e+04,  8.514e+04,  2.805e+04,  1.788e+04,  3.240e+03,  5.559e+03,  2.529e+03],
        [ 5.780e+00,  6.424e+00,  7.476e+00,  5.496e+00,  2.439e+00,  2.037e+00,  2.914e+00,  3.273e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.855e+00,  1.267e+00,  7.612e-01,  7.957e-01,  5.562e-01,  5.061e-01,  4.070e-01,  4.317e-01],
        [ 9.037e+00,  8.451e+00,  6.318e+00,  3.579e+00,  2.709e+00,  1.940e+00,  1.983e+00,  2.111e+00],
        [ 1.425e+00,  9.796e-01,  3.750e-01,  2.168e-01,  2.586e-01,  1.498e-01,  8.658e-02,  7.305e-02],
        [ 6.850e-01,  6.347e-01,  6.104e-01,  9.824e-01,  9.513e-01,  7.771e-01,  5.790e-01,  4.763e-01],
        [ 1.088e+00,  7.321e-01,  5.374e-01,  4.051e-01,  6.287e-01,  7.644e-01,  8.269e-01,  7.831e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 5.079e-01,  1.126e+00,  1.709e+00,  1.517e+00,  1.578e+00,  1.716e+00,  1.703e+00,  1.763e+00],
        [ 5.108e+01,  5.778e+01,  8.771e+01,  6.523e+01,  4.651e+01,  3.423e+01,  2.715e+01,  2.048e+01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 5.388e+00,  3.732e+00,  3.043e+00,  2.295e+00,  2.086e+00,  1.880e+00,  1.800e+00,  1.722e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 5.256e-01,  1.851e-01,  9.452e-02,  2.091e-01,  2.546e-01,  2.701e-01,  2.471e-01,  2.133e-01],
        [ 6.680e-02,  5.274e-01,  1.913e+00,  3.183e+00,  3.735e+00,  3.430e+00,  3.246e+00,  3.202e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.603e+00,  1.210e+00,  5.430e-01,  5.881e-01,  4.093e-01,  3.610e-01,  2.562e-01,  2.537e-01],
        [ 2.456e+00,  3.573e+00,  7.710e+00,  1.592e+01,  1.048e+01,  1.608e+01,  2.012e+01,  2.641e+01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 3.830e-01,  8.774e-01,  1.175e+00,  1.626e+00,  1.443e+00,  1.373e+00,  1.454e+00,  1.472e+00],
        [ 1.135e+00,  7.393e-01,  6.276e-01,  6.871e-01,  7.997e-01,  7.907e-01,  9.086e-01,  9.466e-01],
        [ 1.670e+00,  9.766e-01,  5.502e-01,  3.200e-01,  3.130e-01,  3.149e-01,  3.236e-01,  3.333e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.581e+00,  5.064e-01,  2.029e-01,  1.540e-01,  1.518e-01,  1.298e-01,  1.493e-01,  1.353e-01],
        [ 6.398e-01,  2.260e-01,  2.861e-02,  0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00],
        [ 3.958e+00,  3.531e+00,  2.280e+00,  1.623e+00,  1.454e+00,  1.354e+00,  1.373e+00,  1.359e+00],
        [ 1.053e+00,  7.140e-01,  5.119e-01,  6.173e-01,  5.152e-01,  4.510e-01,  4.038e-01,  3.714e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.068e+02,  5.804e+01,  1.325e+02,  1.761e+02,  1.728e+02,  2.543e+02,  3.114e+02,  3.002e+02],
        [ 7.907e-01,  3.505e-01,  2.825e-01,  3.553e-01,  3.576e-01,  3.659e-01,  3.789e-01,  3.764e-01],
        [ 8.901e+00,  6.198e+00,  5.303e+00,  2.993e+00,  1.513e+00,  4.732e-01,  7.253e-02,  3.128e-03],
        [ 4.702e+01,  3.429e+01,  4.668e+01,  4.711e+01,  4.186e+01,  4.770e+01,  5.412e+01,  5.453e+01]])
}

curved_model_run_3 = {
    'train_acc': 0.8695,
    'validation_acc': 0.8419,
    'no_optimal_stimulus_neurons': np.array([0, 1, 4, 5, 10, 11, 13, 14, 15, 24, 25, 28, 29, 31, 32, 33, 34, 35, 37, 42, 44, 45, 48, 50, 52, 54, 56, 57, 58, 59, 60, 62]),
    'c_len_iou_vs_len_test': np.array([0.9677, 0.1769, 0.6883, 0.8143, 0.8530]),
    'c_len_noise_resp': np.array([
        -1.000e+03, -1.000e+03,  8.160e-01,  5.045e-02, -1.000e+03,
       -1.000e+03,  5.544e-01,  0.000e+00,  3.318e-01,  1.645e-01,
       -1.000e+03, -1.000e+03,  4.066e-01, -1.000e+03, -1.000e+03,
       -1.000e+03,  5.508e-01,  3.816e-01,  7.794e-01,  1.414e+00,
        5.242e-02,  1.301e-01,  6.691e-01,  2.653e-01, -1.000e+03,
       -1.000e+03,  7.529e-01,  7.839e-01, -1.000e+03, -1.000e+03,
       -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03,
       -1.000e+03,  1.482e+00, -1.000e+03,  4.342e-01,  0.000e+00,
        1.286e+00,  7.265e-01, -1.000e+03,  1.948e-01, -1.000e+03,
       -1.000e+03,  7.588e-02,  1.209e+00, -1.000e+03,  8.077e-01,
       -1.000e+03,  1.584e+00, -1.000e+03,  2.742e-01, -1.000e+03,
        3.073e-01, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03,
       -1.000e+03,  2.712e-01, -1.000e+03,  1.481e-01]),
    'c_len_mean_gains': np.array([
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  9.639e-01,  1.116e+00,  1.166e+00,  1.143e+00],
        [ 9.998e-01,  3.010e-01,  1.403e+01,  2.581e+01,  2.919e+01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  3.089e+00,  3.786e+00,  3.822e+00,  4.163e+00],
        [ 0.000e+00,  0.000e+00,  0.000e+00,  3.833e+02,  8.181e+02],
        [ 1.000e+00,  6.937e-01,  1.295e+00,  1.622e+00,  1.531e+00],
        [ 9.999e-01,  1.315e-01,  6.665e-02,  5.093e-02,  3.860e-02],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  3.297e+00,  3.612e+00,  3.706e+00,  3.774e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  3.360e+00,  3.507e+00,  3.535e+00,  3.557e+00],
        [ 1.000e+00,  1.356e+00,  1.359e+00,  1.634e+00,  1.620e+00],
        [ 1.000e+00,  2.088e+00,  3.097e+00,  3.435e+00,  3.597e+00],
        [ 1.000e+00,  2.027e+00,  2.273e+00,  2.317e+00,  2.298e+00],
        [ 9.998e-01,  2.162e+01,  3.376e+01,  3.745e+01,  4.233e+01],
        [ 9.999e-01,  3.611e+00,  3.942e+00,  3.938e+00,  3.924e+00],
        [ 1.000e+00,  2.209e+00,  2.596e+00,  2.831e+00,  2.919e+00],
        [ 1.000e+00,  4.704e+00,  4.877e+00,  5.063e+00,  5.106e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  2.599e+00,  2.776e+00,  3.160e+00,  3.450e+00],
        [ 1.000e+00,  1.324e+00,  1.582e+00,  1.989e+00,  1.877e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  1.092e+00,  1.185e+00,  1.272e+00,  1.303e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  1.011e+00,  6.214e-01,  5.119e-01,  6.681e-01],
        [ 0.000e+00,  2.784e+04,  1.558e+05,  1.996e+05,  2.121e+05],
        [ 1.000e+00,  1.273e+00,  1.750e+00,  1.810e+00,  1.810e+00],
        [ 1.000e+00,  1.064e+00,  1.390e+00,  1.377e+00,  1.555e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 9.999e-01,  3.524e+00,  5.616e+00,  5.742e+00,  5.543e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 9.999e-01,  1.133e+01,  1.974e+01,  2.213e+01,  2.568e+01],
        [ 1.000e+00,  1.645e+00,  1.823e+00,  1.870e+00,  1.876e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  2.081e+00,  3.098e+00,  3.138e+00,  3.048e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  1.264e+00,  1.297e+00,  1.338e+00,  1.302e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  3.358e+00,  4.853e+00,  5.440e+00,  5.571e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  4.892e+00,  7.401e+00,  7.490e+00,  8.094e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  3.434e+00,  9.402e+00,  1.228e+01,  1.154e+01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 9.999e-01,  6.567e+00,  9.453e+00,  1.108e+01,  1.162e+01]]),
    'spacing_noise_resp': np.array([
        -1.000e+03, -1.000e+03,  1.089e+00,  7.474e-02, -1.000e+03, -1.000e+03,  1.474e+00,  0.000e+00,  1.082e+00,
        4.878e-01, -1.000e+03, -1.000e+03,  1.294e+00, -1.000e+03, -1.000e+03, -1.000e+03,  2.008e+00,  1.163e+00,
        1.332e+00,  2.671e+00,  9.526e-01,  7.142e-01,  1.543e+00,  1.206e+00, -1.000e+03, -1.000e+03,  2.303e+00,
        2.288e+00, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03,
        1.915e+00, -1.000e+03,  1.574e+00,  1.635e-03,  1.373e+00,  1.269e+00, -1.000e+03,  3.946e-01, -1.000e+03,
       -1.000e+03,  5.950e-01,  1.729e+00, -1.000e+03,  1.388e+00, -1.000e+03,  2.440e+00, -1.000e+03,  1.093e+00,
       -1.000e+03,  8.748e-01, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03,  1.215e+00, -1.000e+03,
        4.526e-01]),
    'spacing_mean_gains': np.array([
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 8.181e-01,  6.330e-01,  4.612e-01,  4.984e-01,  3.941e-01,  3.484e-01,  3.417e-01,  3.393e-01],
        [ 1.225e+01,  6.520e+00,  9.773e+00,  8.126e+00,  6.065e+00,  3.148e+00,  1.820e+00,  2.008e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.595e+00,  1.375e+00,  9.436e-01,  1.033e+00,  1.081e+00,  1.043e+00,  1.084e+00,  1.062e+00],
        [ 8.069e+02,  3.733e+03,  4.592e+03,  3.449e+04,  4.915e+04,  8.562e+04,  1.190e+05,  1.350e+05],
        [ 4.187e-01,  1.281e-01,  2.714e-01,  2.703e-01,  2.650e-01,  4.213e-01,  5.008e-01,  5.873e-01],
        [ 4.123e-03,  2.033e-02,  0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00,  3.329e-04],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.166e+00,  9.725e-01,  9.191e-01,  8.700e-01,  8.276e-01,  8.123e-01,  8.051e-01,  8.027e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 9.403e-01,  6.948e-01,  5.852e-01,  5.911e-01,  5.794e-01,  5.468e-01,  5.388e-01,  5.294e-01],
        [ 4.628e-01,  4.260e-01,  5.991e-01,  7.021e-01,  6.504e-01,  6.596e-01,  7.444e-01,  7.544e-01],
        [ 1.983e+00,  1.029e+00,  2.395e-01,  1.665e-01,  9.846e-02,  4.305e-02,  2.648e-02,  5.290e-02],
        [ 1.251e+00,  8.997e-01,  7.668e-01,  6.726e-01,  6.332e-01,  5.948e-01,  5.886e-01,  5.709e-01],
        [ 2.210e+00,  1.905e+00,  1.904e+00,  1.911e+00,  1.661e+00,  1.625e+00,  1.475e+00,  1.598e+00],
        [ 7.856e-01,  1.136e+00,  1.363e+00,  1.358e+00,  1.376e+00,  1.395e+00,  1.407e+00,  1.439e+00],
        [ 1.285e+00,  8.107e-01,  3.248e-01,  2.479e-01,  1.171e-01,  8.631e-02,  8.219e-02,  1.073e-01],
        [ 1.201e+00,  1.019e+00,  9.681e-01,  1.113e+00,  1.191e+00,  1.173e+00,  1.198e+00,  1.156e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.084e+00,  7.080e-01,  5.402e-01,  5.643e-01,  5.357e-01,  4.793e-01,  5.146e-01,  5.283e-01],
        [ 6.853e-01,  6.240e-01,  4.137e-01,  5.636e-01,  6.338e-01,  7.513e-01,  7.360e-01,  7.246e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 9.750e-01,  2.884e-01,  1.742e-01,  2.449e-01,  2.697e-01,  2.572e-01,  2.375e-01,  2.114e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.407e-01,  2.780e-01,  4.461e-01,  5.967e-01,  7.209e-01,  8.592e-01,  1.000e+00,  1.070e+00],
        [ 1.209e+03,  1.161e+03,  7.685e+02,  6.926e+02,  7.195e+02,  5.370e+02,  5.860e+02,  5.997e+02],
        [ 1.690e+00,  8.875e-01,  6.984e-01,  6.002e-01,  4.482e-01,  3.745e-01,  3.691e-01,  3.882e-01],
        [ 8.415e-01,  3.901e-01,  2.818e-01,  2.995e-01,  2.749e-01,  2.165e-01,  3.359e-01,  4.234e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 2.585e+00,  2.259e+00,  3.245e+00,  3.752e+00,  2.894e+00,  2.341e+00,  1.967e+00,  1.804e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 2.923e+00,  1.828e+00,  1.863e+00,  1.802e+00,  1.245e+00,  1.095e+00,  1.140e+00,  1.173e+00],
        [ 1.344e+00,  7.683e-01,  5.561e-01,  3.824e-01,  2.602e-01,  1.889e-01,  1.747e-01,  1.679e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.802e+00,  1.237e+00,  5.188e-01,  3.967e-01,  2.258e-01,  1.743e-01,  1.560e-01,  1.847e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 8.462e-01,  3.741e-01,  1.468e-01,  2.314e-01,  1.819e-01,  1.808e-01,  1.849e-01,  1.881e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.391e+00,  1.617e+00,  6.200e-01,  6.437e-01,  5.730e-01,  4.577e-01,  4.490e-01,  4.751e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 2.736e+00,  2.180e+00,  2.001e+00,  1.638e+00,  1.585e+00,  1.555e+00,  1.617e+00,  1.483e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 2.490e+00,  1.746e+00,  1.061e+00,  9.419e-01,  6.755e-01,  6.638e-01,  5.348e-01,  4.737e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 3.672e+00,  2.405e+00,  2.785e+00,  3.013e+00,  2.166e+00,  2.243e+00,  2.256e+00,  2.345e+00]])
}

curved_model_run_4 = {
    'train_acc': 0.8772,
    'validation_acc': 0.8489,
    'no_optimal_stimulus_neurons': np.array([0, 3, 10, 11, 12, 13, 16, 17, 18, 19, 20, 23, 24, 25, 31, 35, 36, 37, 40, 42, 43, 44, 47, 48, 50, 52, 56, 58, 59, 62, 63]),
    'c_len_iou_vs_len_test': np.array([0.9750, 0.3730, 0.8259, 0.8657, 0.8740]),
    'c_len_noise_resp': np.array([
        -1.000e+03,  2.360e+00,  1.451e+00, -1.000e+03,  4.296e-02,
        9.906e-02,  3.886e-01,  1.082e-01,  1.535e+00,  1.950e+00,
        -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03,  1.323e+00,
        2.625e-01, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03,
        -1.000e+03,  3.035e-01,  4.011e-01, -1.000e+03, -1.000e+03,
        -1.000e+03,  5.682e-01,  2.888e+00,  1.403e+00,  7.319e-01,
        5.093e-01, -1.000e+03,  9.793e-01,  3.093e-01,  1.079e+00,
        -1.000e+03, -1.000e+03, -1.000e+03,  7.928e-01,  8.184e-01,
        -1.000e+03,  1.231e-01, -1.000e+03, -1.000e+03, -1.000e+03,
        4.268e-01,  4.076e-01, -1.000e+03, -1.000e+03,  3.216e-01,
        -1.000e+03,  1.011e+00, -1.000e+03,  2.971e-01,  9.394e-02,
        1.341e-02, -1.000e+03,  9.771e-01, -1.000e+03, -1.000e+03,
        0.000e+00,  8.429e-01, -1.000e+03, -1.000e+03]),
    'c_len_mean_gains': np.array([
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  1.121e+00,  8.752e-01,  8.733e-01,  8.833e-01],
        [ 1.000e+00,  1.033e+00,  1.342e+00,  1.560e+00,  1.703e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 9.998e-01,  4.665e+01,  9.093e+01,  9.322e+01,  9.365e+01],
        [ 9.999e-01,  1.067e+00,  2.190e+00,  3.058e+00,  2.736e+00],
        [ 1.000e+00,  7.540e+00,  1.166e+01,  1.284e+01,  1.343e+01],
        [ 9.999e-01,  1.667e+01,  3.638e+01,  5.562e+01,  5.515e+01],
        [ 1.000e+00,  1.064e+00,  1.029e+00,  1.144e+00,  1.053e+00],
        [ 1.000e+00,  1.009e+00,  1.303e+00,  1.617e+00,  1.619e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  2.812e+00,  3.716e+00,  3.724e+00,  3.861e+00],
        [ 1.000e+00,  1.352e-01,  1.017e+00,  1.291e+00,  2.593e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  4.895e+00,  1.018e+01,  1.117e+01,  1.193e+01],
        [ 1.000e+00,  2.607e+00,  3.400e+00,  3.645e+00,  3.787e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  2.859e+00,  3.973e+00,  4.400e+00,  4.453e+00],
        [ 1.000e+00,  8.023e-01,  8.478e-01,  8.094e-01,  8.097e-01],
        [ 1.000e+00,  1.990e+00,  2.548e+00,  2.648e+00,  2.692e+00],
        [ 1.000e+00,  8.644e-01,  1.026e+00,  1.164e+00,  1.117e+00],
        [ 1.000e+00,  8.164e-01,  6.226e-01,  5.516e-01,  5.856e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  1.074e+00,  1.360e+00,  1.505e+00,  1.392e+00],
        [ 1.000e+00,  2.537e+00,  4.812e+00,  4.962e+00,  5.146e+00],
        [ 1.000e+00,  1.208e+00,  1.187e+00,  1.176e+00,  1.151e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  1.888e+00,  2.282e+00,  2.590e+00,  2.422e+00],
        [ 1.000e+00,  1.581e+00,  2.822e+00,  3.728e+00,  4.364e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 9.999e-01,  3.205e+00,  1.139e+01,  1.416e+01,  1.429e+01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  3.108e+00,  4.305e+00,  4.805e+00,  4.322e+00],
        [ 1.000e+00,  9.743e-01,  1.263e+00,  1.220e+00,  1.356e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  3.871e+00,  8.703e+00,  9.132e+00,  9.674e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  3.121e+00,  5.136e+00,  6.189e+00,  6.314e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  1.724e+00,  4.882e+00,  5.688e+00,  6.112e+00],
        [ 9.999e-01,  3.859e+00,  7.326e+00,  1.040e+01,  1.254e+01],
        [ 9.993e-01,  1.314e+02,  2.911e+02,  3.330e+02,  3.617e+02],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  1.933e+00,  2.281e+00,  2.559e+00,  2.571e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 0.000e+00,  0.000e+00,  3.214e+03,  1.709e+04,  2.384e+04],
        [ 1.000e+00,  2.857e+00,  5.250e+00,  5.951e+00,  6.148e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03]]),
    'spacing_noise_resp': np.array([
        -1.000e+03,  3.172e+00,  1.250e+00, -1.000e+03,  7.029e-01,  5.042e-01,  1.668e+00,  1.266e+00,  2.374e+00,
        2.371e+00, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03,  2.525e+00,  1.166e+00, -1.000e+03, -1.000e+03,
       -1.000e+03, -1.000e+03, -1.000e+03,  7.738e-01,  1.280e+00, -1.000e+03, -1.000e+03, -1.000e+03,  1.470e+00,
        3.130e+00,  1.480e+00,  7.283e-01,  1.196e+00, -1.000e+03,  1.099e+00,  9.889e-01,  1.533e+00, -1.000e+03,
       -1.000e+03, -1.000e+03,  1.906e+00,  1.764e+00, -1.000e+03,  5.191e-01, -1.000e+03, -1.000e+03, -1.000e+03,
        1.230e+00,  8.688e-01, -1.000e+03, -1.000e+03,  1.396e+00, -1.000e+03,  1.774e+00, -1.000e+03,  1.107e+00,
        3.937e-01,  1.364e-01, -1.000e+03,  1.774e+00, -1.000e+03, -1.000e+03,  0.000e+00,  1.501e+00, -1.000e+03,
       -1.000e+03]),
    'spacing_mean_gains': np.array([
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 6.659e-01,  7.513e-02,  9.095e-02,  1.489e-01,  1.500e-01,  1.998e-01,  2.231e-01,  2.411e-01],
        [ 1.840e+00,  1.275e+00,  7.102e-01,  5.246e-01,  5.158e-01,  4.562e-01,  4.296e-01,  4.016e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 5.737e+00,  5.394e+00,  5.395e+00,  3.602e+00,  3.544e+00,  3.462e+00,  3.379e+00,  3.443e+00],
        [ 4.503e-01,  5.948e-01,  5.518e-01,  6.951e-01,  8.565e-01,  9.552e-01,  1.002e+00,  1.036e+00],
        [ 2.946e+00,  2.682e+00,  2.291e+00,  1.646e+00,  1.307e+00,  1.117e+00,  1.065e+00,  1.069e+00],
        [ 4.369e+00,  4.435e+00,  2.924e+00,  2.694e+00,  2.130e+00,  1.786e+00,  1.687e+00,  1.554e+00],
        [ 7.083e-01,  2.397e-01,  3.438e-01,  5.103e-01,  4.682e-01,  4.302e-01,  3.943e-01,  3.928e-01],
        [ 1.316e+00,  5.788e-01,  5.365e-01,  5.773e-01,  4.253e-01,  2.880e-01,  2.141e-01,  1.912e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 2.012e+00,  1.578e+00,  1.194e+00,  9.824e-01,  7.775e-01,  6.780e-01,  5.789e-01,  5.222e-01],
        [ 3.678e-01,  4.762e-01,  1.856e-01,  5.044e-01,  5.686e-01,  7.103e-01,  6.757e-01,  6.694e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 4.432e+00,  2.980e+00,  1.981e+00,  8.925e-01,  6.977e-01,  5.744e-01,  6.201e-01,  6.028e-01],
        [ 1.221e+00,  7.441e-01,  8.064e-01,  8.102e-01,  9.292e-01,  9.596e-01,  1.023e+00,  1.045e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.680e+00,  1.134e+00,  9.198e-01,  1.028e+00,  8.159e-01,  8.631e-01,  9.275e-01,  9.729e-01],
        [ 7.451e-01,  1.560e-02,  0.000e+00,  0.000e+00,  3.577e-02,  5.138e-02,  4.558e-02,  9.348e-03],
        [ 2.580e+00,  1.755e+00,  1.160e+00,  7.170e-01,  3.107e-01,  1.071e-01,  1.055e-02,  7.957e-04],
        [ 1.164e+00,  9.651e-01,  1.103e+00,  1.383e+00,  1.427e+00,  1.444e+00,  1.410e+00,  1.371e+00],
        [ 2.444e-01,  1.200e-01,  3.889e-01,  5.655e-01,  6.385e-01,  8.015e-01,  8.879e-01,  9.842e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.295e+00,  9.695e-01,  5.210e-01,  5.530e-01,  5.092e-01,  5.067e-01,  4.847e-01,  4.773e-01],
        [ 1.603e+00,  8.458e-01,  2.996e-01,  1.065e+00,  9.808e-01,  1.036e+00,  9.804e-01,  9.537e-01],
        [ 8.323e-01,  7.470e-01,  7.379e-01,  8.376e-01,  8.939e-01,  9.298e-01,  9.585e-01,  9.694e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.165e+00,  9.878e-01,  9.136e-01,  9.338e-01,  9.060e-01,  8.514e-01,  8.980e-01,  9.110e-01],
        [ 1.774e+00,  1.464e+00,  1.108e+00,  5.746e-01,  5.288e-01,  3.414e-01,  2.322e-01,  2.282e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 3.526e+00,  4.890e+00,  3.738e+00,  2.851e+00,  2.948e+00,  2.585e+00,  2.394e+00,  2.329e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.744e+00,  1.739e+00,  1.695e+00,  1.959e+00,  2.067e+00,  1.844e+00,  1.542e+00,  1.433e+00],
        [ 5.989e-01,  4.981e-01,  6.691e-01,  8.452e-01,  9.766e-01,  1.155e+00,  1.180e+00,  1.277e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 2.219e+00,  2.573e+00,  1.713e+00,  1.171e+00,  1.147e+00,  9.448e-01,  8.950e-01,  8.383e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 3.462e+00,  2.561e+00,  1.580e+00,  1.084e+00,  7.924e-01,  7.807e-01,  7.757e-01,  7.639e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.574e+00,  1.010e+00,  8.331e-01,  8.870e-01,  9.212e-01,  9.464e-01,  1.031e+00,  1.100e+00],
        [ 2.434e+00,  6.633e-01,  4.925e-01,  5.630e-01,  1.327e-01,  1.771e-01,  2.285e-01,  4.160e-01],
        [ 3.054e+01,  3.008e+01,  2.658e+01,  1.913e+01,  1.256e+01,  9.171e+00,  8.743e+00,  8.258e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.400e+00,  6.892e-01,  3.453e-01,  3.719e-01,  3.400e-01,  3.344e-01,  2.967e-01,  2.549e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.138e+04,  3.427e+03,  3.792e+04,  8.720e+04,  6.864e+04,  7.300e+04,  5.045e+04,  4.007e+04],
        [ 3.408e+00,  2.508e+00,  1.598e+00,  1.133e+00,  7.560e-01,  7.391e-01,  7.814e-01,  8.137e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03]])
}

curved_model_run_5 = {
    'train_acc': 0.8710,
    'validation_acc': 0.8432,
    'no_optimal_stimulus_neurons': np.array([0, 3, 4, 10, 11, 13, 16, 17, 19, 30, 31, 32, 33, 35, 36, 37, 42, 43, 45, 48, 49, 52, 56, 57, 58, 59, 62]),
    'c_len_iou_vs_len_test': np.array([0.9497, 0.2822, 0.6880, 0.7826, 0.8240]),
    'c_len_noise_resp': np.array([
        -1.000e+03,  1.306e+00,  1.222e+00, -1.000e+03, -1.000e+03,
        4.318e-01,  2.751e-02,  1.071e-01,  1.596e+00,  3.613e-01,
       -1.000e+03, -1.000e+03,  3.083e-01, -1.000e+03,  6.265e-01,
        2.446e-01, -1.000e+03, -1.000e+03,  1.174e-01, -1.000e+03,
        2.045e-01,  6.646e-01,  2.378e-01,  4.432e-01,  3.282e+00,
        1.133e+00,  3.068e-01,  1.990e-03,  2.091e-02,  4.228e-01,
       -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03,  1.429e+00,
       -1.000e+03, -1.000e+03, -1.000e+03,  6.976e-01,  1.793e-01,
        2.020e+00,  1.108e+00, -1.000e+03, -1.000e+03,  1.004e+00,
       -1.000e+03,  9.425e-01,  3.573e-02, -1.000e+03, -1.000e+03,
        1.926e-01,  2.594e-02, -1.000e+03,  4.936e-01,  1.296e+00,
        2.483e-01, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03,
        3.256e-01,  6.585e-01, -1.000e+03,  0.000e+00]),
    'c_len_mean_gains': np.array([
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  1.859e+00,  1.809e+00,  1.799e+00,  1.830e+00],
        [ 1.000e+00,  8.417e-01,  1.123e+00,  1.133e+00,  1.050e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  2.272e+00,  2.922e+00,  3.017e+00,  3.118e+00],
        [ 9.996e-01,  2.630e+01,  5.359e+01,  6.850e+01,  6.329e+01],
        [ 9.999e-01,  8.488e+00,  8.846e+00,  1.048e+01,  1.005e+01],
        [ 1.000e+00,  1.475e+00,  1.815e+00,  2.047e+00,  2.086e+00],
        [ 1.000e+00,  1.635e+00,  2.112e+00,  2.150e+00,  1.906e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  4.014e+00,  4.272e+00,  4.387e+00,  4.388e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  4.178e+00,  6.036e+00,  6.290e+00,  6.623e+00],
        [ 1.000e+00,  3.128e+00,  6.628e+00,  7.318e+00,  7.422e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 9.999e-01,  1.033e+01,  1.813e+01,  2.526e+01,  2.304e+01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  3.043e+00,  5.383e+00,  4.970e+00,  5.425e+00],
        [ 1.000e+00,  2.208e+00,  3.096e+00,  4.205e+00,  4.167e+00],
        [ 1.000e+00,  6.351e+00,  7.746e+00,  7.969e+00,  7.866e+00],
        [ 1.000e+00,  2.656e-02,  6.100e-01,  1.804e+00,  3.399e+00],
        [ 1.000e+00,  9.610e-01,  1.117e+00,  1.155e+00,  1.202e+00],
        [ 1.000e+00,  1.565e+00,  2.319e+00,  2.463e+00,  2.505e+00],
        [ 1.000e+00,  1.053e+00,  1.819e+00,  3.649e+00,  3.344e+00],
        [ 9.950e-01,  0.000e+00,  0.000e+00,  0.000e+00,  0.000e+00],
        [ 9.995e-01,  4.711e+01,  6.969e+01,  5.801e+01,  7.952e+01],
        [ 1.000e+00,  1.282e+00,  2.770e+00,  3.009e+00,  3.266e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  9.695e-01,  1.426e+00,  1.700e+00,  1.736e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  1.962e+00,  2.421e+00,  2.816e+00,  2.934e+00],
        [ 9.999e-01,  3.809e+00,  4.151e+00,  5.881e+00,  5.503e+00],
        [ 1.000e+00,  9.592e-01,  1.198e+00,  1.182e+00,  1.146e+00],
        [ 1.000e+00,  1.949e+00,  2.503e+00,  2.493e+00,  2.573e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  4.098e-01,  4.970e-01,  5.100e-01,  4.451e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  8.151e-01,  1.274e+00,  1.391e+00,  1.498e+00],
        [ 9.997e-01,  1.767e+00,  5.669e+00,  1.065e+01,  9.864e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 9.999e-01,  2.027e+00,  3.633e+00,  4.807e+00,  4.612e+00],
        [ 9.996e-01,  5.252e+00,  3.482e+01,  5.914e+01,  4.907e+01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  6.727e-01,  1.083e+00,  1.604e+00,  1.533e+00],
        [ 1.000e+00,  7.485e-01,  9.526e-01,  1.076e+00,  1.064e+00],
        [ 1.000e+00,  7.619e+00,  1.094e+01,  1.204e+01,  1.057e+01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.000e+00,  1.770e+00,  3.369e+00,  4.711e+00,  4.528e+00],
        [ 1.000e+00,  1.676e+00,  3.204e+00,  3.464e+00,  3.989e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 0.000e+00,  4.579e+04,  1.822e+05,  2.110e+05,  2.289e+05]]),
    'spacing_noise_resp': np.array([
        -1.000e+03,  2.423e+00,  1.223e+00, -1.000e+03, -1.000e+03,  7.133e-01,  3.617e-01,  1.009e+00,  2.299e+00,
        7.283e-01, -1.000e+03, -1.000e+03,  1.334e+00, -1.000e+03,  1.671e+00,  1.166e+00, -1.000e+03, -1.000e+03,
        6.699e-01, -1.000e+03,  6.601e-01,  1.999e+00,  1.603e+00,  1.006e-01,  3.146e+00,  1.435e+00,  1.329e+00,
        0.000e+00,  7.062e-02,  2.400e-01, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03,  1.580e+00, -1.000e+03,
       -1.000e+03, -1.000e+03,  1.882e+00,  3.397e-01,  1.823e+00,  2.657e+00, -1.000e+03, -1.000e+03,  6.914e-01,
       -1.000e+03,  1.363e+00,  3.573e-02, -1.000e+03, -1.000e+03,  8.548e-01,  2.186e-01, -1.000e+03,  7.228e-01,
        2.199e+00,  1.612e+00, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03,  7.529e-01,  1.529e+00, -1.000e+03,
        0.000e+00]),
    'spacing_mean_gains': np.array([
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 9.618e-01,  7.349e-01,  6.170e-01,  5.865e-01,  5.773e-01,  5.954e-01,  6.065e-01,  6.129e-01],
        [ 1.132e+00,  4.536e-01,  2.182e-01,  3.746e-01,  3.680e-01,  3.803e-01,  3.748e-01,  3.571e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.810e+00,  1.578e+00,  1.186e+00,  1.149e+00,  1.109e+00,  1.032e+00,  1.019e+00,  1.017e+00],
        [ 4.406e+00,  5.177e+00,  5.044e+00,  3.548e+00,  3.365e+00,  3.618e+00,  4.018e+00,  4.418e+00],
        [ 1.079e+00,  9.536e-01,  1.096e+00,  1.537e+00,  1.690e+00,  1.811e+00,  1.858e+00,  1.882e+00],
        [ 1.404e+00,  3.015e-01,  9.945e-02,  5.628e-02,  1.101e-01,  1.001e-01,  1.160e-01,  9.601e-02],
        [ 1.161e+00,  1.024e+00,  4.055e-01,  2.544e-01,  1.932e-01,  1.166e-01,  1.402e-01,  1.738e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 9.889e-01,  1.043e+00,  1.028e+00,  1.026e+00,  9.891e-01,  9.733e-01,  9.971e-01,  1.028e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 2.556e+00,  1.757e+00,  1.295e+00,  1.089e+00,  8.582e-01,  8.620e-01,  8.357e-01,  8.036e-01],
        [ 1.234e+00,  1.670e+00,  1.167e+00,  7.912e-01,  8.195e-01,  8.835e-01,  9.005e-01,  9.223e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 4.336e+00,  2.394e+00,  1.816e+00,  1.648e+00,  1.600e+00,  1.561e+00,  1.743e+00,  1.808e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.727e+00,  6.416e-01,  2.105e-01,  4.673e-01,  7.334e-01,  9.229e-01,  1.059e+00,  1.098e+00],
        [ 1.414e+00,  1.013e+00,  6.973e-01,  7.224e-01,  8.089e-01,  8.135e-01,  8.107e-01,  8.228e-01],
        [ 1.113e+00,  9.426e-01,  7.389e-01,  7.824e-01,  8.001e-01,  8.279e-01,  8.719e-01,  9.053e-01],
        [ 7.514e+00,  1.846e+00,  1.741e+00,  6.948e-01,  6.540e-01,  5.068e-01,  9.347e-01,  1.130e+00],
        [ 1.279e+00,  3.772e-01,  9.101e-02,  9.076e-02,  6.914e-02,  2.330e-02,  2.850e-02,  3.004e-02],
        [ 1.901e+00,  8.439e-01,  6.562e-01,  1.401e-01,  2.385e-03,  4.908e-04,  0.000e+00,  0.000e+00],
        [ 5.319e-01,  4.550e-01,  3.970e-01,  8.255e-01,  1.040e+00,  1.248e+00,  1.281e+00,  1.322e+00],
        [ 0.000e+00,  0.000e+00,  0.000e+00,  7.588e+01,  3.996e+04,  1.104e+05,  1.294e+05,  1.335e+05],
        [ 2.156e+01,  1.782e+01,  1.081e+01,  2.228e+00,  2.359e+00,  7.041e-01,  4.890e-01,  4.453e-01],
        [ 4.921e+00,  4.026e+00,  2.293e+00,  2.969e+00,  2.425e+00,  2.958e+00,  3.243e+00,  3.031e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.453e+00,  5.584e-01,  5.042e-02,  2.457e-01,  2.528e-01,  3.552e-01,  3.402e-01,  3.776e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.099e+00,  7.659e-01,  7.016e-01,  7.500e-01,  7.228e-01,  7.855e-01,  8.179e-01,  8.986e-01],
        [ 3.149e+00,  1.961e+00,  2.135e+00,  1.197e+00,  1.735e+00,  1.831e+00,  2.360e+00,  2.363e+00],
        [ 1.343e+00,  6.386e-01,  2.210e-01,  3.175e-01,  1.829e-01,  1.402e-01,  1.453e-01,  1.215e-01],
        [ 1.068e+00,  1.181e+00,  9.612e-01,  9.140e-01,  9.497e-01,  9.550e-01,  1.024e+00,  1.073e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 7.059e-01,  2.449e-01,  4.756e-01,  4.961e-01,  5.090e-01,  6.212e-01,  6.800e-01,  8.048e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.058e+00,  1.371e-01,  6.181e-03,  1.348e-02,  5.189e-02,  1.495e-01,  2.318e-01,  3.262e-01],
        [ 7.345e+00,  8.772e+00,  1.895e+01,  1.683e+01,  1.961e+01,  2.181e+01,  2.829e+01,  2.977e+01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 9.648e-01,  4.888e-01,  2.837e-01,  5.445e-01,  6.298e-01,  8.987e-01,  9.946e-01,  9.955e-01],
        [ 6.403e+00,  5.006e+00,  7.752e+00,  7.861e+00,  7.581e+00,  6.757e+00,  6.693e+00,  6.846e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 1.054e+00,  1.219e+00,  1.482e-01,  4.608e-02,  1.085e-01,  8.871e-02,  8.382e-02,  1.979e-01],
        [ 6.516e-01,  2.099e-01,  2.558e-01,  3.013e-01,  3.432e-01,  3.775e-01,  3.723e-01,  3.761e-01],
        [ 1.745e+00,  1.399e+00,  1.136e+00,  1.121e+00,  1.147e+00,  1.098e+00,  1.113e+00,  1.117e+00],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 2.084e+00,  3.286e-01,  3.357e-01,  6.682e-01,  9.441e-01,  9.899e-01,  1.053e+00,  1.095e+00],
        [ 1.458e+00,  8.788e-01,  5.089e-01,  5.024e-01,  6.136e-01,  7.243e-01,  7.368e-01,  7.619e-01],
        [-1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03, -1.000e+03],
        [ 2.163e+05,  2.341e+05,  1.884e+05,  1.336e+05,  9.073e+04,  1.042e+05,  1.042e+05,  1.089e+05]])
}


# End of Results ==================================================================================
def get_filtered_idx_arr(noise_resp_arr, noise_th):
    """
    Return index of all entries above or equal to noise threshold
    :param noise_resp_arr:
    :param noise_th:
    :return:
    """

    idx_arr = [idx for idx, value in enumerate(noise_resp_arr) if value >= noise_th]

    return idx_arr


def get_filtered_idx_arr_max_gain(gains_arr, max_gain=20.0):
    """
    Get all gain results that are less than 20 and also all unresponsive
    neurons (have all zero gains)

    :param
    :return:
    """
    idx_arr = []

    for idx, gains in enumerate(gains_arr):
        if np.all(gains <= max_gain) and not np.all(gains == 0) and not np.any(gains == INVALID_RESULTS):
            idx_arr.append(idx)
            # print(idx, gains)

    return idx_arr


def get_filtered_responses(results_dict, noise_th):
    """
    Return Filtered out clen and spacing entries
    :param results_dict:
    :param noise_th:
    :return:
    """
    # valid_c_len_idxs = get_filtered_idx_arr(results_dict['c_len_noise_resp'], noise_th)
    # valid_space_idxs = get_filtered_idx_arr(results_dict['spacing_noise_resp'], noise_th)

    valid_c_len_idxs = get_filtered_idx_arr_max_gain(results_dict['c_len_mean_gains'])
    valid_space_idxs = get_filtered_idx_arr_max_gain(results_dict['spacing_mean_gains'])

    f_c_len_mean_gains = results_dict['c_len_mean_gains'][valid_c_len_idxs, ]
    f_spacing_mean_gains = results_dict['spacing_mean_gains'][valid_space_idxs, ]

    return f_c_len_mean_gains, f_spacing_mean_gains


def get_all_filtered_results(result_dict_list, noise_th):
    """
    Return a list of all c_len and spacing results with a noise response above
    the noise threshold
    """
    combined_c_len_results = []
    combined_space_results = []

    for idx, result in enumerate(result_dict_list):
        c_len_result, spacing_result = get_filtered_responses(result, noise_th)
        combined_c_len_results.extend(c_len_result)
        combined_space_results.extend(spacing_result)

    combined_c_len_results = np.array(combined_c_len_results)
    combined_space_results = np.array(combined_space_results)

    return combined_c_len_results, combined_space_results


def get_all_cont_int_layer_output_results(results_dict_list):
    """
    return an array of gain vs len and gain vs spacing results of all individual runs in a single array.

    :param results_dict_list:
    :return:
    """

    combined_c_len_results = []
    combined_space_results = []

    for idx, result in enumerate(results_dict_list):
        noise_resp_c_len = result['c_len_noise_resp']
        c_len_gains = result['c_len_mean_gains']

        c_len_outs = c_len_gains * noise_resp_c_len[:, np.newaxis]
        combined_c_len_results.extend(c_len_outs)

        noise_resp_space = result['spacing_noise_resp']
        space_gains = result['spacing_mean_gains']

        space_outs = space_gains * noise_resp_space[:, np.newaxis]
        combined_space_results.extend(space_outs)

    combined_c_len_results = np.array(combined_c_len_results)
    combined_space_results = np.array(combined_space_results)

    # Zero all INVALID Entries
    combined_c_len_results[combined_c_len_results >= (INVALID_RESULTS * INVALID_RESULTS)] = 0
    combined_space_results[combined_space_results >= (INVALID_RESULTS * INVALID_RESULTS)] = 0

    return combined_c_len_results, combined_space_results


def get_individual_run_population_averages(result_dict_list, noise_th):
    """
    Get Population averages for each RUN Individually
    :param result_dict_list:
    :param noise_th:
    :return:
    """
    p_avg_c_len_means = []
    p_avg_c_len_std = []
    p_avg_c_len_n = []

    p_avg_space_means = []
    p_avg_space_std = []
    p_avg_space_n = []

    for idx, result in enumerate(result_dict_list):
        f_c_len_results, f_spacing_results = get_filtered_responses(result, noise_th)

        c_len_p_mean = np.zeros(result['c_len_mean_gains'].shape[1])
        c_len_p_std = np.zeros(result['c_len_mean_gains'].shape[1])
        c_len_n = len(f_c_len_results)

        if c_len_n > 0:
            c_len_p_mean = np.mean(f_c_len_results, axis=0)
            c_len_p_std = np.std(f_c_len_results, axis=0)

        space_p_mean = np.zeros(result['spacing_mean_gains'].shape[1])
        space_p_std = np.zeros(result['spacing_mean_gains'].shape[1])
        space_n = len(f_spacing_results)

        if space_n > 0:
            space_p_mean = np.mean(f_spacing_results, axis=0)
            space_p_std = np.std(f_spacing_results, axis=0)

        p_avg_c_len_means.append(c_len_p_mean)
        p_avg_c_len_std.append(c_len_p_std)
        p_avg_c_len_n.append(c_len_n)

        p_avg_space_means.append(space_p_mean)
        p_avg_space_std.append(space_p_std)
        p_avg_space_n.append(space_n)

    p_avg_c_len_means = np.array(p_avg_c_len_means)
    p_avg_c_len_std = np.array(p_avg_c_len_std)

    p_avg_space_means = np.array(p_avg_space_means)
    p_avg_space_std = np.array(p_avg_space_std)

    return p_avg_c_len_means, p_avg_c_len_std, p_avg_c_len_n, \
        p_avg_space_means, p_avg_space_std, p_avg_space_n


def get_weighted_average(list_of_p_avg_means, list_of_p_avg_stds, list_of_p_neurons):

    total_n = np.sum(list_of_p_neurons)

    combined_mean = 0
    combined_var = 0

    for idx in range(len(list_of_p_avg_means)):
        combined_mean += list_of_p_neurons[idx] / total_n * list_of_p_avg_means[idx]
        combined_var += list_of_p_neurons[idx] / total_n * list_of_p_avg_stds[idx]**2

    return combined_mean, np.sqrt(combined_var), total_n


def get_overall_population_results(result_dict_list, noise_th, label=None):

    indv_run_p_avg_c_len_means, indv_p_avg_c_len_stds, indv_p_avg_c_len_n, \
        indv_p_avg_space_means, indv_p_avg_space_stds, indv_p_avg_space_n = \
        get_individual_run_population_averages(result_dict_list, noise_th)

    if label is not None:
        print("{} Valid results per run (Noise Th={:0.2f}): c_len {}, spacing {}".format(
            label, noise_th, indv_p_avg_c_len_n, indv_p_avg_space_n))

        starting_n_neurons_c_len = []
        starting_n_neurons_space = []
        for result in result_dict_list:
            starting_n_neurons_c_len.append(64 - len(result['no_optimal_stimulus_neurons']))
            starting_n_neurons_space.append(64 - len(result['no_optimal_stimulus_neurons']))
        print("Starting Number of neurons                   : c_len {}, spacing {}".format(
            starting_n_neurons_c_len, starting_n_neurons_space))

    all_c_len_means, all_c_len_stds, all_c_len_n = \
        get_weighted_average(indv_run_p_avg_c_len_means, indv_p_avg_c_len_stds, indv_p_avg_c_len_n)

    all_space_means, all_space_stds, all_space_n = \
        get_weighted_average(indv_p_avg_space_means, indv_p_avg_space_stds, indv_p_avg_space_n)

    return all_c_len_means, all_c_len_stds, all_c_len_n, all_space_means, all_space_stds, all_space_n


def debug_plot_individual_run_population_averages(result_dict_list, noise_th, label='None'):
    indv_run_p_avg_c_len_means, indv_p_avg_c_len_stds, indv_p_avg_c_len_n, \
        indv_p_avg_space_means, indv_p_avg_space_stds, indv_p_avg_space_n = \
        get_individual_run_population_averages(result_dict_list, noise_th)

    f_c_len, ax_c_len = plt.subplots()
    f_space, ax_space = plt.subplots()

    for idx in np.arange(len(indv_run_p_avg_c_len_means)):
        ax_c_len.plot(
            c_len_arr, indv_run_p_avg_c_len_means[idx, ],
            label='Run{}, N_{}'.format(idx, indv_p_avg_c_len_n[idx]))
        ax_c_len.fill_between(
            c_len_arr,
            indv_run_p_avg_c_len_means[idx, ] - indv_p_avg_c_len_stds[idx, ],
            indv_run_p_avg_c_len_means[idx, ] + indv_p_avg_c_len_stds[idx, ],
            alpha=0.2
        )

        ax_space.plot(
            spacing_arr, indv_p_avg_space_means[idx, ],
            label='Run{}, N_{}'.format(idx, indv_p_avg_space_n[idx]))
        ax_space.fill_between(
            spacing_arr,
            indv_p_avg_space_means[idx, ] - indv_p_avg_space_stds[idx, ],
            indv_p_avg_space_means[idx, ] + indv_p_avg_space_stds[idx, ],
            alpha=0.2
        )

    ax_c_len.plot(monkey_ma['c_len'], neuro_c_len_results, label='Neuro', c='k')
    ax_c_len.legend()
    if label is not None:
        ax_c_len.set_title('{} Noise Threshold={}'.format(label, noise_th))

    ax_space.plot(monkey_ma['rcd'], neuro_space_results, label='Neuro', c='k')
    ax_space.legend()
    if label is not None:
        ax_space.set_title('{} Noise Threshold={}'.format(label, noise_th))


def debug_plot_overall_averages(len_arr, space_arr, m_results, m_th, c_results, c_th):

    m_pop_c_len_means, m_pop_c_len_stds, m_pop_c_len_n, m_pop_space_means, m_pop_space_stds, m_pop_space_n = \
        get_overall_population_results(m_results, m_th, label='Model  ')

    c_pop_c_len_means, c_pop_c_len_stds, c_pop_c_len_n, c_pop_space_means, c_pop_space_stds, c_pop_space_n = \
        get_overall_population_results(c_results, c_th, label='Control')

    # Contour Length
    plt.plot(
        len_arr, m_pop_c_len_means,
        label='Model, N={}'.format(m_pop_c_len_n), c='b')
    plt.fill_between(
        len_arr,
        m_pop_c_len_means - m_pop_c_len_stds,
        m_pop_c_len_means + m_pop_c_len_stds,
        alpha=0.2,
        color='b'
    )

    plt.plot(
        len_arr, c_pop_c_len_means,
        label='Control, N={}'.format(c_pop_c_len_n), c='r')
    plt.fill_between(
        len_arr,
        c_pop_c_len_means - c_pop_c_len_stds,
        c_pop_c_len_means + c_pop_c_len_stds,
        alpha=0.2,
        color='r'
    )

    plt.plot(monkey_ma['c_len'], neuro_c_len_results, label='Neuro', c='k')
    plt.legend()

    # Fragment Spacing
    plt.figure()
    plt.plot(
        space_arr, m_pop_space_means,
        label='Model, N={}'.format(m_pop_space_n), c='b')
    plt.fill_between(
        space_arr,
        m_pop_space_means - m_pop_space_stds,
        m_pop_space_means + m_pop_space_stds,
        alpha=0.2,
        color='b'
    )

    plt.plot(
        space_arr, c_pop_space_means,
        label='Control, N={}'.format(c_pop_space_n), c='r')
    plt.fill_between(
        space_arr,
        c_pop_space_means - c_pop_space_stds,
        c_pop_space_means + c_pop_space_stds,
        alpha=0.2,
        color='r'
    )

    plt.plot(monkey_ma['rcd'], neuro_space_results, label='Neuro', c='k')
    plt.legend()


def get_iou_per_len(result_dict):
    # return result_dict['c_len_iou_vs_len_validation']
    return result_dict['c_len_iou_vs_len_test']


def get_population_avg_iou_results_per_len(result_dict_list):

    combined_iou_results = []

    for idx, result in enumerate(result_dict_list):
        combined_iou_results.append(get_iou_per_len(result))

    combined_iou_results = np.array(combined_iou_results)

    return np.mean(combined_iou_results, axis=0)


def get_model_average_ious(result_dict_list):
    combined_train_iou = []
    combined_val_iou = []
    combined_test_iou = []

    for idx, result in enumerate(result_dict_list):
        combined_train_iou.append(result['train_acc'])
        combined_val_iou.append(result['validation_acc'])
        combined_test_iou.append(get_iou_per_len(result))

    combined_train_iou = np.array(combined_train_iou)
    combined_val_iou = np.array(combined_val_iou)

    combined_test_iou = np.array(combined_test_iou)
    # Avg. across all lengths. Make is similar to Validation.
    combined_test_iou = np.mean(combined_test_iou, axis=1)

    return np.mean(combined_train_iou), np.std(combined_train_iou), \
        np.mean(combined_val_iou), np.std(combined_val_iou), \
        np.mean(combined_test_iou), np.std(combined_test_iou)


def get_gradients_of_linear_fits(x, gain_arr):
    gradients = []

    for ch_idx in range(len(gain_arr)):
        ch_gains = gain_arr[ch_idx, ]
        m_out, b_out = np.polyfit(x, ch_gains, deg=1)

        gradients.append(m_out)

    return np.array(gradients)


# =================================================================================================
if __name__ == "__main__":
    plt.ion()

    c_len_arr = np.array([1, 3, 5, 7, 9])  # Units of contour fragments
    # Units of relative co-linear distance (RCD)
    spacing_arr = np.array([1.00, 1.14, 1.29, 1.43, 1.57, 1.71, 1.86, 2.00])

    control_results = [
        control_run_1,
        control_run_2,
        control_run_3,
        control_run_4,
        control_run_5,
        control_run_6,
        control_run_7,
    ]
    control_noise_th = 0.01

    # control_results = [
    #     curved_model_run_1,
    #     curved_model_run_2,
    #     curved_model_run_3,
    #     curved_model_run_4,
    #     curved_model_run_5,
    # ]
    # control_noise_th = 0.1

    model_results = [
        model_run_1,
        model_run_2,
        model_run_3,
        model_run_4,
        model_run_5,
    ]
    model_noise_th = 0.1

    # ---------------------------------------------------------------------------------------------
    #  Process Results
    # ---------------------------------------------------------------------------------------------
    # model_c_len_results, model_space_results = get_all_filtered_results(model_results, model_noise_th)
    model_c_len_results, model_space_results = get_all_cont_int_layer_output_results(model_results)

    model_pop_c_len_means, model_pop_c_len_stds, model_pop_c_len_n, \
        model_pop_space_means, model_pop_space_stds, model_pop_space_n = \
        get_overall_population_results(model_results, model_noise_th, label='Model  ')

    model_pop_c_len_iou = get_population_avg_iou_results_per_len(model_results)
    model_iou_arr = get_model_average_ious(model_results)
    print("Model IoUs: Train mu={:0.4f}, sigma={:0.4f}, val mu={:0.4f}, sigma={:0.4f}, "
          "test mu={:0.4f},sigma={:0.4f}".format(
            model_iou_arr[0], model_iou_arr[1], model_iou_arr[2],
            model_iou_arr[3], model_iou_arr[4], model_iou_arr[5]))

    # control_c_len_results, control_space_results = get_all_filtered_results(control_results, control_noise_th)
    control_c_len_results, control_space_results = get_all_cont_int_layer_output_results(control_results)

    control_pop_c_len_means, control_pop_c_len_stds, control_pop_c_len_n, \
        control_pop_space_means, control_pop_space_stds, control_pop_space_n = \
        get_overall_population_results(control_results, control_noise_th, label='Control')

    control_pop_c_len_iou = get_population_avg_iou_results_per_len(control_results)
    control_iou_arr = get_model_average_ious(control_results)
    print("Control IoUs: Train mu={:0.4f}, sigma={:0.4f}, val mu={:0.4f}, sigma={:0.4f}, "
          "test mu={:0.4f},sigma={:0.4f}".format(
            control_iou_arr[0], control_iou_arr[1], control_iou_arr[2],
            control_iou_arr[3], control_iou_arr[4], control_iou_arr[5]))

    # # ---------------------------------------------------------------------------------------------
    # # Debug Plots
    # # ---------------------------------------------------------------------------------------------
    # debug_plot_individual_run_population_averages(control_results, control_noise_th, label='Control')
    # debug_plot_individual_run_population_averages(model_results, model_noise_th, label='Model')
    # debug_plot_overall_averages(
    #     c_len_arr, spacing_arr, model_results, model_noise_th, control_results, control_noise_th)

    # -----------------------------------------------------------------------------------
    # Figure
    # -----------------------------------------------------------------------------------
    f = plt.figure(constrained_layout=True, figsize=(13, 5))
    gs = f.add_gridspec(2, 12)

    # Behavioral IoU vs contour length
    # --------------------------------
    ax1 = f.add_subplot(gs[0, 0:4])
    ax1.plot(c_len_arr, model_pop_c_len_iou, label='model', color='b', marker='x')
    ax1.plot(c_len_arr, control_pop_c_len_iou, label='control', color='r', marker='o')
    ax1.text(1, 0.1, 'A', fontsize=30)
    ax1.set_yticks([0, 0.5, 1])
    ax1.set_ylabel('IoU')
    ax1.set_xticks(c_len_arr)
    ax1.set_xlabel("Length (fragments)")
    ax1.legend(loc='lower right')

    # Gain vs contour length
    # ----------------------
    ax2 = f.add_subplot(gs[0, 4:8])

    ax2.plot(
        c_len_arr, model_pop_c_len_means,
        # label='Model (N={})'.format(model_pop_c_len_n),
        color='b', marker='x'
    )
    ax2.fill_between(
        c_len_arr,
        model_pop_c_len_means - model_pop_c_len_stds,
        model_pop_c_len_means + model_pop_c_len_stds,
        alpha=0.2, color='b')

    if model_pop_c_len_n > 0:
        ax2.plot(
            c_len_arr, control_pop_c_len_means,
            # label='Control (N={})'.format(control_pop_c_len_n),
            color='r', marker='o'
        )
        ax2.fill_between(
            c_len_arr,
            control_pop_c_len_means - control_pop_c_len_stds,
            control_pop_c_len_means + control_pop_c_len_stds,
            alpha=0.2, color='r')

    ax2.plot(monkey_ma['c_len'], neuro_c_len_results, color='black', marker='s', markersize=5, label='Measured')

    ax2.text(1, 4, 'B', fontsize=30)
    ax2.set_xticks(c_len_arr)
    ax2.set_xlabel("Length (fragments)")
    ax2.set_ylabel("Gain")
    ax2.set_ylim(bottom=-0.2)
    ax2.legend()

    # Gain Vs Fragment Spacing
    # ------------------------
    ax3 = f.add_subplot(gs[0, 8:12], sharey=ax2)

    ax3.plot(
        spacing_arr, model_pop_space_means,
        label='Model (N={})'.format(model_pop_space_n),
        color='b', marker='x'
    )
    ax3.fill_between(
        spacing_arr,
        model_pop_space_means - model_pop_space_stds,
        model_pop_space_means + model_pop_space_stds,
        alpha=0.2, color='b')

    if control_pop_space_n > 0:
        ax3.plot(
            spacing_arr,
            control_pop_space_means,
            label='Control (N={})'.format(control_pop_space_n),
            color='r', marker='o'
        )
        ax3.fill_between(
            spacing_arr,
            control_pop_space_means - control_pop_space_stds,
            control_pop_space_means + control_pop_space_stds,
            alpha=0.2, color='r')

    ax3.plot(monkey_ma['rcd'], neuro_space_results, color='black', marker='s', markersize=5)

    ax3.text(1, 4, 'C', fontsize=30)
    ax3.set_xlabel("Spacing (RCD)")
    # ax3.set_ylabel("Gain")
    # ax3.set_xlim([0.99, 2.01])
    # ax3.legend()

    # histogram Gain vs Length - Model
    # --------------------------------
    c_len_bin_max = 1.5
    c_len_bin_min = -0.2
    c_len_bins = np.arange(c_len_bin_min, c_len_bin_max + 0.1, 0.1)
    model_c_len_grads = get_gradients_of_linear_fits(c_len_arr, model_c_len_results)

    ax4 = f.add_subplot(gs[1, 0:3])

    ax4.hist(
        model_c_len_grads.clip(min=c_len_bin_min, max=c_len_bin_max),  # Include all data points
        label="Model", color='blue', bins=c_len_bins, edgecolor='black', linewidth=1.2)

    ax4.text(c_len_bin_min - 0.2, 60, 'D', fontsize=30)
    ax4.set_ylabel("Freq")
    ax4.set_xlabel("gradients - length")
    ax4.legend()
    ax4.set_xlim([c_len_bin_min-0.2, c_len_bin_max+0.3])

    # histogram Gain vs Spacing - Model
    # --------------------------------
    spacing_bin_max = 5
    spacing_bin_min = -10
    spacing_bins = np.arange(spacing_bin_min, spacing_bin_max + 1, 1)
    model_spacing_grads = get_gradients_of_linear_fits(spacing_arr, model_space_results)

    ax6 = f.add_subplot(gs[1, 3:6])

    ax6.hist(
        model_spacing_grads.clip(min=spacing_bin_min, max=spacing_bin_max),  # Include all data points
        label="Contour Int. (N={})".format(model_pop_space_n), color='blue', bins=spacing_bins,
        edgecolor='black', linewidth=1.2)

    ax6.text(spacing_bin_min, 85, 'E', fontsize=30)
    # ax6.set_ylabel("Freq")
    ax6.set_xlabel("gradients - spacing")
    # ax6.legend()

    # histogram Gain vs Length - Control
    # --------------------------------
    ax5 = f.add_subplot(gs[1, 6:9], sharex=ax4)
    if len(control_c_len_results) > 0:
        control_c_len_grads = get_gradients_of_linear_fits(c_len_arr, control_c_len_results)

        ax5.hist(
            control_c_len_grads.clip(min=c_len_bin_min, max=c_len_bin_max),  # Include all data points
            label="Control", color='red', bins=c_len_bins, edgecolor='black', linewidth=1.2)

    ax5.text(c_len_bin_min - 0.1, 32, 'F', fontsize=30)
    # ax5.set_ylabel("Freq")
    ax5.legend()
    ax5.set_xlabel("gradients - length")

    # histogram Gain vs Spacing - Control
    # --------------------------------
    # ax7 = f.add_subplot(gs[1, 9:12], sharex=ax6)
    ax7 = f.add_subplot(gs[1, 9:12])
    if control_pop_space_n > 0:
        control_spacing_grads = get_gradients_of_linear_fits(spacing_arr, control_space_results)

        z = ax7.hist(
            control_spacing_grads.clip(min=spacing_bin_min, max=spacing_bin_max),  # Include all data points
            label="Control (N={})".format(control_pop_space_n), color='red',
            bins=spacing_bins, edgecolor='black', linewidth=1.2)

    ax7.text(spacing_bin_min, 34, 'G', fontsize=30)
    # ax7.set_ylabel("Freq")
    # ax7.legend()
    ax7.set_xlabel("gradients - spacing")

    # ---------------------------------------------------------------------------------------------
    # End
    # ---------------------------------------------------------------------------------------------
    import pdb
    pdb.set_trace()
