# ---------------------------------------------------------------------------------------
# Plot results for the puncture bubbles experiment - explore num bubbles
# ---------------------------------------------------------------------------------------
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

import plot_puncture_bubble_size_results as plotting_fcns

mpl.rcParams.update({
    'font.size': 18,
    'lines.linewidth': 3}
)

results_n_bubbles_0 = {
    'iou_vs_epoch': np.array([
        [0, 0.2261, 0.2600, 0.0924, 0.6123, 0.001],
        [1, 0.0692, 0.6550, 0.0594, 0.6883, 0.001],
        [2, 0.0549, 0.7069, 0.0518, 0.7279, 0.001],
        [3, 0.0526, 0.7216, 0.0669, 0.7007, 0.001],
        [4, 0.0500, 0.7327, 0.0489, 0.7459, 0.001],
        [5, 0.0456, 0.7471, 0.0463, 0.7539, 0.001],
        [6, 0.0449, 0.7527, 0.0976, 0.6046, 0.001],
        [7, 0.0501, 0.7523, 0.0465, 0.7556, 0.001],
        [8, 0.0431, 0.7626, 0.0454, 0.7602, 0.001],
        [9, 0.0422, 0.7663, 0.0468, 0.7614, 0.001],
        [10, 0.0416, 0.7697, 0.0451, 0.7636, 0.001],
        [11, 0.0410, 0.7725, 0.0452, 0.7619, 0.001],
        [12, 0.0409, 0.7746, 0.0450, 0.7636, 0.001],
        [13, 0.0409, 0.7765, 0.0458, 0.7626, 0.001],
        [14, 0.0399, 0.7790, 0.0440, 0.7685, 0.001],
        [15, 0.0395, 0.7806, 0.0454, 0.7649, 0.001],
        [16, 0.0393, 0.7819, 0.0441, 0.7691, 0.001],
        [17, 0.0390, 0.7834, 0.0444, 0.7678, 0.001],
        [18, 0.0389, 0.7845, 0.0433, 0.7722, 0.001],
        [19, 0.0388, 0.7855, 0.0449, 0.7699, 0.001],
        [20, 0.0386, 0.7863, 0.0453, 0.7700, 0.001],
        [21, 0.0384, 0.7874, 0.0427, 0.7757, 0.001],
        [22, 0.0382, 0.7882, 0.0424, 0.7767, 0.001],
        [23, 0.0390, 0.7884, 0.0421, 0.7808, 0.001],
        [24, 0.0381, 0.7898, 0.0419, 0.7826, 0.001],
        [25, 0.0379, 0.7902, 0.0411, 0.7837, 0.001],
        [26, 0.0377, 0.7911, 0.0410, 0.7851, 0.001],
        [27, 0.0375, 0.7919, 0.0412, 0.7879, 0.001],
        [28, 0.0376, 0.7925, 0.0406, 0.7881, 0.001],
        [29, 0.0374, 0.7927, 0.0402, 0.7898, 0.001],
        [30, 0.0373, 0.7935, 0.0401, 0.7883, 0.001],
        [31, 0.0301, 0.8105, 0.0293, 0.8147, 0.0001],
        [32, 0.0299, 0.8112, 0.0293, 0.8143, 0.0001],
        [33, 0.0298, 0.8115, 0.0293, 0.8139, 0.0001],
        [34, 0.0297, 0.8119, 0.0293, 0.8138, 0.0001],
        [35, 0.0297, 0.8123, 0.0292, 0.8137, 0.0001],
        [36, 0.0296, 0.8126, 0.0291, 0.8140, 0.0001],
        [37, 0.0295, 0.8129, 0.0291, 0.8143, 0.0001],
        [38, 0.0295, 0.8133, 0.0290, 0.8146, 0.0001],
        [39, 0.0294, 0.8136, 0.0289, 0.8149, 0.0001],
        [40, 0.0293, 0.8139, 0.0289, 0.8152, 0.0001],
        [41, 0.0293, 0.8142, 0.0288, 0.8154, 0.0001],
        [42, 0.0292, 0.8144, 0.0287, 0.8158, 0.0001],
        [43, 0.0292, 0.8147, 0.0287, 0.8161, 0.0001],
        [44, 0.0291, 0.8149, 0.0286, 0.8164, 0.0001],
        [45, 0.0291, 0.8151, 0.0286, 0.8167, 0.0001],
        [46, 0.0290, 0.8154, 0.0285, 0.8171, 0.0001],
        [47, 0.0290, 0.8156, 0.0285, 0.8173, 0.0001],
        [48, 0.0289, 0.8158, 0.0284, 0.8175, 0.0001],
        [49, 0.0289, 0.8159, 0.0284, 0.8179, 0.0001],
    ]),
    'gain_vs_c_len': {
        'c_len': np.array([1, 3, 5, 7, 9]),
        'mean_gain': np.array([1.0000, 0.9854, 0.9913, 0.9908, 0.9878]),
        'std_gain': np.array([0.0874, 0.0825, 0.0803, 0.0819, 0.0706])
    },
    'gain_vs_spacing': {
        'spacing': np.array([1.00, 1.14, 1.29, 1.43, 1.57, 1.71, 1.86, 2.00]),
        'mean_gain': np.array([0.9882, 0.9910, 0.9912, 0.9909, 0.9912, 0.9918, 0.9905, 0.9915]),
        'std_gain': np.array([0.0648, 0.0393, 0.0355, 0.0262, 0.0257, 0.0124, 0.0127, 0.0066])
    }
}

results_n_bubbles_50 = {
    'iou_vs_epoch': np.array([
        [1, 0.2331, 0.2167, 0.1146, 0.4356, 0.001],
        [2, 0.1012, 0.4960, 0.0884, 0.5427, 0.001],
        [3, 0.0857, 0.5519, 0.0822, 0.5729, 0.001],
        [4, 0.0820, 0.5713, 0.0782, 0.5880, 0.001],
        [5, 0.0798, 0.5832, 0.0766, 0.5947, 0.001],
        [6, 0.0783, 0.5913, 0.0779, 0.6030, 0.001],
        [7, 0.0768, 0.5976, 0.0749, 0.6044, 0.001],
        [8, 0.0752, 0.6027, 0.0756, 0.6063, 0.001],
        [9, 0.0748, 0.6070, 0.0747, 0.6141, 0.001],
        [10, 0.0746, 0.6100, 0.0741, 0.6179, 0.001],
        [11, 0.0731, 0.6138, 0.0737, 0.6210, 0.001],
        [12, 0.0728, 0.6162, 0.0737, 0.6221, 0.001],
        [13, 0.0729, 0.6176, 0.0804, 0.6215, 0.001],
        [14, 0.0728, 0.6205, 0.0732, 0.6224, 0.001],
        [15, 0.0719, 0.6229, 0.0728, 0.6239, 0.001],
        [16, 0.0712, 0.6249, 0.0720, 0.6297, 0.001],
        [17, 0.0709, 0.6268, 0.0713, 0.6296, 0.001],
        [18, 0.0708, 0.6283, 0.0711, 0.6298, 0.001],
        [19, 0.0711, 0.6297, 0.0719, 0.6349, 0.001],
        [20, 0.0701, 0.6314, 0.0705, 0.6358, 0.001],
        [21, 0.0699, 0.6326, 0.0699, 0.6350, 0.001],
        [22, 0.0697, 0.6339, 0.0702, 0.6358, 0.001],
        [23, 0.0695, 0.6350, 0.0703, 0.6344, 0.001],
        [24, 0.0694, 0.6360, 0.0698, 0.6379, 0.001],
        [25, 0.0727, 0.6335, 0.0705, 0.6389, 0.001],
        [26, 0.0693, 0.6380, 0.0693, 0.6401, 0.001],
        [27, 0.0688, 0.6390, 0.0701, 0.6361, 0.001],
        [28, 0.0687, 0.6398, 0.0713, 0.6410, 0.001],
        [29, 0.0689, 0.6404, 0.0697, 0.6374, 0.001],
        [30, 0.0685, 0.6412, 0.0696, 0.6383, 0.001],
        [31, 0.0684, 0.6419, 0.0696, 0.6378, 0.001],
        [32, 0.0595, 0.6590, 0.0585, 0.6639, 0.0001],
        [33, 0.0592, 0.6600, 0.0584, 0.6646, 0.0001],
        [34, 0.0591, 0.6605, 0.0583, 0.6654, 0.0001],
        [35, 0.0590, 0.6609, 0.0581, 0.6661, 0.0001],
        [36, 0.0589, 0.6614, 0.0580, 0.6666, 0.0001],
        [37, 0.0588, 0.6619, 0.0579, 0.6669, 0.0001],
        [38, 0.0587, 0.6623, 0.0578, 0.6674, 0.0001],
        [39, 0.0586, 0.6627, 0.0577, 0.6678, 0.0001],
        [40, 0.0585, 0.6630, 0.0577, 0.6683, 0.0001],
        [41, 0.0584, 0.6634, 0.0576, 0.6686, 0.0001],
        [42, 0.0584, 0.6637, 0.0575, 0.6689, 0.0001],
        [43, 0.0583, 0.6640, 0.0575, 0.6692, 0.0001],
        [44, 0.0582, 0.6643, 0.0574, 0.6695, 0.0001],
        [45, 0.0582, 0.6646, 0.0574, 0.6698, 0.0001],
        [46, 0.0581, 0.6650, 0.0573, 0.6701, 0.0001],
        [47, 0.0580, 0.6653, 0.0572, 0.6704, 0.0001],
        [48, 0.0580, 0.6656, 0.0572, 0.6707, 0.0001],
        [49, 0.0579, 0.6659, 0.0571, 0.6710, 0.0001],
        [50, 0.0578, 0.6661, 0.0571, 0.6713, 0.0001],
    ]),
    'gain_vs_c_len': {
        'c_len': np.array([1, 3, 5, 7, 9]),
        'mean_gain': np.array([1.0000, 0.9756, 0.9746, 0.9740, 0.9770]),
        'std_gain': np.array([0.2754, 0.0739, 0.0648, 0.0771, 0.0661])
    },
    'gain_vs_spacing': {
        'spacing': np.array([1.00, 1.14, 1.29, 1.43, 1.57, 1.71, 1.86, 2.00]),
        'mean_gain': np.array([1.0086, 1.0249, 1.0819, 1.1345, 1.1607, 1.1962, 1.2616, 1.2827]),
        'std_gain': np.array([0.0826, 0.0541, 0.0518, 0.0367, 0.0324, 0.0255, 0.0224, 0.0225])
    }
}

if __name__ == "__main__":
    plt.ion()

    _, axis = plt.subplots()

    plotting_fcns.plot_iou_results(results_n_bubbles_0, ax=axis, label='0_bubbles', c='b')
    plotting_fcns.plot_iou_results(results_n_bubbles_50, ax=axis, label='50_bubbles', c='r')

    plt.legend()
    plt.title("IoU vs Epoch")
    plt.xlabel("Epoch")
    plt.ylabel("IoU")
    plt.grid()

    # Contour Length
    _, axis = plt.subplots()

    plotting_fcns.plot_gain_vs_contour_len(results_n_bubbles_0, ax=axis, label='0_bubbles', c='b')
    plotting_fcns.plot_gain_vs_contour_len(results_n_bubbles_50, ax=axis, label='50_bubbles', c='r')

    plt.legend()
    plt.title("Contour Gain vs Length")
    plt.xlabel("Contour Length")
    plt.ylabel("Gain")
    plt.grid()
    axis.set_ylim(bottom=0)

    # Fragment Spacing
    _, axis = plt.subplots()

    plotting_fcns.plot_gain_vs_fragment_spacing(
        results_n_bubbles_0, ax=axis, label='0_bubbles', c='b')
    plotting_fcns.plot_gain_vs_fragment_spacing(
        results_n_bubbles_50, ax=axis, label='50_bubbles', c='r')

    plt.legend()
    plt.title("Contour Gain vs Fragment Spacing")
    plt.xlabel("Fragment Spacing (RCD)")
    plt.ylabel("Gain")
    plt.grid()
    axis.set_ylim(bottom=0)

    # -----------------------------------------------------------------------------------
    import pdb

    pdb.set_trace()
