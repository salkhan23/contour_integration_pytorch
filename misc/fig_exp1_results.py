import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

mpl.rcParams.update({
    'font.size': 18, 'lines.linewidth': 3, 'lines.markersize': 10,
})


INVALID_NOISE_RESP = 0.01

# ---------------------------------------------------------------------------------------
# Results
# ---------------------------------------------------------------------------------------
# dir: results/new_model_resnet_based/
# ContourIntegrationCSIResnet50_20200131_194615_gaussian_reg_sigma_10_weight_0.0001
model_removed_neurons = [40]
# Note that Responses of neuron @ 40 not included
model_c_len_iou = np.array([0.9715, 0.5694, 0.8759, 0.9138, 0.9031])
model_c_len_noise_responses = np.array([
    4.0827, 7.0269, 1.1928, 3.0908, 7.7019, 4.7032, 7.4575, 2.3152, 6.4779, 4.5940,
    1.8156, 0.5590, 2.5124, 0.1565, 10.9995, 8.0049, 0.9052, 7.2147, 4.8878, 2.7873,
    2.6851, 2.5521, 8.4060, 0.5939, 5.6614, 1.0043, 5.2537, 6.2039, 3.7571, 0.3144,
    3.8705, 1.5939, 1.8944, 3.4429, 8.3289, 1.3453, 2.6004, 3.2541, 2.1658, 4.9862,
    5.5386, 2.2086, 1.5609, 2.6859, 1.7667, 3.5955, 3.3630, 1.3226, 1.0608, 7.5658,
    5.4038, 0.9130, 3.7392, 4.6580, 4.2481, 0.5930, 1.2272, 1.6073, 0.9376, 5.3390,
    10.7641, 2.8579, 4.0771
])
model_c_len_mean_gains = np.array([
    [1.0000, 1.1685, 1.8896, 2.0146, 2.0756],
    [1.0000, 1.0449, 1.0725, 1.0890, 1.0861],
    [1.0000, 1.7086, 2.5831, 2.6985, 2.8305],
    [1.0000, 0.9810, 0.9769, 0.9764, 0.9775],
    [1.0000, 0.1796, 0.0000, 0.0000, 0.0000],
    [1.0000, 1.2077, 1.3283, 1.3898, 1.4273],
    [1.0000, 1.4411, 1.4255, 1.4068, 1.4054],
    [1.0000, 0.8676, 0.7297, 0.6352, 0.6269],
    [1.0000, 0.9964, 0.9961, 0.9973, 0.9973],
    [1.0000, 1.1929, 1.3248, 1.3231, 1.3339],
    [1.0000, 0.5120, 0.5039, 0.5086, 0.4976],
    [1.0000, 1.0096, 1.0120, 1.0136, 1.0136],
    [1.0000, 0.9954, 1.0478, 1.1702, 1.2229],
    [0.9999, 1.2058, 3.5990, 3.8071, 4.0589],
    [1.0000, 1.0038, 1.0039, 1.0041, 1.0037],
    [1.0000, 1.7859, 2.1906, 2.1916, 2.2024],
    [1.0000, 0.9045, 0.8779, 0.8708, 0.8703],
    [1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
    [1.0000, 0.6432, 0.2760, 0.2350, 0.2146],
    [1.0000, 0.8804, 0.8503, 0.8512, 0.8516],
    [1.0000, 0.8648, 0.8367, 0.8309, 0.8307],
    [1.0000, 2.3860, 4.3658, 4.5894, 4.7563],
    [1.0000, 0.9435, 0.7210, 0.6778, 0.6776],
    [1.0000, 0.8976, 0.8741, 0.8749, 0.8680],
    [1.0000, 1.2608, 1.2612, 1.2381, 1.2410],
    [1.0000, 1.4038, 1.7959, 1.9037, 1.9571],
    [1.0000, 1.4369, 1.7891, 1.8860, 1.9110],
    [1.0000, 1.0304, 1.1037, 1.2271, 1.2776],
    [1.0000, 1.0811, 1.1796, 1.2177, 1.2445],
    [1.0000, 0.9301, 1.2091, 1.0740, 1.2137],
    [1.0000, 1.8490, 2.7165, 3.0230, 3.2330],
    [1.0000, 2.4774, 3.1157, 3.2188, 3.2413],
    [1.0000, 0.9756, 1.0361, 1.0570, 1.0308],
    [1.0000, 0.9222, 0.9057, 0.9023, 0.9031],
    [1.0000, 1.1300, 1.1644, 1.1781, 1.1796],
    [1.0000, 1.0000, 1.0003, 1.0000, 1.0001],
    [1.0000, 1.0527, 1.3328, 1.5454, 1.5894],
    [1.0000, 1.0131, 1.0137, 1.0149, 1.0136],
    [1.0000, 0.9132, 0.8918, 0.8926, 0.8864],
    [1.0000, 2.5836, 3.4747, 3.7065, 3.7033],
    [1.0000, 1.0594, 0.9833, 0.9823, 0.9687],
    [1.0000, 1.1854, 1.1768, 1.2073, 1.2345],
    [1.0000, 2.4193, 4.5639, 5.1463, 5.4131],
    [1.0000, 0.7818, 0.4209, 0.3748, 0.3680],
    [1.0000, 1.7338, 1.6298, 1.6433, 1.7827],
    [1.0000, 0.9858, 0.9812, 0.9808, 0.9824],
    [1.0000, 0.9943, 0.9906, 0.9903, 0.9901],
    [1.0000, 0.9917, 0.9908, 0.9905, 0.9897],
    [1.0000, 3.5673, 5.2523, 5.4983, 5.5069],
    [1.0000, 1.2250, 1.2229, 1.2211, 1.2212],
    [1.0000, 2.6321, 3.6521, 4.0149, 4.1431],
    [1.0000, 1.3755, 1.6661, 1.7319, 1.7623],
    [1.0000, 0.9371, 0.9206, 0.9232, 0.9191],
    [1.0000, 1.1137, 1.1089, 1.0973, 1.0958],
    [1.0000, 1.0042, 1.0037, 1.0032, 1.0029],
    [1.0000, 2.1044, 2.4364, 2.3745, 2.4574],
    [1.0000, 0.9981, 0.9983, 0.9983, 0.9984],
    [1.0000, 2.0616, 3.4203, 4.1387, 4.3220],
    [1.0000, 3.8155, 6.6168, 7.6674, 7.8935],
    [1.0000, 3.2260, 4.7123, 5.0850, 5.1632],
    [1.0000, 0.8815, 0.8617, 0.8601, 0.8579],
    [1.0000, 1.2866, 1.4103, 1.4285, 1.4454],
    [1.0000, 1.0001, 1.0000, 1.0001, 1.0002]
])
model_c_len_std_gains = np.array([
    [0.0086, 0.2938, 0.3370, 0.3638, 0.3510],
    [0.0233, 0.0300, 0.0224, 0.0240, 0.0204],
    [0.1682, 0.2021, 0.1810, 0.1635, 0.2113],
    [0.0064, 0.0040, 0.0111, 0.0155, 0.0230],
    [0.1464, 0.1043, 0.0000, 0.0000, 0.0000],
    [0.0851, 0.0790, 0.0883, 0.0643, 0.0819],
    [0.1301, 0.0766, 0.0749, 0.0658, 0.0625],
    [0.1317, 0.0885, 0.0931, 0.0526, 0.0311],
    [0.0026, 0.0025, 0.0027, 0.0034, 0.0025],
    [0.1241, 0.1456, 0.1059, 0.1530, 0.1401],
    [0.2684, 0.0434, 0.0345, 0.0343, 0.0346],
    [0.0026, 0.0026, 0.0028, 0.0024, 0.0024],
    [0.0023, 0.0071, 0.0970, 0.1796, 0.1929],
    [0.0764, 0.1408, 0.6144, 0.5197, 0.4920],
    [0.0007, 0.0017, 0.0012, 0.0015, 0.0013],
    [0.0119, 0.0872, 0.0984, 0.1174, 0.0816],
    [0.0466, 0.0318, 0.0388, 0.0362, 0.0440],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0756, 0.0681, 0.0678, 0.0309, 0.0249],
    [0.1002, 0.0640, 0.0218, 0.0263, 0.0261],
    [0.0986, 0.0165, 0.0185, 0.0194, 0.0164],
    [0.0159, 0.4981, 0.5069, 0.5006, 0.4568],
    [0.0599, 0.0563, 0.0544, 0.0004, 0.0002],
    [0.0318, 0.0168, 0.0164, 0.0146, 0.0141],
    [0.0631, 0.0664, 0.0601, 0.0587, 0.0548],
    [0.4566, 0.5272, 0.4950, 0.6061, 0.6338],
    [0.0684, 0.1051, 0.0912, 0.0726, 0.0673],
    [0.0424, 0.0600, 0.0448, 0.0423, 0.0540],
    [0.0566, 0.0873, 0.0858, 0.0943, 0.0733],
    [0.3562, 0.3656, 0.3933, 0.3384, 0.3273],
    [0.0919, 0.2410, 0.1442, 0.1532, 0.1310],
    [0.2304, 0.2160, 0.2078, 0.2329, 0.2257],
    [0.1137, 0.1056, 0.1058, 0.1122, 0.0993],
    [0.0484, 0.0160, 0.0133, 0.0180, 0.0099],
    [0.0609, 0.0562, 0.0677, 0.0592, 0.0579],
    [0.0002, 0.0002, 0.0014, 0.0002, 0.0007],
    [0.0200, 0.0764, 0.2341, 0.3186, 0.3035],
    [0.0086, 0.0072, 0.0067, 0.0075, 0.0067],
    [0.0346, 0.0288, 0.0271, 0.0226, 0.0258],
    [0.0806, 0.2404, 0.2634, 0.2237, 0.2590],
    [0.0694, 0.0849, 0.0673, 0.0569, 0.0462],
    [0.1084, 0.0826, 0.0924, 0.0931, 0.0904],
    [0.3003, 0.5942, 0.5264, 0.4060, 0.4479],
    [0.1091, 0.1481, 0.0472, 0.0261, 0.0258],
    [0.3174, 0.3525, 0.4683, 0.3294, 0.4320],
    [0.0097, 0.0133, 0.0080, 0.0074, 0.0056],
    [0.0038, 0.0030, 0.0032, 0.0039, 0.0028],
    [0.0034, 0.0025, 0.0022, 0.0022, 0.0015],
    [0.1192, 0.7513, 0.7410, 0.6946, 0.5465],
    [0.0930, 0.0824, 0.0867, 0.0812, 0.1004],
    [0.1074, 0.3091, 0.2299, 0.1965, 0.2219],
    [0.2662, 0.2854, 0.3090, 0.3037, 0.3100],
    [0.0551, 0.0333, 0.0232, 0.0237, 0.0232],
    [0.0290, 0.0409, 0.0402, 0.0415, 0.0520],
    [0.0045, 0.0014, 0.0018, 0.0014, 0.0021],
    [0.3820, 0.5031, 0.4285, 0.5558, 0.5478],
    [0.0033, 0.0009, 0.0009, 0.0009, 0.0011],
    [0.2291, 0.3128, 0.3148, 0.2853, 0.2871],
    [0.0238, 1.3320, 0.9777, 1.0589, 1.0933],
    [0.1625, 0.2414, 0.2291, 0.2314, 0.2298],
    [0.0630, 0.0516, 0.0528, 0.0521, 0.0480],
    [0.0924, 0.0858, 0.0826, 0.0803, 0.0812],
    [0.0000, 0.0008, 0.0000, 0.0004, 0.0008]
])
model_spacing_noise_responses = np.array([
    4.0827, 7.0095, 1.1747, 3.0894, 7.4255, 4.6500, 7.3538, 2.3731, 6.4770, 4.5075,
     1.8815, 0.5584, 2.5113, 0.1531, 10.9992, 7.9934, 0.8896, 7.2147, 4.8603, 2.6991,
     2.7895, 2.5453, 8.3536, 0.5944, 5.5841, 0.8800, 5.2683, 6.2100, 3.7507, 0.3056,
     3.9054, 1.5818, 2.0115, 3.4763, 8.4176, 1.3453, 2.5991, 3.2472, 2.1739, 4.9799,
     5.4535, 2.1300, 1.4809, 2.7247, 1.8356, 3.5845, 3.3638, 1.3204, 1.0790, 7.2684,
     5.5093, 0.8835, 3.7910, 4.6595, 4.2541, 0.5775, 1.2260, 1.5995, 0.9459, 5.5437,
     11.0361, 2.8850, 4.0771
])
model_spacing_mean_gains = np.array([
    [2.0311, 1.6550, 1.7776, 1.3320, 1.1230, 1.0749, 1.0658, 1.0595],
    [1.0881, 1.0728, 1.0586, 1.0397, 1.0215, 1.0103, 1.0121, 0.9938],
    [2.7468, 2.6345, 2.2791, 1.7500, 1.7317, 1.5006, 1.2738, 1.1497],
    [0.9765, 1.0705, 1.2203, 1.1330, 1.0318, 1.0173, 1.0167, 1.0185],
    [0.0000, 0.0000, 0.2080, 0.8056, 0.8392, 1.0666, 1.2228, 1.2498],
    [1.4030, 1.2481, 1.1095, 0.9770, 0.9229, 0.8564, 0.7454, 0.7013],
    [1.4492, 1.2799, 1.1673, 1.0624, 1.0171, 0.9888, 0.9767, 0.9714],
    [0.6171, 0.6782, 0.6475, 0.7099, 0.6849, 0.7253, 0.7482, 0.7703],
    [0.9977, 1.0034, 1.0109, 1.0146, 1.0170, 1.0210, 1.0233, 1.0260],
    [1.3217, 0.8588, 0.8311, 0.9162, 0.7906, 0.8874, 0.8315, 0.8013],
    [0.4865, 0.4744, 0.5408, 0.5793, 0.5880, 0.6295, 0.6646, 0.6456],
    [1.0142, 1.0157, 1.0108, 1.0119, 1.0073, 1.0052, 1.0052, 1.0038],
    [1.1597, 1.0792, 1.1184, 1.0161, 0.9975, 0.9985, 0.9997, 1.0010],
    [4.0343, 4.2784, 2.4198, 1.1930, 1.2111, 1.1321, 1.1042, 1.1000],
    [1.0040, 1.0042, 1.0036, 1.0028, 1.0030, 1.0015, 1.0006, 1.0003],
    [2.2023, 2.1856, 1.9549, 1.4381, 1.3936, 1.0695, 0.9994, 0.9997],
    [0.8855, 1.0165, 1.0761, 1.0983, 1.1392, 1.1884, 1.2284, 1.2496],
    [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
    [0.2458, 0.2816, 0.3547, 0.3856, 0.6392, 0.6441, 0.7392, 0.7548],
    [0.8726, 0.9161, 0.9436, 0.9793, 0.9980, 1.0064, 1.0768, 1.0716],
    [0.8027, 0.8000, 0.8282, 0.8251, 0.8422, 0.8537, 0.8718, 0.8834],
    [4.6876, 4.5517, 4.3090, 4.6856, 4.3261, 3.8701, 3.3057, 2.4907],
    [0.6819, 0.6819, 0.6818, 0.6818, 0.6818, 0.6818, 0.6818, 0.6843],
    [0.8712, 0.8917, 0.9124, 0.9285, 0.9467, 0.9538, 0.9642, 0.9689],
    [1.2440, 1.4020, 1.3500, 1.2287, 1.2584, 1.1845, 1.1621, 1.1137],
    [2.1023, 1.9712, 2.2555, 2.0384, 2.3105, 2.1286, 2.2067, 2.0362],
    [1.8791, 1.7304, 1.5516, 1.3679, 1.2414, 1.0923, 0.9787, 0.9424],
    [1.2301, 1.3454, 1.2675, 1.1298, 1.0661, 0.9712, 0.9441, 0.9245],
    [1.2195, 1.2761, 1.3100, 1.1820, 1.2214, 1.1473, 1.1298, 1.1347],
    [1.3313, 1.7255, 1.9530, 2.3521, 2.4202, 2.6945, 2.8465, 2.9366],
    [2.9937, 2.5512, 2.3120, 1.6622, 1.7288, 1.2008, 1.1739, 1.2058],
    [3.3161, 3.1261, 2.7435, 2.5315, 2.1456, 1.8279, 1.7239, 1.5571],
    [0.9745, 0.9256, 0.8640, 0.8296, 0.7475, 0.7844, 0.7682, 0.7480],
    [0.8964, 0.9059, 0.9300, 0.9659, 0.9777, 1.0493, 1.0947, 1.0911],
    [1.1518, 1.0887, 1.0308, 0.9756, 0.9324, 0.8937, 0.8513, 0.8143],
    [1.0000, 1.0002, 1.0018, 1.0021, 1.0011, 1.0006, 1.0000, 1.0004],
    [1.5894, 1.4345, 1.2602, 1.1601, 1.0675, 1.0317, 1.0188, 1.0234],
    [1.0163, 1.0053, 0.9942, 0.9833, 0.9834, 0.9761, 0.9750, 0.9733],
    [0.8890, 0.9572, 1.0110, 1.0684, 1.1099, 1.1524, 1.1685, 1.1927],
    [3.6991, 3.6296, 3.1029, 2.1235, 2.1474, 1.3050, 0.8792, 0.8382],
    [0.9970, 0.9884, 1.0701, 1.0695, 1.0760, 1.0673, 1.0285, 1.0419],
    [1.2359, 1.0820, 1.0015, 0.9360, 0.8235, 0.7955, 0.7502, 0.7992],
    [5.3909, 5.1327, 3.6312, 1.4110, 1.4533, 0.9668, 0.8564, 0.8627],
    [0.3707, 0.3642, 0.3392, 0.3528, 0.3398, 0.5388, 0.5442, 0.6673],
    [1.6957, 1.6122, 1.3587, 1.0262, 0.9969, 0.8844, 0.8252, 0.8334],
    [0.9852, 0.9929, 1.0002, 1.0114, 1.0189, 1.0222, 1.0219, 1.0224],
    [0.9904, 0.9894, 0.9886, 0.9874, 0.9874, 0.9887, 0.9879, 0.9878],
    [0.9916, 0.9902, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900, 0.9900],
    [5.3588, 5.1246, 3.6452, 3.8720, 1.6691, 1.3467, 1.3187, 1.3649],
    [1.3034, 1.2032, 1.3118, 1.2063, 1.1882, 1.1249, 1.0821, 1.0657],
    [3.8617, 3.9541, 4.0833, 3.8102, 3.4532, 3.1720, 2.9736, 2.6779],
    [1.8098, 1.8439, 2.0251, 2.0537, 1.9722, 1.8831, 1.8103, 1.7761],
    [0.9060, 0.9148, 0.9243, 0.9189, 0.9235, 0.9290, 0.9353, 0.9417],
    [1.1078, 1.2017, 1.2668, 1.2619, 1.2177, 1.1647, 1.1843, 1.1799],
    [1.0016, 0.9996, 0.9935, 0.9909, 0.9892, 0.9883, 0.9868, 0.9866],
    [2.3124, 1.0464, 0.7935, 0.4628, 0.3883, 0.1609, 0.1516, 0.1473],
    [0.9993, 0.9997, 1.0027, 0.9991, 0.9990, 0.9991, 0.9989, 0.9987],
    [4.1916, 4.3019, 3.8854, 3.1356, 2.9542, 2.4755, 2.1841, 2.0247],
    [7.8125, 8.3348, 5.6134, 4.2855, 1.8359, 1.2038, 1.1607, 1.1258],
    [4.8548, 4.0016, 3.3618, 3.3210, 2.2304, 1.8042, 1.3511, 0.9387],
    [0.8251, 0.5457, 0.6302, 0.6073, 0.6067, 0.5679, 0.5315, 0.5518],
    [1.4109, 1.3941, 1.2970, 1.2531, 1.1917, 1.1015, 1.0640, 0.9885],
    [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000]
])
model_spacing_std_gains = np.array([
    [0.3848, 0.2811, 0.3229, 0.3152, 0.1505, 0.1133, 0.0870, 0.0367],
    [0.0225, 0.0185, 0.0187, 0.0173, 0.0187, 0.0152, 0.0153, 0.0117],
    [0.1347, 0.1651, 0.1528, 0.1730, 0.1383, 0.1493, 0.1458, 0.1166],
    [0.0096, 0.1144, 0.1919, 0.1376, 0.0595, 0.0309, 0.0193, 0.0077],
    [0.0000, 0.0000, 0.1100, 0.1017, 0.0753, 0.0736, 0.0596, 0.0447],
    [0.1025, 0.1162, 0.1398, 0.1316, 0.1405, 0.1119, 0.0996, 0.0599],
    [0.0635, 0.0515, 0.0567, 0.0186, 0.0184, 0.0082, 0.0048, 0.0043],
    [0.0351, 0.0625, 0.0314, 0.0597, 0.0353, 0.0479, 0.0495, 0.0767],
    [0.0035, 0.0029, 0.0030, 0.0025, 0.0033, 0.0018, 0.0020, 0.0015],
    [0.1432, 0.1656, 0.1414, 0.1454, 0.1538, 0.1111, 0.1231, 0.1022],
    [0.0288, 0.0356, 0.0376, 0.0401, 0.0321, 0.0295, 0.0223, 0.0231],
    [0.0026, 0.0022, 0.0026, 0.0024, 0.0019, 0.0021, 0.0021, 0.0016],
    [0.1649, 0.1220, 0.1586, 0.0656, 0.0062, 0.0056, 0.0042, 0.0027],
    [0.5440, 0.4225, 0.4566, 0.0478, 0.0818, 0.0380, 0.0420, 0.0354],
    [0.0015, 0.0035, 0.0017, 0.0013, 0.0012, 0.0011, 0.0009, 0.0007],
    [0.0888, 0.0896, 0.1073, 0.0802, 0.0933, 0.0726, 0.0024, 0.0034],
    [0.0368, 0.1950, 0.1499, 0.0274, 0.0260, 0.0284, 0.0237, 0.0224],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0449, 0.0455, 0.0572, 0.0568, 0.0770, 0.0734, 0.0622, 0.0615],
    [0.0299, 0.0168, 0.0193, 0.0149, 0.0276, 0.0283, 0.0906, 0.0722],
    [0.0189, 0.0127, 0.0165, 0.0115, 0.0174, 0.0229, 0.0244, 0.0155],
    [0.5177, 0.4244, 0.5172, 0.5305, 0.4801, 0.2870, 0.3155, 0.3183],
    [0.0002, 0.0002, 0.0001, 0.0001, 0.0000, 0.0000, 0.0001, 0.0088],
    [0.0145, 0.0136, 0.0109, 0.0109, 0.0113, 0.0093, 0.0107, 0.0076],
    [0.0685, 0.0632, 0.0443, 0.0613, 0.0614, 0.0509, 0.0530, 0.0458],
    [0.6710, 0.7195, 0.6853, 0.6635, 0.6748, 0.6276, 0.5551, 0.4672],
    [0.0868, 0.0732, 0.0649, 0.0641, 0.0502, 0.0548, 0.0354, 0.0297],
    [0.0558, 0.0457, 0.0465, 0.0479, 0.0449, 0.0413, 0.0362, 0.0286],
    [0.0884, 0.0866, 0.0932, 0.0631, 0.0737, 0.0578, 0.0555, 0.0480],
    [0.3883, 0.4205, 0.3575, 0.3160, 0.3922, 0.3818, 0.3338, 0.2865],
    [0.1461, 0.1411, 0.1698, 0.1731, 0.1571, 0.1687, 0.1292, 0.1515],
    [0.2225, 0.1832, 0.1903, 0.2028, 0.1572, 0.1701, 0.1332, 0.1688],
    [0.1046, 0.1086, 0.0838, 0.1079, 0.0757, 0.0655, 0.0638, 0.0673],
    [0.0254, 0.0134, 0.0119, 0.0343, 0.0376, 0.0584, 0.0534, 0.0547],
    [0.0620, 0.0574, 0.0493, 0.0475, 0.0460, 0.0510, 0.0438, 0.0437],
    [0.0007, 0.0011, 0.0028, 0.0033, 0.0023, 0.0014, 0.0003, 0.0013],
    [0.2828, 0.3174, 0.2430, 0.1861, 0.0749, 0.0359, 0.0245, 0.0236],
    [0.0056, 0.0074, 0.0091, 0.0073, 0.0087, 0.0061, 0.0063, 0.0047],
    [0.0281, 0.0208, 0.0239, 0.0175, 0.0157, 0.0125, 0.0144, 0.0120],
    [0.2529, 0.3221, 0.2256, 0.1704, 0.1539, 0.1586, 0.1077, 0.0728],
    [0.0577, 0.0376, 0.0682, 0.0776, 0.0758, 0.0644, 0.0317, 0.0412],
    [0.0933, 0.0957, 0.0950, 0.1183, 0.0997, 0.0997, 0.0949, 0.0888],
    [0.5227, 0.5144, 0.5952, 0.4504, 0.5229, 0.2049, 0.0588, 0.0848],
    [0.0295, 0.0324, 0.0260, 0.0240, 0.0576, 0.1041, 0.1008, 0.0477],
    [0.3451, 0.3302, 0.3981, 0.3202, 0.3099, 0.3069, 0.2345, 0.2324],
    [0.0075, 0.0069, 0.0064, 0.0055, 0.0059, 0.0047, 0.0042, 0.0040],
    [0.0024, 0.0021, 0.0017, 0.0018, 0.0019, 0.0017, 0.0017, 0.0014],
    [0.0017, 0.0006, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.6503, 0.7402, 0.5995, 0.7127, 0.5243, 0.2290, 0.0617, 0.0591],
    [0.1161, 0.0980, 0.0961, 0.0756, 0.0657, 0.0525, 0.0587, 0.0522],
    [0.2162, 0.2341, 0.2473, 0.2079, 0.2021, 0.1484, 0.1502, 0.1407],
    [0.3202, 0.2118, 0.2135, 0.2515, 0.2181, 0.1745, 0.2128, 0.1720],
    [0.0272, 0.0236, 0.0220, 0.0208, 0.0174, 0.0162, 0.0128, 0.0099],
    [0.0368, 0.0403, 0.0373, 0.0548, 0.0393, 0.0559, 0.0506, 0.0475],
    [0.0017, 0.0019, 0.0020, 0.0012, 0.0015, 0.0009, 0.0006, 0.0002],
    [0.4814, 0.5635, 0.4985, 0.4337, 0.3302, 0.3111, 0.2662, 0.2988],
    [0.0012, 0.0032, 0.0067, 0.0008, 0.0007, 0.0008, 0.0006, 0.0002],
    [0.3287, 0.2643, 0.2683, 0.2669, 0.2448, 0.2097, 0.2451, 0.2058],
    [1.0319, 0.9298, 0.7750, 0.5931, 0.5487, 0.1333, 0.0664, 0.0377],
    [0.2247, 0.1832, 0.1860, 0.1792, 0.1632, 0.1572, 0.1560, 0.0553],
    [0.0503, 0.0536, 0.0558, 0.0467, 0.0426, 0.0523, 0.0361, 0.0409],
    [0.0872, 0.0847, 0.0700, 0.0568, 0.0616, 0.0474, 0.0546, 0.0403],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]
])

# ---------------------------------------------------------------------------------------
# dir: results/new_model_resnet_based/Old/
# ContourIntegrationResnet50_ControlMatchParametersLayer_20200818_105255_baseline
control_removed_neurons = [1, 2, 5, 6, 8, 12, 13, 21, 22, 28, 30, 38, 42, 43, 44, 51, 52, 60]
control_c_len_noise_responses = np.array([
    0.0000, 0.0000, 0.0000, 0.0173, 0.0000, 0.0907, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0007, 0.0041, 0.1652, 0.0000, 0.0000, 0.0000, 0.0000, 0.0016,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0270, 0.0020, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0313, 0.0000, 0.0012, 0.0000, 0.0000, 0.0000, 0.0014, 0.0847, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0007, 0.0026, 0.0000
])
control_c_len_iou = np.array([0.9883, 0.6800, 0.8777, 0.8655, 0.8402])
control_c_len_mean_gains = np.array([
    [0.0000, 0.0000, 141.0289, 86.3172, 455.9553],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.9994, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 10000.1231, 23952.8918, 19880.8027, 24523.4350],
    [0.9999, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 42565.1375, 67315.4526, 66856.1508, 68561.8873],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.9866, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.9976, 0.1610, 0.0000, 0.0000, 0.0000],
    [0.9999, 0.0000, 0.0000, 0.0000, 0.0162],
    [0.8174, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 48.1052],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.9939, 0.0000, 1.0487, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.5259, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.9996, 0.0016, 0.0000, 0.0000, 0.0000],
    [0.9949, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 347.8529, 334.0301, 139.2938, 691.9663],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.9997, 0.0000, 0.0000, 0.0000, 0.0492],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.9918, 68.9206, 152.4745, 143.8547, 149.6866],
    [0.0000, 0.0000, 64.9731, 0.0000, 161.1685],
    [0.0000, 2180.6015, 15353.1649, 50470.0058, 56175.1218],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.9928, 15.5510, 8.4073, 10.7288, 7.8448],
    [0.9999, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 35270.8209, 39873.2361, 40941.4851, 41916.5895],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.9859, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.9961, 4.0394, 10.6513, 16.6747, 20.2833],
    [0.0000, 2202.9014, 1656.4888, 1415.5799, 2639.7578],
])
control_c_len_std_gains = np.array([
    [0.0000, 0.0000, 719.5580, 367.4417, 1574.7197],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [2.6970, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 8302.3519, 9283.5723, 11175.3824, 12768.7967],
    [1.0060, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 13007.4145, 12154.4110, 12301.5920, 12254.4305],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [6.9064, 0.0000, 0.0000, 0.0000, 0.0000],
    [5.5150, 1.1271, 0.0000, 0.0000, 0.0000],
    [0.8910, 0.0000, 0.0000, 0.0000, 0.1132],
    [5.7220, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 336.7361],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [6.9575, 0.0000, 7.3411, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [3.6813, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [1.8837, 0.0110, 0.0000, 0.0000, 0.0000],
    [5.5731, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 1334.6763, 1802.2334, 692.1463, 2144.1714],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [1.6909, 0.0000, 0.0000, 0.0000, 0.3444],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [6.9423, 67.7118, 99.9421, 87.9116, 92.1437],
    [0.0000, 0.0000, 417.6208, 0.0000, 1128.1796],
    [0.0000, 6316.6854, 11883.8249, 10870.9368, 7756.5231],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [5.0998, 31.8881, 27.0252, 26.1851, 21.8700],
    [1.2421, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 12831.8393, 18306.4564, 16111.3282, 14519.9422],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [6.9012, 0.0000, 0.0000, 0.0000, 0.0000],
    [6.9727, 12.9003, 20.3033, 25.0565, 25.9088],
    [0.0000, 5514.0980, 3744.9943, 3243.4033, 4860.1630],
])
control_spacing_noise_responses = np.array([
    0.0000, 0.0000, 0.0000, 0.0130, 0.0003, 0.0859, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.1381, 0.0000, 0.0000, 0.0034, 0.0000, 0.0027,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0433, 0.0097, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0334, 0.0000, 0.0024, 0.0000, 0.0000, 0.0000, 0.0043, 0.0966, 0.0002,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0016, 0.0000
])
control_spacing_mean_gains = np.array([
    [464.5743, 2172.7283, 471.4800, 611.2878, 229.8771, 184.5436, 151.3147, 0.0000],
    [0.0000, 0.0000, 0.0000, 40.5655, 616.6341, 14437.7640, 19546.8450, 39997.7497],
    [115.8478, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 222.1327],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.4445, 0.2841, 0.7933, 5.5181],
    [761.4618, 240.1485, 65.7757, 3.2346, 20.0230, 16.8365, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0346, 0.0054, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [66561.9162, 36314.5224, 39300.5900, 27680.7409, 30710.9387, 47186.6717, 27549.5052, 30507.3452],
    [0.0000, 0.0000, 0.0000, 354.4784, 136.9250, 92.3555, 164.8045, 625.3617],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 310.1913, 55.7864, 247.5465],
    [0.0000, 0.0000, 106.1538, 228.4125, 199.3573, 1468.0566, 6185.1473, 15048.9390],
    [0.0000, 0.0000, 0.0000, 0.0000, 233.1850, 322.2507, 2086.7814, 5091.9529],
    [0.0000, 0.0000, 0.0000, 0.0000, 1.1513, 0.0000, 0.0000, 0.0000],
    [0.0198, 0.0164, 0.1844, 0.7491, 1.5870, 1.3039, 1.6905, 1.2291],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 745.7148, 1231.7067, 39.2397],
    [0.0000, 0.0000, 0.0000, 0.0000, 20.4229, 38.2856, 7.9846, 466.3083],
    [0.0000, 0.8485, 4.5385, 10.5221, 15.8442, 24.4993, 41.4969, 48.1584],
    [0.0000, 0.0000, 0.0000, 0.0000, 64.7888, 751.2077, 3945.2319, 3265.9434],
    [0.0000, 0.0000, 2.0593, 4.7476, 7.5717, 30.9876, 41.3209, 78.7753],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 71.6501, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 89.7565, 778.5510],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.4108, 0.9696, 1.5375, 3.7649, 2.9432, 5.8120],
    [0.0000, 0.0000, 0.0000, 0.0000, 2.0213, 3.3150, 6.8353, 8.3409],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 72.6454, 576.3915],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [546.1446, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 165.3440, 1331.5243, 2241.1046, 2722.6679, 4222.0430],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 245.3182, 295.2699],
    [0.0009, 0.0000, 0.0181, 0.2560, 0.5823, 1.4674, 1.4869, 1.9078],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 220.0805],
    [74.9560, 9.9669, 8.4442, 0.0278, 0.0000, 0.0000, 0.0000, 0.0000],
    [333.3951, 660.1251, 39.2661, 117.5469, 0.0000, 3.5957, 1089.3912, 29.1472],
    [47874.7963, 30997.3273, 24737.5056, 12061.4305, 12671.4074, 19172.0069, 8987.2811, 29991.4291],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [2.6008, 7.5061, 0.4259, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0174, 0.0411],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 246.5002, 1625.3273, 1891.2630, 1413.6796],
    [41205.2381, 34024.8694, 29501.4584, 7243.5889, 10067.3469, 1556.6464, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 464.8028, 39.4521, 575.2829],
    [0.0000, 0.0000, 0.0000, 0.0000, 217.3472, 3071.2929, 3264.7509, 1371.6286],
    [31.5330, 38.7510, 1.2299, 0.0000, 0.0000, 0.1611, 0.3617, 0.0000],
    [4452.7654, 4709.2311, 1162.4038, 379.7924, 135.0123, 0.0000, 286.9707, 0.0000],
])
control_spacing_std_gains = np.array([
    [1981.4860, 4984.8845, 1542.0766, 1866.8219, 1139.4327, 813.1856, 1059.2031, 0.0000],
    [0.0000, 0.0000, 0.0000, 283.9585, 2636.2457, 14168.4033, 16166.0319, 18440.8424],
    [810.9346, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1554.9291],
    [0.0000, 0.0000, 0.0000, 0.0000, 1.4562, 1.1276, 2.2563, 6.5342],
    [401.4996, 281.7725, 119.6580, 22.6422, 72.1608, 56.8057, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.2421, 0.0375, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [13029.1344, 10312.2816, 11762.4946, 14743.1400, 14092.1834, 17955.3074, 17929.0598, 17331.1949],
    [0.0000, 0.0000, 0.0000, 1740.6055, 958.4747, 646.4887, 1153.6315, 2219.0453],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1118.5456, 390.5048, 1035.3308],
    [0.0000, 0.0000, 743.0765, 1598.8877, 1325.5656, 3926.6098, 7526.1097, 14411.0433],
    [0.0000, 0.0000, 0.0000, 0.0000, 935.5779, 1401.7642, 4611.4592, 7962.4753],
    [0.0000, 0.0000, 0.0000, 0.0000, 8.0588, 0.0000, 0.0000, 0.0000],
    [0.1386, 0.1150, 0.5309, 0.9906, 1.3389, 1.2174, 1.3555, 0.9513],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 2193.9993, 3857.8934, 274.6781],
    [0.0000, 0.0000, 0.0000, 0.0000, 142.9602, 267.9992, 55.8925, 2351.2372],
    [0.0000, 4.2692, 13.8167, 24.1276, 25.1072, 37.1966, 45.9656, 47.3714],
    [0.0000, 0.0000, 0.0000, 0.0000, 453.5216, 3876.8366, 8361.6492, 6264.4844],
    [0.0000, 0.0000, 9.6112, 12.3124, 15.1073, 40.2742, 41.6659, 62.0989],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 501.5507, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 628.2952, 2830.1620],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.8470, 1.6765, 2.2002, 3.0433, 3.2441, 3.9779],
    [0.0000, 0.0000, 0.0000, 0.0000, 5.0434, 6.5968, 10.1371, 9.2369],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 508.5176, 2169.1358],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [2644.3137, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 1157.4079, 5024.6147, 4986.6756, 6986.5904, 7656.0072],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1075.6541, 897.5733],
    [0.0064, 0.0000, 0.1268, 0.7039, 1.0800, 2.6989, 1.9641, 2.5640],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1540.5638],
    [49.9112, 18.2979, 19.1386, 0.1946, 0.0000, 0.0000, 0.0000, 0.0000],
    [1620.5146, 2511.8245, 202.0315, 822.8281, 0.0000, 25.1700, 3881.4269, 204.0306],
    [11976.4384, 10178.4678, 10961.0500, 10216.5450, 8912.5107, 9469.9745, 9455.0567, 13532.5021],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [7.4495, 9.2443, 1.8737, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0973, 0.2657],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 1212.9075, 4777.5908, 5893.9605, 5769.4330],
    [16992.1105, 13329.5259, 12474.7876, 7011.7466, 8542.5619, 5099.0160, 0.0000, 0.0000],
    [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 2350.8741, 276.1646, 2641.3613],
    [0.0000, 0.0000, 0.0000, 0.0000, 1521.4307, 8292.1023, 7480.1118, 4542.9168],
    [41.3982, 40.9152, 4.6318, 0.0000, 0.0000, 1.1280, 2.5322, 0.0000],
    [7838.0143, 6480.4067, 3216.6004, 2191.3496, 945.0863, 0.0000, 2008.7949, 0.0000],
])


# ---------------------------------------------------------------------------------------
def get_gradients_of_linear_fits(x, gain_arr):
    gradients = []

    for ch_idx in range(len(gain_arr)):
        ch_gains = gain_arr[ch_idx, ]
        m_out, b_out = np.polyfit(x, ch_gains, deg=1)

        gradients.append(m_out)

    return np.array(gradients)


if __name__ == "__main__":
    plt.ion()

    # Units of contour fragments
    c_len_arr = np.array([1, 3, 5, 7, 9])
    # Units of relative co-linear distance (RCD)
    spacing_arr = np.array([1.00, 1.14, 1.29, 1.43, 1.57, 1.71, 1.86, 2.00])

    # Filtered_results
    valid_m_c_len_idx_arr = \
        [idx for idx, noise_resp in enumerate(model_c_len_noise_responses) if noise_resp >= INVALID_NOISE_RESP]
    valid_m_space_idx_arr = \
        [idx for idx, noise_resp in enumerate(model_spacing_noise_responses) if noise_resp >= INVALID_NOISE_RESP]
    valid_c_c_len_idx_arr = \
        [idx for idx, noise_resp in enumerate(control_c_len_noise_responses)
         if noise_resp >= INVALID_NOISE_RESP]
    valid_c_space_idx_arr = \
        [idx for idx, noise_resp in enumerate(control_spacing_noise_responses)
         if noise_resp >= INVALID_NOISE_RESP]

    filtered_model_c_len_mean_gains = model_c_len_mean_gains[valid_m_c_len_idx_arr, ]
    filtered_model_c_len_std_gains = model_c_len_std_gains[valid_m_c_len_idx_arr, ]
    filtered_model_spacing_mean_gains = model_spacing_mean_gains[valid_m_space_idx_arr, ]
    filtered_model_spacing_std_gains = model_spacing_std_gains[valid_m_space_idx_arr, ]
    model_c_len_n_avg = len(filtered_model_c_len_mean_gains)
    model_spacing_n_avg = len(filtered_model_spacing_mean_gains)

    filtered_control_c_len_mean_gains = control_c_len_mean_gains[valid_c_c_len_idx_arr, ]
    filtered_control_c_len_std_gains = control_c_len_std_gains[valid_c_c_len_idx_arr, ]
    filtered_control_spacing_mean_gains = control_spacing_mean_gains[valid_c_space_idx_arr, ]
    filtered_control_spacing_std_gains = control_spacing_std_gains[valid_c_space_idx_arr, ]
    control_c_len_n_avg = len(filtered_control_c_len_mean_gains)
    control_spacing_n_avg = len(filtered_control_spacing_mean_gains)
    # -----------------------------------------------------------------------------------
    # Figure
    # -----------------------------------------------------------------------------------
    f = plt.figure(constrained_layout=True, figsize=(12, 9))
    gs = f.add_gridspec(3, 6)

    # Behavioral IoU vs contour length
    # --------------------------------
    ax1 = f.add_subplot(gs[0, 0:2])

    ax1.plot(c_len_arr, model_c_len_iou, label='model', color='b')
    ax1.plot(c_len_arr, control_c_len_iou, label='control', color='r')

    ax1.set_yticks([0, 0.5, 1])
    ax1.set_ylabel('IoU')
    ax1.set_xticks(c_len_arr)
    ax1.set_xlabel("Length (fragments)")

    # Gain Vs contour length
    # ----------------------
    pop_mean_model_c_len_gain = np.mean(filtered_model_c_len_mean_gains, axis=0)
    pop_std_model_c_len_gain = np.std(filtered_model_c_len_mean_gains, axis=0)
    pop_mean_control_c_len_gain = np.mean(filtered_control_c_len_mean_gains, axis=0)
    pop_std_control_c_len_gain = np.std(filtered_control_c_len_mean_gains, axis=0)

    ax2 = f.add_subplot(gs[0, 2:4])

    ax2.plot(
        c_len_arr, pop_mean_model_c_len_gain,
        label='Model (N={})'.format(model_c_len_n_avg), color='b')
    ax2.fill_between(
        c_len_arr,
        pop_mean_model_c_len_gain - pop_std_model_c_len_gain,
        pop_mean_model_c_len_gain + pop_std_model_c_len_gain,
        alpha=0.2, color='b')
    ax2.plot(
        c_len_arr, pop_mean_control_c_len_gain,
        label='Control (N={})'.format(control_c_len_n_avg), color='r')
    ax2.fill_between(
        c_len_arr,
        pop_mean_control_c_len_gain - pop_std_control_c_len_gain,
        pop_mean_control_c_len_gain + pop_std_control_c_len_gain,
        alpha=0.2, color='r')

    ax2.set_xticks(c_len_arr)
    ax2.set_xlabel("Length (fragments)")
    ax2.set_ylabel("Gain")

    # Gain Vs Fragment Spacing
    # ----------------------
    pop_mean_model_spacing_gain = np.mean(filtered_model_spacing_mean_gains, axis=0)
    pop_std_model_spacing_gain = np.std(filtered_model_spacing_mean_gains, axis=0)
    pop_mean_control_spacing_gain = np.mean(filtered_control_spacing_mean_gains, axis=0)
    pop_std_control_spacing_gain = np.std(filtered_control_spacing_mean_gains, axis=0)

    ax3 = f.add_subplot(gs[0, 4:6])

    ax3.plot(
        spacing_arr, pop_mean_model_spacing_gain,
        label='Model (N={})'.format(model_spacing_n_avg), color='b')
    ax3.fill_between(
        spacing_arr,
        pop_mean_model_spacing_gain - pop_std_model_spacing_gain,
        pop_mean_model_spacing_gain + pop_std_model_spacing_gain,
        alpha=0.2, color='b')
    ax3.plot(
        spacing_arr,
        pop_mean_control_spacing_gain,
        label='Control (N={})'.format(control_spacing_n_avg), color='r')
    ax3.fill_between(
        spacing_arr,
        pop_mean_control_spacing_gain - pop_std_control_spacing_gain,
        pop_mean_control_spacing_gain + pop_std_control_spacing_gain,
        alpha=0.2, color='r')

    ax3.set_xlabel("Spacing (RCD)")
    ax3.set_ylabel("Gain")
    ax3.set_ylim([0, 3.5])
    # ax3.legend()

    # histogram Gain vs Length - Model
    # --------------------------------
    c_len_bin_max = 1
    c_len_bin_min = -0.2
    c_len_bins = np.arange(c_len_bin_min, c_len_bin_max, 0.1)

    model_c_len_grads = get_gradients_of_linear_fits(c_len_arr, filtered_model_c_len_mean_gains)

    ax4 = f.add_subplot(gs[1, 0:3])

    ax4.hist(
        model_c_len_grads.clip(min=c_len_bin_min, max=c_len_bin_max),  # Include all data points
        label="Contour Int. (N={})".format(model_c_len_n_avg), color='blue', bins=c_len_bins)

    ax4.set_ylabel("Freq")
    ax4.legend()

    # histogram Gain vs Length - Control
    # --------------------------------
    control_c_len_grads = get_gradients_of_linear_fits(c_len_arr, filtered_control_c_len_mean_gains)

    ax5 = f.add_subplot(gs[2, 0:3], sharex=ax4)

    ax5.hist(
        control_c_len_grads.clip(min=c_len_bin_min, max=c_len_bin_max),  # Include all data points
        label="Control (N={})".format(control_c_len_n_avg), color='red', bins=c_len_bins)

    ax5.set_ylabel("Freq")
    ax5.legend()
    ax5.set_xlabel("Gradients - gain vs length")

    # histogram Gain vs Spacing - Model
    # --------------------------------
    spacing_bin_max = 5
    spacing_bin_min = -8
    spacing_bins = np.arange(spacing_bin_min, spacing_bin_max, 1)

    model_spacing_grads = get_gradients_of_linear_fits(spacing_arr, filtered_model_spacing_mean_gains)

    ax6 = f.add_subplot(gs[1, 3:6])

    ax6.hist(
        model_spacing_grads.clip(min=spacing_bin_min, max=spacing_bin_max),  # Include all data points
        label="Contour Int. (N={})".format(model_spacing_n_avg), color='blue', bins=spacing_bins)

    ax6.set_ylabel("Freq")
    ax6.legend()

    # histogram Gain vs Length - Control
    # --------------------------------
    control_spacing_grads = get_gradients_of_linear_fits(spacing_arr, filtered_control_spacing_mean_gains)

    ax7 = f.add_subplot(gs[2, 3:6], sharex=ax6)

    ax7.hist(
        control_spacing_grads.clip(min=spacing_bin_min, max=spacing_bin_max),  # Include all data points
        label="Control (N={})".format(control_spacing_n_avg), color='red', bins=spacing_bins)

    ax7.set_ylabel("Freq")
    ax7.legend()
    ax7.set_xlabel("Gradients - gain vs spacing")

    # -----------------------------------------------------------------------------------
    # End
    # -----------------------------------------------------------------------------------
    print("End")

    import pdb
    pdb.set_trace()
